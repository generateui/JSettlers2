// Generated from src/antlr/JSettlers.g4 by ANTLR 4.7
// jshint ignore: start
var antlr4 = require('antlr4/index');
var JSettlersListener = require('./JSettlersListener').JSettlersListener;
var grammarFileName = "JSettlers.g4";

var serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964",
    "\u0003\u0083\u0436\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004\u0004",
    "\t\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t\u0007",
    "\u0004\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004\f\t\f",
    "\u0004\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010\t\u0010",
    "\u0004\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013\u0004\u0014",
    "\t\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017\t\u0017",
    "\u0004\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a\u0004\u001b",
    "\t\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e\t\u001e",
    "\u0004\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#\t#\u0004",
    "$\t$\u0004%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004*\t*\u0004",
    "+\t+\u0004,\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u00041\t1\u0004",
    "2\t2\u00043\t3\u00044\t4\u00045\t5\u00046\t6\u00047\t7\u00048\t8\u0004",
    "9\t9\u0004:\t:\u0004;\t;\u0004<\t<\u0004=\t=\u0004>\t>\u0004?\t?\u0004",
    "@\t@\u0004A\tA\u0004B\tB\u0004C\tC\u0004D\tD\u0004E\tE\u0004F\tF\u0004",
    "G\tG\u0004H\tH\u0004I\tI\u0004J\tJ\u0004K\tK\u0004L\tL\u0004M\tM\u0004",
    "N\tN\u0004O\tO\u0004P\tP\u0004Q\tQ\u0004R\tR\u0004S\tS\u0004T\tT\u0004",
    "U\tU\u0004V\tV\u0004W\tW\u0004X\tX\u0004Y\tY\u0004Z\tZ\u0004[\t[\u0004",
    "\\\t\\\u0004]\t]\u0004^\t^\u0004_\t_\u0004`\t`\u0004a\ta\u0004b\tb\u0004",
    "c\tc\u0004d\td\u0004e\te\u0004f\tf\u0004g\tg\u0004h\th\u0004i\ti\u0004",
    "j\tj\u0004k\tk\u0004l\tl\u0004m\tm\u0004n\tn\u0004o\to\u0004p\tp\u0004",
    "q\tq\u0004r\tr\u0004s\ts\u0004t\tt\u0004u\tu\u0004v\tv\u0004w\tw\u0004",
    "x\tx\u0004y\ty\u0004z\tz\u0004{\t{\u0004|\t|\u0004}\t}\u0004~\t~\u0003",
    "\u0002\u0003\u0002\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003",
    "\u0003\u0005\u0003\u0104\n\u0003\u0003\u0004\u0003\u0004\u0003\u0004",
    "\u0003\u0004\u0003\u0004\u0005\u0004\u010b\n\u0004\u0003\u0004\u0003",
    "\u0004\u0003\u0004\u0005\u0004\u0110\n\u0004\u0003\u0004\u0003\u0004",
    "\u0003\u0004\u0006\u0004\u0115\n\u0004\r\u0004\u000e\u0004\u0116\u0003",
    "\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003",
    "\u0005\u0003\u0005\u0007\u0005\u0121\n\u0005\f\u0005\u000e\u0005\u0124",
    "\u000b\u0005\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006",
    "\u0003\u0006\u0003\u0006\u0003\u0006\u0005\u0006\u012e\n\u0006\u0003",
    "\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\b\u0003\b\u0003\b\u0003",
    "\b\u0003\t\u0003\t\u0003\t\u0003\t\u0003\n\u0003\n\u0003\n\u0003\n\u0003",
    "\u000b\u0003\u000b\u0003\u000b\u0005\u000b\u0143\n\u000b\u0003\u000b",
    "\u0003\u000b\u0005\u000b\u0147\n\u000b\u0003\f\u0003\f\u0003\f\u0005",
    "\f\u014c\n\f\u0003\f\u0003\f\u0005\f\u0150\n\f\u0003\r\u0003\r\u0003",
    "\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003",
    "\u000e\u0003\u000e\u0007\u000e\u015c\n\u000e\f\u000e\u000e\u000e\u015f",
    "\u000b\u000e\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f",
    "\u0005\u000f\u0166\n\u000f\u0003\u0010\u0003\u0010\u0003\u0010\u0003",
    "\u0010\u0003\u0010\u0003\u0010\u0003\u0011\u0003\u0011\u0003\u0011\u0005",
    "\u0011\u0171\n\u0011\u0003\u0012\u0003\u0012\u0003\u0013\u0003\u0013",
    "\u0003\u0014\u0003\u0014\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015",
    "\u0003\u0015\u0003\u0015\u0003\u0016\u0003\u0016\u0003\u0017\u0003\u0017",
    "\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0019\u0003\u0019",
    "\u0003\u001a\u0003\u001a\u0005\u001a\u018b\n\u001a\u0003\u001b\u0003",
    "\u001b\u0003\u001c\u0003\u001c\u0003\u001d\u0003\u001d\u0003\u001e\u0003",
    "\u001e\u0003\u001f\u0003\u001f\u0005\u001f\u0197\n\u001f\u0003 \u0003",
    " \u0003 \u0003 \u0003!\u0003!\u0003!\u0003!\u0003!\u0003!\u0003\"\u0003",
    "\"\u0003\"\u0003\"\u0003\"\u0003\"\u0003\"\u0003\"\u0007\"\u01ab\n\"",
    "\f\"\u000e\"\u01ae\u000b\"\u0003#\u0003#\u0005#\u01b2\n#\u0003$\u0003",
    "$\u0003$\u0006$\u01b7\n$\r$\u000e$\u01b8\u0003%\u0003%\u0006%\u01bd",
    "\n%\r%\u000e%\u01be\u0003&\u0003&\u0003&\u0003&\u0003&\u0003&\u0003",
    "&\u0003&\u0007&\u01c9\n&\f&\u000e&\u01cc\u000b&\u0003\'\u0003\'\u0005",
    "\'\u01d0\n\'\u0003(\u0003(\u0003)\u0003)\u0005)\u01d6\n)\u0003*\u0003",
    "*\u0003*\u0003*\u0005*\u01dc\n*\u0003*\u0005*\u01df\n*\u0003*\u0005",
    "*\u01e2\n*\u0006*\u01e4\n*\r*\u000e*\u01e5\u0003+\u0003+\u0005+\u01ea",
    "\n+\u0003+\u0005+\u01ed\n+\u0003+\u0005+\u01f0\n+\u0003+\u0006+\u01f3",
    "\n+\r+\u000e+\u01f4\u0003,\u0003,\u0003,\u0003,\u0003,\u0003,\u0003",
    ",\u0003,\u0007,\u01ff\n,\f,\u000e,\u0202\u000b,\u0003-\u0003-\u0005",
    "-\u0206\n-\u0003.\u0003.\u0003/\u0003/\u0005/\u020c\n/\u00030\u0003",
    "0\u00030\u00030\u00050\u0212\n0\u00030\u00050\u0215\n0\u00030\u0005",
    "0\u0218\n0\u00060\u021a\n0\r0\u000e0\u021b\u00031\u00031\u00051\u0220",
    "\n1\u00031\u00051\u0223\n1\u00031\u00051\u0226\n1\u00031\u00061\u0229",
    "\n1\r1\u000e1\u022a\u00032\u00032\u00032\u00032\u00032\u00032\u0003",
    "2\u00032\u00072\u0235\n2\f2\u000e2\u0238\u000b2\u00033\u00033\u0003",
    "3\u00033\u00033\u00033\u00034\u00034\u00034\u00034\u00034\u00034\u0003",
    "4\u00034\u00074\u0248\n4\f4\u000e4\u024b\u000b4\u00035\u00035\u0005",
    "5\u024f\n5\u00035\u00035\u00035\u00036\u00036\u00036\u00037\u00037\u0003",
    "7\u00038\u00038\u00038\u00038\u00058\u025e\n8\u00039\u00039\u00039\u0003",
    "9\u0003:\u0003:\u0003:\u0003:\u0003:\u0005:\u0269\n:\u0007:\u026b\n",
    ":\f:\u000e:\u026e\u000b:\u0003:\u0003:\u0003;\u0003;\u0003;\u0003;\u0003",
    ";\u0005;\u0277\n;\u0007;\u0279\n;\f;\u000e;\u027c\u000b;\u0003;\u0003",
    ";\u0003<\u0003<\u0003<\u0003<\u0003<\u0005<\u0285\n<\u0007<\u0287\n",
    "<\f<\u000e<\u028a\u000b<\u0003<\u0003<\u0003=\u0003=\u0003=\u0003=\u0003",
    "=\u0003=\u0003=\u0003=\u0003=\u0003=\u0007=\u0298\n=\f=\u000e=\u029b",
    "\u000b=\u0007=\u029d\n=\f=\u000e=\u02a0\u000b=\u0003>\u0003>\u0003>",
    "\u0003>\u0005>\u02a6\n>\u0003>\u0003>\u0003>\u0003>\u0005>\u02ac\n>",
    "\u0003?\u0003?\u0003?\u0003?\u0003?\u0003?\u0006?\u02b4\n?\r?\u000e",
    "?\u02b5\u0003@\u0003@\u0003@\u0003@\u0003@\u0003@\u0003@\u0003@\u0003",
    "@\u0003@\u0003@\u0003@\u0003@\u0003@\u0007@\u02c6\n@\f@\u000e@\u02c9",
    "\u000b@\u0007@\u02cb\n@\f@\u000e@\u02ce\u000b@\u0003A\u0003A\u0003A",
    "\u0003A\u0003A\u0003A\u0003A\u0003A\u0003A\u0003A\u0005A\u02da\nA\u0003",
    "B\u0003B\u0003C\u0003C\u0003C\u0003C\u0003D\u0003D\u0003D\u0003D\u0005",
    "D\u02e6\nD\u0003D\u0003D\u0003D\u0003D\u0003D\u0005D\u02ed\nD\u0003",
    "D\u0003D\u0003E\u0003E\u0003E\u0003E\u0005E\u02f5\nE\u0003E\u0003E\u0003",
    "E\u0003E\u0003E\u0005E\u02fc\nE\u0003E\u0003E\u0003F\u0003F\u0003F\u0003",
    "F\u0005F\u0304\nF\u0003F\u0003F\u0003F\u0003F\u0003F\u0005F\u030b\n",
    "F\u0003F\u0003F\u0003G\u0003G\u0003G\u0003G\u0005G\u0313\nG\u0003G\u0003",
    "G\u0003G\u0003G\u0003G\u0005G\u031a\nG\u0003G\u0003G\u0003H\u0003H\u0003",
    "H\u0003H\u0003H\u0003H\u0003H\u0003H\u0003H\u0003H\u0003I\u0003I\u0003",
    "I\u0003I\u0003I\u0003I\u0003J\u0003J\u0003J\u0005J\u0331\nJ\u0003K\u0003",
    "K\u0003K\u0003L\u0003L\u0003L\u0003L\u0003M\u0003M\u0003M\u0003M\u0007",
    "M\u033e\nM\fM\u000eM\u0341\u000bM\u0005M\u0343\nM\u0003M\u0003M\u0003",
    "N\u0003N\u0003N\u0003N\u0003N\u0003N\u0003O\u0003O\u0003O\u0003O\u0003",
    "O\u0003O\u0003O\u0003O\u0003O\u0003O\u0003P\u0003P\u0003P\u0003P\u0003",
    "P\u0003P\u0003Q\u0003Q\u0003Q\u0003Q\u0003Q\u0003Q\u0003Q\u0003Q\u0003",
    "Q\u0003Q\u0005Q\u0367\nQ\u0003R\u0003R\u0003R\u0003R\u0003R\u0003R\u0003",
    "S\u0003S\u0003S\u0003S\u0003S\u0003S\u0003S\u0003S\u0003T\u0003T\u0003",
    "T\u0003T\u0003U\u0003U\u0003U\u0003U\u0003V\u0003V\u0003V\u0003V\u0003",
    "V\u0003V\u0003W\u0003W\u0003W\u0003W\u0003W\u0005W\u038a\nW\u0003W\u0003",
    "W\u0003W\u0003X\u0003X\u0003X\u0003X\u0003X\u0003Y\u0003Y\u0003Y\u0003",
    "Y\u0003Y\u0003Y\u0003Y\u0003Y\u0003Z\u0003Z\u0007Z\u039e\nZ\fZ\u000e",
    "Z\u03a1\u000bZ\u0003Z\u0003Z\u0005Z\u03a5\nZ\u0007Z\u03a7\nZ\fZ\u000e",
    "Z\u03aa\u000bZ\u0003Z\u0007Z\u03ad\nZ\fZ\u000eZ\u03b0\u000bZ\u0003Z",
    "\u0003Z\u0003[\u0003[\u0003[\u0003[\u0003[\u0003[\u0005[\u03ba\n[\u0003",
    "\\\u0003\\\u0003]\u0003]\u0003^\u0003^\u0003_\u0003_\u0003`\u0003`\u0003",
    "a\u0003a\u0003b\u0003b\u0003b\u0003b\u0005b\u03cc\nb\u0003c\u0003c\u0003",
    "d\u0003d\u0003e\u0003e\u0003f\u0003f\u0003g\u0003g\u0003g\u0003g\u0003",
    "g\u0005g\u03db\ng\u0003h\u0003h\u0003i\u0003i\u0003j\u0003j\u0003k\u0003",
    "k\u0003l\u0003l\u0003m\u0003m\u0003m\u0003m\u0003m\u0003m\u0003m\u0005",
    "m\u03ee\nm\u0003n\u0003n\u0003o\u0003o\u0003o\u0003o\u0005o\u03f6\n",
    "o\u0003p\u0003p\u0003p\u0003p\u0005p\u03fc\np\u0003q\u0003q\u0003q\u0003",
    "q\u0005q\u0402\nq\u0003r\u0003r\u0003r\u0003r\u0005r\u0408\nr\u0003",
    "s\u0003s\u0003s\u0003s\u0005s\u040e\ns\u0003t\u0003t\u0003t\u0003t\u0005",
    "t\u0414\nt\u0003u\u0003u\u0003u\u0003u\u0005u\u041a\nu\u0003v\u0003",
    "v\u0003v\u0003v\u0003v\u0003v\u0003v\u0003v\u0005v\u0424\nv\u0003w\u0003",
    "w\u0003x\u0003x\u0003y\u0003y\u0003z\u0003z\u0003{\u0003{\u0003|\u0003",
    "|\u0003}\u0003}\u0003~\u0003~\u0003~\u0002\u0002\u007f\u0002\u0004\u0006",
    "\b\n\f\u000e\u0010\u0012\u0014\u0016\u0018\u001a\u001c\u001e \"$&(*",
    ",.02468:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086",
    "\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098\u009a\u009c\u009e",
    "\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6",
    "\u00b8\u00ba\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc\u00ce",
    "\u00d0\u00d2\u00d4\u00d6\u00d8\u00da\u00dc\u00de\u00e0\u00e2\u00e4\u00e6",
    "\u00e8\u00ea\u00ec\u00ee\u00f0\u00f2\u00f4\u00f6\u00f8\u00fa\u0002#",
    "\u0003\u0002\u0003\u0004\u0003\u0002\r\u000f\u0004\u0002\u0013\u0013",
    "\u0082\u0082\u0004\u0002\u0014\u0014\u0081\u0081\u0003\u0002\u001d\u001e",
    "\u0003\u0002\u001f \u0003\u0002\"#\u0004\u0002-.}}\u0004\u000267\u0080",
    "\u0080\u0004\u0002  @A\u0003\u0002BD\u0003\u0002EG\u0003\u0002HJ\u0003",
    "\u0002KM\u0003\u0002NO\u0003\u0002PQ\u0003\u0002RS\u0003\u0002TU\u0003",
    "\u0002VW\u0004\u0002  XX\u0003\u0002YZ\u0003\u0002[\\\u0003\u0002]^",
    "\u0003\u0002_`\u0004\u0002aa\u007f\u007f\u0003\u0002kl\u0004\u0002C",
    "Cmm\u0003\u0002no\u0003\u0002pq\u0003\u0002rs\u0003\u0002tu\u0004\u0002",
    "!!vv\u0003\u0002wx\u0002\u0441\u0002\u00fc\u0003\u0002\u0002\u0002\u0004",
    "\u00fe\u0003\u0002\u0002\u0002\u0006\u0105\u0003\u0002\u0002\u0002\b",
    "\u0118\u0003\u0002\u0002\u0002\n\u012d\u0003\u0002\u0002\u0002\f\u012f",
    "\u0003\u0002\u0002\u0002\u000e\u0133\u0003\u0002\u0002\u0002\u0010\u0137",
    "\u0003\u0002\u0002\u0002\u0012\u013b\u0003\u0002\u0002\u0002\u0014\u013f",
    "\u0003\u0002\u0002\u0002\u0016\u0148\u0003\u0002\u0002\u0002\u0018\u0151",
    "\u0003\u0002\u0002\u0002\u001a\u0153\u0003\u0002\u0002\u0002\u001c\u0165",
    "\u0003\u0002\u0002\u0002\u001e\u0167\u0003\u0002\u0002\u0002 \u0170",
    "\u0003\u0002\u0002\u0002\"\u0172\u0003\u0002\u0002\u0002$\u0174\u0003",
    "\u0002\u0002\u0002&\u0176\u0003\u0002\u0002\u0002(\u0178\u0003\u0002",
    "\u0002\u0002*\u017e\u0003\u0002\u0002\u0002,\u0180\u0003\u0002\u0002",
    "\u0002.\u0182\u0003\u0002\u0002\u00020\u0186\u0003\u0002\u0002\u0002",
    "2\u018a\u0003\u0002\u0002\u00024\u018c\u0003\u0002\u0002\u00026\u018e",
    "\u0003\u0002\u0002\u00028\u0190\u0003\u0002\u0002\u0002:\u0192\u0003",
    "\u0002\u0002\u0002<\u0196\u0003\u0002\u0002\u0002>\u0198\u0003\u0002",
    "\u0002\u0002@\u019c\u0003\u0002\u0002\u0002B\u01a2\u0003\u0002\u0002",
    "\u0002D\u01b1\u0003\u0002\u0002\u0002F\u01b3\u0003\u0002\u0002\u0002",
    "H\u01bc\u0003\u0002\u0002\u0002J\u01c0\u0003\u0002\u0002\u0002L\u01cf",
    "\u0003\u0002\u0002\u0002N\u01d1\u0003\u0002\u0002\u0002P\u01d5\u0003",
    "\u0002\u0002\u0002R\u01d7\u0003\u0002\u0002\u0002T\u01e7\u0003\u0002",
    "\u0002\u0002V\u01f6\u0003\u0002\u0002\u0002X\u0205\u0003\u0002\u0002",
    "\u0002Z\u0207\u0003\u0002\u0002\u0002\\\u020b\u0003\u0002\u0002\u0002",
    "^\u020d\u0003\u0002\u0002\u0002`\u021d\u0003\u0002\u0002\u0002b\u022c",
    "\u0003\u0002\u0002\u0002d\u0239\u0003\u0002\u0002\u0002f\u023f\u0003",
    "\u0002\u0002\u0002h\u024e\u0003\u0002\u0002\u0002j\u0253\u0003\u0002",
    "\u0002\u0002l\u0256\u0003\u0002\u0002\u0002n\u025d\u0003\u0002\u0002",
    "\u0002p\u025f\u0003\u0002\u0002\u0002r\u0263\u0003\u0002\u0002\u0002",
    "t\u0271\u0003\u0002\u0002\u0002v\u027f\u0003\u0002\u0002\u0002x\u028d",
    "\u0003\u0002\u0002\u0002z\u02a5\u0003\u0002\u0002\u0002|\u02ad\u0003",
    "\u0002\u0002\u0002~\u02b7\u0003\u0002\u0002\u0002\u0080\u02d9\u0003",
    "\u0002\u0002\u0002\u0082\u02db\u0003\u0002\u0002\u0002\u0084\u02dd\u0003",
    "\u0002\u0002\u0002\u0086\u02e1\u0003\u0002\u0002\u0002\u0088\u02f0\u0003",
    "\u0002\u0002\u0002\u008a\u02ff\u0003\u0002\u0002\u0002\u008c\u030e\u0003",
    "\u0002\u0002\u0002\u008e\u031d\u0003\u0002\u0002\u0002\u0090\u0327\u0003",
    "\u0002\u0002\u0002\u0092\u0330\u0003\u0002\u0002\u0002\u0094\u0332\u0003",
    "\u0002\u0002\u0002\u0096\u0335\u0003\u0002\u0002\u0002\u0098\u0339\u0003",
    "\u0002\u0002\u0002\u009a\u0346\u0003\u0002\u0002\u0002\u009c\u034c\u0003",
    "\u0002\u0002\u0002\u009e\u0356\u0003\u0002\u0002\u0002\u00a0\u035c\u0003",
    "\u0002\u0002\u0002\u00a2\u0368\u0003\u0002\u0002\u0002\u00a4\u036e\u0003",
    "\u0002\u0002\u0002\u00a6\u0376\u0003\u0002\u0002\u0002\u00a8\u037a\u0003",
    "\u0002\u0002\u0002\u00aa\u037e\u0003\u0002\u0002\u0002\u00ac\u0384\u0003",
    "\u0002\u0002\u0002\u00ae\u038e\u0003\u0002\u0002\u0002\u00b0\u0393\u0003",
    "\u0002\u0002\u0002\u00b2\u039b\u0003\u0002\u0002\u0002\u00b4\u03b9\u0003",
    "\u0002\u0002\u0002\u00b6\u03bb\u0003\u0002\u0002\u0002\u00b8\u03bd\u0003",
    "\u0002\u0002\u0002\u00ba\u03bf\u0003\u0002\u0002\u0002\u00bc\u03c1\u0003",
    "\u0002\u0002\u0002\u00be\u03c3\u0003\u0002\u0002\u0002\u00c0\u03c5\u0003",
    "\u0002\u0002\u0002\u00c2\u03cb\u0003\u0002\u0002\u0002\u00c4\u03cd\u0003",
    "\u0002\u0002\u0002\u00c6\u03cf\u0003\u0002\u0002\u0002\u00c8\u03d1\u0003",
    "\u0002\u0002\u0002\u00ca\u03d3\u0003\u0002\u0002\u0002\u00cc\u03da\u0003",
    "\u0002\u0002\u0002\u00ce\u03dc\u0003\u0002\u0002\u0002\u00d0\u03de\u0003",
    "\u0002\u0002\u0002\u00d2\u03e0\u0003\u0002\u0002\u0002\u00d4\u03e2\u0003",
    "\u0002\u0002\u0002\u00d6\u03e4\u0003\u0002\u0002\u0002\u00d8\u03ed\u0003",
    "\u0002\u0002\u0002\u00da\u03ef\u0003\u0002\u0002\u0002\u00dc\u03f5\u0003",
    "\u0002\u0002\u0002\u00de\u03fb\u0003\u0002\u0002\u0002\u00e0\u0401\u0003",
    "\u0002\u0002\u0002\u00e2\u0407\u0003\u0002\u0002\u0002\u00e4\u040d\u0003",
    "\u0002\u0002\u0002\u00e6\u0413\u0003\u0002\u0002\u0002\u00e8\u0419\u0003",
    "\u0002\u0002\u0002\u00ea\u0423\u0003\u0002\u0002\u0002\u00ec\u0425\u0003",
    "\u0002\u0002\u0002\u00ee\u0427\u0003\u0002\u0002\u0002\u00f0\u0429\u0003",
    "\u0002\u0002\u0002\u00f2\u042b\u0003\u0002\u0002\u0002\u00f4\u042d\u0003",
    "\u0002\u0002\u0002\u00f6\u042f\u0003\u0002\u0002\u0002\u00f8\u0431\u0003",
    "\u0002\u0002\u0002\u00fa\u0433\u0003\u0002\u0002\u0002\u00fc\u00fd\t",
    "\u0002\u0002\u0002\u00fd\u0003\u0003\u0002\u0002\u0002\u00fe\u00ff\u0005",
    "\u0006\u0004\u0002\u00ff\u0100\u0005x=\u0002\u0100\u0101\u0005|?\u0002",
    "\u0101\u0103\u0003\u0002\u0002\u0002\u0102\u0104\u0007\u0002\u0002\u0003",
    "\u0103\u0102\u0003\u0002\u0002\u0002\u0103\u0104\u0003\u0002\u0002\u0002",
    "\u0104\u0005\u0003\u0002\u0002\u0002\u0105\u0106\u0007\u0005\u0002\u0002",
    "\u0106\u010a\u0007z\u0002\u0002\u0107\u0108\u0005\b\u0005\u0002\u0108",
    "\u0109\u0007z\u0002\u0002\u0109\u010b\u0003\u0002\u0002\u0002\u010a",
    "\u0107\u0003\u0002\u0002\u0002\u010a\u010b\u0003\u0002\u0002\u0002\u010b",
    "\u010f\u0003\u0002\u0002\u0002\u010c\u010d\u0005\u001a\u000e\u0002\u010d",
    "\u010e\u0007z\u0002\u0002\u010e\u0110\u0003\u0002\u0002\u0002\u010f",
    "\u010c\u0003\u0002\u0002\u0002\u010f\u0110\u0003\u0002\u0002\u0002\u0110",
    "\u0114\u0003\u0002\u0002\u0002\u0111\u0112\u0005f4\u0002\u0112\u0113",
    "\u0007z\u0002\u0002\u0113\u0115\u0003\u0002\u0002\u0002\u0114\u0111",
    "\u0003\u0002\u0002\u0002\u0115\u0116\u0003\u0002\u0002\u0002\u0116\u0114",
    "\u0003\u0002\u0002\u0002\u0116\u0117\u0003\u0002\u0002\u0002\u0117\u0007",
    "\u0003\u0002\u0002\u0002\u0118\u0119\u0007{\u0002\u0002\u0119\u011a",
    "\u0007\u0006\u0002\u0002\u011a\u0122\u0007z\u0002\u0002\u011b\u011c",
    "\u0007{\u0002\u0002\u011c\u011d\u0007{\u0002\u0002\u011d\u011e\u0005",
    "\n\u0006\u0002\u011e\u011f\u0007z\u0002\u0002\u011f\u0121\u0003\u0002",
    "\u0002\u0002\u0120\u011b\u0003\u0002\u0002\u0002\u0121\u0124\u0003\u0002",
    "\u0002\u0002\u0122\u0120\u0003\u0002\u0002\u0002\u0122\u0123\u0003\u0002",
    "\u0002\u0002\u0123\t\u0003\u0002\u0002\u0002\u0124\u0122\u0003\u0002",
    "\u0002\u0002\u0125\u012e\u0005\f\u0007\u0002\u0126\u012e\u0005\u000e",
    "\b\u0002\u0127\u012e\u0005\u0010\t\u0002\u0128\u012e\u0005\u0012\n\u0002",
    "\u0129\u012e\u0005\u0016\f\u0002\u012a\u012e\u0005\u001a\u000e\u0002",
    "\u012b\u012e\u0005\u0014\u000b\u0002\u012c\u012e\u0005\u0018\r\u0002",
    "\u012d\u0125\u0003\u0002\u0002\u0002\u012d\u0126\u0003\u0002\u0002\u0002",
    "\u012d\u0127\u0003\u0002\u0002\u0002\u012d\u0128\u0003\u0002\u0002\u0002",
    "\u012d\u0129\u0003\u0002\u0002\u0002\u012d\u012a\u0003\u0002\u0002\u0002",
    "\u012d\u012b\u0003\u0002\u0002\u0002\u012d\u012c\u0003\u0002\u0002\u0002",
    "\u012e\u000b\u0003\u0002\u0002\u0002\u012f\u0130\u0007\u0007\u0002\u0002",
    "\u0130\u0131\u0007|\u0002\u0002\u0131\u0132\u0007y\u0002\u0002\u0132",
    "\r\u0003\u0002\u0002\u0002\u0133\u0134\u0007\b\u0002\u0002\u0134\u0135",
    "\u0007|\u0002\u0002\u0135\u0136\u0007y\u0002\u0002\u0136\u000f\u0003",
    "\u0002\u0002\u0002\u0137\u0138\u0007\t\u0002\u0002\u0138\u0139\u0007",
    "|\u0002\u0002\u0139\u013a\u0007y\u0002\u0002\u013a\u0011\u0003\u0002",
    "\u0002\u0002\u013b\u013c\u0007\n\u0002\u0002\u013c\u013d\u0007|\u0002",
    "\u0002\u013d\u013e\u0007y\u0002\u0002\u013e\u0013\u0003\u0002\u0002",
    "\u0002\u013f\u0142\u0007\u000b\u0002\u0002\u0140\u0141\u0007|\u0002",
    "\u0002\u0141\u0143\u0005\u0002\u0002\u0002\u0142\u0140\u0003\u0002\u0002",
    "\u0002\u0142\u0143\u0003\u0002\u0002\u0002\u0143\u0146\u0003\u0002\u0002",
    "\u0002\u0144\u0145\u0007|\u0002\u0002\u0145\u0147\u0005 \u0011\u0002",
    "\u0146\u0144\u0003\u0002\u0002\u0002\u0146\u0147\u0003\u0002\u0002\u0002",
    "\u0147\u0015\u0003\u0002\u0002\u0002\u0148\u014b\u0007\f\u0002\u0002",
    "\u0149\u014a\u0007|\u0002\u0002\u014a\u014c\u0005\u0002\u0002\u0002",
    "\u014b\u0149\u0003\u0002\u0002\u0002\u014b\u014c\u0003\u0002\u0002\u0002",
    "\u014c\u014f\u0003\u0002\u0002\u0002\u014d\u014e\u0007|\u0002\u0002",
    "\u014e\u0150\u0005 \u0011\u0002\u014f\u014d\u0003\u0002\u0002\u0002",
    "\u014f\u0150\u0003\u0002\u0002\u0002\u0150\u0017\u0003\u0002\u0002\u0002",
    "\u0151\u0152\t\u0003\u0002\u0002\u0152\u0019\u0003\u0002\u0002\u0002",
    "\u0153\u0154\u0007{\u0002\u0002\u0154\u0155\u0007\u0010\u0002\u0002",
    "\u0155\u015d\u0007z\u0002\u0002\u0156\u0157\u0007{\u0002\u0002\u0157",
    "\u0158\u0007{\u0002\u0002\u0158\u0159\u0005\u001c\u000f\u0002\u0159",
    "\u015a\u0007z\u0002\u0002\u015a\u015c\u0003\u0002\u0002\u0002\u015b",
    "\u0156\u0003\u0002\u0002\u0002\u015c\u015f\u0003\u0002\u0002\u0002\u015d",
    "\u015b\u0003\u0002\u0002\u0002\u015d\u015e\u0003\u0002\u0002\u0002\u015e",
    "\u001b\u0003\u0002\u0002\u0002\u015f\u015d\u0003\u0002\u0002\u0002\u0160",
    "\u0166\u0005\u001e\u0010\u0002\u0161\u0166\u0005B\"\u0002\u0162\u0166",
    "\u0005J&\u0002\u0163\u0166\u0005V,\u0002\u0164\u0166\u0005b2\u0002\u0165",
    "\u0160\u0003\u0002\u0002\u0002\u0165\u0161\u0003\u0002\u0002\u0002\u0165",
    "\u0162\u0003\u0002\u0002\u0002\u0165\u0163\u0003\u0002\u0002\u0002\u0165",
    "\u0164\u0003\u0002\u0002\u0002\u0166\u001d\u0003\u0002\u0002\u0002\u0167",
    "\u0168\u0007\u0011\u0002\u0002\u0168\u0169\u0007|\u0002\u0002\u0169",
    "\u016a\u00052\u001a\u0002\u016a\u016b\u0007|\u0002\u0002\u016b\u016c",
    "\u0005<\u001f\u0002\u016c\u001f\u0003\u0002\u0002\u0002\u016d\u0171",
    "\u0005(\u0015\u0002\u016e\u0171\u0005.\u0018\u0002\u016f\u0171\u0005",
    "0\u0019\u0002\u0170\u016d\u0003\u0002\u0002\u0002\u0170\u016e\u0003",
    "\u0002\u0002\u0002\u0170\u016f\u0003\u0002\u0002\u0002\u0171!\u0003",
    "\u0002\u0002\u0002\u0172\u0173\u0007y\u0002\u0002\u0173#\u0003\u0002",
    "\u0002\u0002\u0174\u0175\u0007y\u0002\u0002\u0175%\u0003\u0002\u0002",
    "\u0002\u0176\u0177\u0007y\u0002\u0002\u0177\'\u0003\u0002\u0002\u0002",
    "\u0178\u0179\u0005\"\u0012\u0002\u0179\u017a\u0007\u0012\u0002\u0002",
    "\u017a\u017b\u0005$\u0013\u0002\u017b\u017c\u0007\u0012\u0002\u0002",
    "\u017c\u017d\u0005&\u0014\u0002\u017d)\u0003\u0002\u0002\u0002\u017e",
    "\u017f\u0007y\u0002\u0002\u017f+\u0003\u0002\u0002\u0002\u0180\u0181",
    "\u0007y\u0002\u0002\u0181-\u0003\u0002\u0002\u0002\u0182\u0183\u0005",
    "*\u0016\u0002\u0183\u0184\u0007\u0012\u0002\u0002\u0184\u0185\u0005",
    ",\u0017\u0002\u0185/\u0003\u0002\u0002\u0002\u0186\u0187\u0007y\u0002",
    "\u0002\u01871\u0003\u0002\u0002\u0002\u0188\u018b\u00054\u001b\u0002",
    "\u0189\u018b\u00056\u001c\u0002\u018a\u0188\u0003\u0002\u0002\u0002",
    "\u018a\u0189\u0003\u0002\u0002\u0002\u018b3\u0003\u0002\u0002\u0002",
    "\u018c\u018d\t\u0004\u0002\u0002\u018d5\u0003\u0002\u0002\u0002\u018e",
    "\u018f\t\u0005\u0002\u0002\u018f7\u0003\u0002\u0002\u0002\u0190\u0191",
    "\u0007\u0015\u0002\u0002\u01919\u0003\u0002\u0002\u0002\u0192\u0193",
    "\u0007\u0016\u0002\u0002\u0193;\u0003\u0002\u0002\u0002\u0194\u0197",
    "\u00058\u001d\u0002\u0195\u0197\u0005:\u001e\u0002\u0196\u0194\u0003",
    "\u0002\u0002\u0002\u0196\u0195\u0003\u0002\u0002\u0002\u0197=\u0003",
    "\u0002\u0002\u0002\u0198\u0199\u0005 \u0011\u0002\u0199\u019a\u0007",
    "\u0017\u0002\u0002\u019a\u019b\u0005 \u0011\u0002\u019b?\u0003\u0002",
    "\u0002\u0002\u019c\u019d\u0005 \u0011\u0002\u019d\u019e\u0007\u0083",
    "\u0002\u0002\u019e\u019f\u0005 \u0011\u0002\u019f\u01a0\u0007\u0083",
    "\u0002\u0002\u01a0\u01a1\u0005 \u0011\u0002\u01a1A\u0003\u0002\u0002",
    "\u0002\u01a2\u01a3\u0007\u0018\u0002\u0002\u01a3\u01ac\u0007z\u0002",
    "\u0002\u01a4\u01a5\u0007{\u0002\u0002\u01a5\u01a6\u0007{\u0002\u0002",
    "\u01a6\u01a7\u0007{\u0002\u0002\u01a7\u01a8\u0005D#\u0002\u01a8\u01a9",
    "\u0007z\u0002\u0002\u01a9\u01ab\u0003\u0002\u0002\u0002\u01aa\u01a4",
    "\u0003\u0002\u0002\u0002\u01ab\u01ae\u0003\u0002\u0002\u0002\u01ac\u01aa",
    "\u0003\u0002\u0002\u0002\u01ac\u01ad\u0003\u0002\u0002\u0002\u01adC",
    "\u0003\u0002\u0002\u0002\u01ae\u01ac\u0003\u0002\u0002\u0002\u01af\u01b2",
    "\u0005F$\u0002\u01b0\u01b2\u0005H%\u0002\u01b1\u01af\u0003\u0002\u0002",
    "\u0002\u01b1\u01b0\u0003\u0002\u0002\u0002\u01b2E\u0003\u0002\u0002",
    "\u0002\u01b3\u01b6\u0005\u00eav\u0002\u01b4\u01b5\u0007|\u0002\u0002",
    "\u01b5\u01b7\u0005\u00eav\u0002\u01b6\u01b4\u0003\u0002\u0002\u0002",
    "\u01b7\u01b8\u0003\u0002\u0002\u0002\u01b8\u01b6\u0003\u0002\u0002\u0002",
    "\u01b8\u01b9\u0003\u0002\u0002\u0002\u01b9G\u0003\u0002\u0002\u0002",
    "\u01ba\u01bb\u0007|\u0002\u0002\u01bb\u01bd\u0005\u00eav\u0002\u01bc",
    "\u01ba\u0003\u0002\u0002\u0002\u01bd\u01be\u0003\u0002\u0002\u0002\u01be",
    "\u01bc\u0003\u0002\u0002\u0002\u01be\u01bf\u0003\u0002\u0002\u0002\u01bf",
    "I\u0003\u0002\u0002\u0002\u01c0\u01c1\u0007\u0019\u0002\u0002\u01c1",
    "\u01ca\u0007z\u0002\u0002\u01c2\u01c3\u0007{\u0002\u0002\u01c3\u01c4",
    "\u0007{\u0002\u0002\u01c4\u01c5\u0007{\u0002\u0002\u01c5\u01c6\u0005",
    "L\'\u0002\u01c6\u01c7\u0007z\u0002\u0002\u01c7\u01c9\u0003\u0002\u0002",
    "\u0002\u01c8\u01c2\u0003\u0002\u0002\u0002\u01c9\u01cc\u0003\u0002\u0002",
    "\u0002\u01ca\u01c8\u0003\u0002\u0002\u0002\u01ca\u01cb\u0003\u0002\u0002",
    "\u0002\u01cbK\u0003\u0002\u0002\u0002\u01cc\u01ca\u0003\u0002\u0002",
    "\u0002\u01cd\u01d0\u0005R*\u0002\u01ce\u01d0\u0005T+\u0002\u01cf\u01cd",
    "\u0003\u0002\u0002\u0002\u01cf\u01ce\u0003\u0002\u0002\u0002\u01d0M",
    "\u0003\u0002\u0002\u0002\u01d1\u01d2\u0007\u001a\u0002\u0002\u01d2O",
    "\u0003\u0002\u0002\u0002\u01d3\u01d6\u0007y\u0002\u0002\u01d4\u01d6",
    "\u0005N(\u0002\u01d5\u01d3\u0003\u0002\u0002\u0002\u01d5\u01d4\u0003",
    "\u0002\u0002\u0002\u01d6Q\u0003\u0002\u0002\u0002\u01d7\u01d8\u0007",
    "|\u0002\u0002\u01d8\u01e3\u0007|\u0002\u0002\u01d9\u01db\u0005P)\u0002",
    "\u01da\u01dc\u0007|\u0002\u0002\u01db\u01da\u0003\u0002\u0002\u0002",
    "\u01db\u01dc\u0003\u0002\u0002\u0002\u01dc\u01de\u0003\u0002\u0002\u0002",
    "\u01dd\u01df\u0007|\u0002\u0002\u01de\u01dd\u0003\u0002\u0002\u0002",
    "\u01de\u01df\u0003\u0002\u0002\u0002\u01df\u01e1\u0003\u0002\u0002\u0002",
    "\u01e0\u01e2\u0007|\u0002\u0002\u01e1\u01e0\u0003\u0002\u0002\u0002",
    "\u01e1\u01e2\u0003\u0002\u0002\u0002\u01e2\u01e4\u0003\u0002\u0002\u0002",
    "\u01e3\u01d9\u0003\u0002\u0002\u0002\u01e4\u01e5\u0003\u0002\u0002\u0002",
    "\u01e5\u01e3\u0003\u0002\u0002\u0002\u01e5\u01e6\u0003\u0002\u0002\u0002",
    "\u01e6S\u0003\u0002\u0002\u0002\u01e7\u01f2\u0005P)\u0002\u01e8\u01ea",
    "\u0007|\u0002\u0002\u01e9\u01e8\u0003\u0002\u0002\u0002\u01e9\u01ea",
    "\u0003\u0002\u0002\u0002\u01ea\u01ec\u0003\u0002\u0002\u0002\u01eb\u01ed",
    "\u0007|\u0002\u0002\u01ec\u01eb\u0003\u0002\u0002\u0002\u01ec\u01ed",
    "\u0003\u0002\u0002\u0002\u01ed\u01ef\u0003\u0002\u0002\u0002\u01ee\u01f0",
    "\u0007|\u0002\u0002\u01ef\u01ee\u0003\u0002\u0002\u0002\u01ef\u01f0",
    "\u0003\u0002\u0002\u0002\u01f0\u01f1\u0003\u0002\u0002\u0002\u01f1\u01f3",
    "\u0005P)\u0002\u01f2\u01e9\u0003\u0002\u0002\u0002\u01f3\u01f4\u0003",
    "\u0002\u0002\u0002\u01f4\u01f2\u0003\u0002\u0002\u0002\u01f4\u01f5\u0003",
    "\u0002\u0002\u0002\u01f5U\u0003\u0002\u0002\u0002\u01f6\u01f7\u0007",
    "\u001b\u0002\u0002\u01f7\u0200\u0007z\u0002\u0002\u01f8\u01f9\u0007",
    "{\u0002\u0002\u01f9\u01fa\u0007{\u0002\u0002\u01fa\u01fb\u0007{\u0002",
    "\u0002\u01fb\u01fc\u0005X-\u0002\u01fc\u01fd\u0007z\u0002\u0002\u01fd",
    "\u01ff\u0003\u0002\u0002\u0002\u01fe\u01f8\u0003\u0002\u0002\u0002\u01ff",
    "\u0202\u0003\u0002\u0002\u0002\u0200\u01fe\u0003\u0002\u0002\u0002\u0200",
    "\u0201\u0003\u0002\u0002\u0002\u0201W\u0003\u0002\u0002\u0002\u0202",
    "\u0200\u0003\u0002\u0002\u0002\u0203\u0206\u0005^0\u0002\u0204\u0206",
    "\u0005`1\u0002\u0205\u0203\u0003\u0002\u0002\u0002\u0205\u0204\u0003",
    "\u0002\u0002\u0002\u0206Y\u0003\u0002\u0002\u0002\u0207\u0208\u0007",
    "\u001a\u0002\u0002\u0208[\u0003\u0002\u0002\u0002\u0209\u020c\u0007",
    "y\u0002\u0002\u020a\u020c\u0005Z.\u0002\u020b\u0209\u0003\u0002\u0002",
    "\u0002\u020b\u020a\u0003\u0002\u0002\u0002\u020c]\u0003\u0002\u0002",
    "\u0002\u020d\u020e\u0007|\u0002\u0002\u020e\u0219\u0007|\u0002\u0002",
    "\u020f\u0211\u0005\\/\u0002\u0210\u0212\u0007|\u0002\u0002\u0211\u0210",
    "\u0003\u0002\u0002\u0002\u0211\u0212\u0003\u0002\u0002\u0002\u0212\u0214",
    "\u0003\u0002\u0002\u0002\u0213\u0215\u0007|\u0002\u0002\u0214\u0213",
    "\u0003\u0002\u0002\u0002\u0214\u0215\u0003\u0002\u0002\u0002\u0215\u0217",
    "\u0003\u0002\u0002\u0002\u0216\u0218\u0007|\u0002\u0002\u0217\u0216",
    "\u0003\u0002\u0002\u0002\u0217\u0218\u0003\u0002\u0002\u0002\u0218\u021a",
    "\u0003\u0002\u0002\u0002\u0219\u020f\u0003\u0002\u0002\u0002\u021a\u021b",
    "\u0003\u0002\u0002\u0002\u021b\u0219\u0003\u0002\u0002\u0002\u021b\u021c",
    "\u0003\u0002\u0002\u0002\u021c_\u0003\u0002\u0002\u0002\u021d\u0228",
    "\u0005\\/\u0002\u021e\u0220\u0007|\u0002\u0002\u021f\u021e\u0003\u0002",
    "\u0002\u0002\u021f\u0220\u0003\u0002\u0002\u0002\u0220\u0222\u0003\u0002",
    "\u0002\u0002\u0221\u0223\u0007|\u0002\u0002\u0222\u0221\u0003\u0002",
    "\u0002\u0002\u0222\u0223\u0003\u0002\u0002\u0002\u0223\u0225\u0003\u0002",
    "\u0002\u0002\u0224\u0226\u0007|\u0002\u0002\u0225\u0224\u0003\u0002",
    "\u0002\u0002\u0225\u0226\u0003\u0002\u0002\u0002\u0226\u0227\u0003\u0002",
    "\u0002\u0002\u0227\u0229\u0005\\/\u0002\u0228\u021f\u0003\u0002\u0002",
    "\u0002\u0229\u022a\u0003\u0002\u0002\u0002\u022a\u0228\u0003\u0002\u0002",
    "\u0002\u022a\u022b\u0003\u0002\u0002\u0002\u022ba\u0003\u0002\u0002",
    "\u0002\u022c\u022d\u0007\u001c\u0002\u0002\u022d\u0236\u0007z\u0002",
    "\u0002\u022e\u022f\u0007{\u0002\u0002\u022f\u0230\u0007{\u0002\u0002",
    "\u0230\u0231\u0007{\u0002\u0002\u0231\u0232\u0005d3\u0002\u0232\u0233",
    "\u0007z\u0002\u0002\u0233\u0235\u0003\u0002\u0002\u0002\u0234\u022e",
    "\u0003\u0002\u0002\u0002\u0235\u0238\u0003\u0002\u0002\u0002\u0236\u0234",
    "\u0003\u0002\u0002\u0002\u0236\u0237\u0003\u0002\u0002\u0002\u0237c",
    "\u0003\u0002\u0002\u0002\u0238\u0236\u0003\u0002\u0002\u0002\u0239\u023a",
    "\u0005\u00d8m\u0002\u023a\u023b\u0007|\u0002\u0002\u023b\u023c\u0005",
    "\u0002\u0002\u0002\u023c\u023d\u0007|\u0002\u0002\u023d\u023e\u0005",
    "> \u0002\u023ee\u0003\u0002\u0002\u0002\u023f\u0240\u0007{\u0002\u0002",
    "\u0240\u0241\u0005h5\u0002\u0241\u0249\u0007z\u0002\u0002\u0242\u0243",
    "\u0007{\u0002\u0002\u0243\u0244\u0007{\u0002\u0002\u0244\u0245\u0005",
    "n8\u0002\u0245\u0246\u0007z\u0002\u0002\u0246\u0248\u0003\u0002\u0002",
    "\u0002\u0247\u0242\u0003\u0002\u0002\u0002\u0248\u024b\u0003\u0002\u0002",
    "\u0002\u0249\u0247\u0003\u0002\u0002\u0002\u0249\u024a\u0003\u0002\u0002",
    "\u0002\u024ag\u0003\u0002\u0002\u0002\u024b\u0249\u0003\u0002\u0002",
    "\u0002\u024c\u024f\u0005j6\u0002\u024d\u024f\u0005l7\u0002\u024e\u024c",
    "\u0003\u0002\u0002\u0002\u024e\u024d\u0003\u0002\u0002\u0002\u024e\u024f",
    "\u0003\u0002\u0002\u0002\u024f\u0250\u0003\u0002\u0002\u0002\u0250\u0251",
    "\t\u0006\u0002\u0002\u0251\u0252\u0007y\u0002\u0002\u0252i\u0003\u0002",
    "\u0002\u0002\u0253\u0254\t\u0007\u0002\u0002\u0254\u0255\u0007!\u0002",
    "\u0002\u0255k\u0003\u0002\u0002\u0002\u0256\u0257\t\b\u0002\u0002\u0257",
    "\u0258\u0007!\u0002\u0002\u0258m\u0003\u0002\u0002\u0002\u0259\u025e",
    "\u0005p9\u0002\u025a\u025e\u0005r:\u0002\u025b\u025e\u0005t;\u0002\u025c",
    "\u025e\u0005v<\u0002\u025d\u0259\u0003\u0002\u0002\u0002\u025d\u025a",
    "\u0003\u0002\u0002\u0002\u025d\u025b\u0003\u0002\u0002\u0002\u025d\u025c",
    "\u0003\u0002\u0002\u0002\u025eo\u0003\u0002\u0002\u0002\u025f\u0260",
    "\u0007$\u0002\u0002\u0260\u0261\u0007|\u0002\u0002\u0261\u0262\u0005",
    "\u00b2Z\u0002\u0262q\u0003\u0002\u0002\u0002\u0263\u0264\u0007%\u0002",
    "\u0002\u0264\u0265\u0007|\u0002\u0002\u0265\u026c\u0007&\u0002\u0002",
    "\u0266\u0268\u0005\u00c2b\u0002\u0267\u0269\u0007|\u0002\u0002\u0268",
    "\u0267\u0003\u0002\u0002\u0002\u0268\u0269\u0003\u0002\u0002\u0002\u0269",
    "\u026b\u0003\u0002\u0002\u0002\u026a\u0266\u0003\u0002\u0002\u0002\u026b",
    "\u026e\u0003\u0002\u0002\u0002\u026c\u026a\u0003\u0002\u0002\u0002\u026c",
    "\u026d\u0003\u0002\u0002\u0002\u026d\u026f\u0003\u0002\u0002\u0002\u026e",
    "\u026c\u0003\u0002\u0002\u0002\u026f\u0270\u0007\'\u0002\u0002\u0270",
    "s\u0003\u0002\u0002\u0002\u0271\u0272\u0007(\u0002\u0002\u0272\u0273",
    "\u0007|\u0002\u0002\u0273\u027a\u0007&\u0002\u0002\u0274\u0276\u0005",
    "\u00ccg\u0002\u0275\u0277\u0007|\u0002\u0002\u0276\u0275\u0003\u0002",
    "\u0002\u0002\u0276\u0277\u0003\u0002\u0002\u0002\u0277\u0279\u0003\u0002",
    "\u0002\u0002\u0278\u0274\u0003\u0002\u0002\u0002\u0279\u027c\u0003\u0002",
    "\u0002\u0002\u027a\u0278\u0003\u0002\u0002\u0002\u027a\u027b\u0003\u0002",
    "\u0002\u0002\u027b\u027d\u0003\u0002\u0002\u0002\u027c\u027a\u0003\u0002",
    "\u0002\u0002\u027d\u027e\u0007\'\u0002\u0002\u027eu\u0003\u0002\u0002",
    "\u0002\u027f\u0280\u0007\u001c\u0002\u0002\u0280\u0281\u0007|\u0002",
    "\u0002\u0281\u0288\u0007&\u0002\u0002\u0282\u0284\u0005\u00d8m\u0002",
    "\u0283\u0285\u0007|\u0002\u0002\u0284\u0283\u0003\u0002\u0002\u0002",
    "\u0284\u0285\u0003\u0002\u0002\u0002\u0285\u0287\u0003\u0002\u0002\u0002",
    "\u0286\u0282\u0003\u0002\u0002\u0002\u0287\u028a\u0003\u0002\u0002\u0002",
    "\u0288\u0286\u0003\u0002\u0002\u0002\u0288\u0289\u0003\u0002\u0002\u0002",
    "\u0289\u028b\u0003\u0002\u0002\u0002\u028a\u0288\u0003\u0002\u0002\u0002",
    "\u028b\u028c\u0007\'\u0002\u0002\u028cw\u0003\u0002\u0002\u0002\u028d",
    "\u028e\u0007)\u0002\u0002\u028e\u029e\u0007z\u0002\u0002\u028f\u0290",
    "\u0007{\u0002\u0002\u0290\u0291\u0005z>\u0002\u0291\u0292\u0007z\u0002",
    "\u0002\u0292\u0299\u0003\u0002\u0002\u0002\u0293\u0294\u0007{\u0002",
    "\u0002\u0294\u0295\u0005\u00a0Q\u0002\u0295\u0296\u0007z\u0002\u0002",
    "\u0296\u0298\u0003\u0002\u0002\u0002\u0297\u0293\u0003\u0002\u0002\u0002",
    "\u0298\u029b\u0003\u0002\u0002\u0002\u0299\u0297\u0003\u0002\u0002\u0002",
    "\u0299\u029a\u0003\u0002\u0002\u0002\u029a\u029d\u0003\u0002\u0002\u0002",
    "\u029b\u0299\u0003\u0002\u0002\u0002\u029c\u028f\u0003\u0002\u0002\u0002",
    "\u029d\u02a0\u0003\u0002\u0002\u0002\u029e\u029c\u0003\u0002\u0002\u0002",
    "\u029e\u029f\u0003\u0002\u0002\u0002\u029fy\u0003\u0002\u0002\u0002",
    "\u02a0\u029e\u0003\u0002\u0002\u0002\u02a1\u02a6\u0005\u0086D\u0002",
    "\u02a2\u02a6\u0005\u0088E\u0002\u02a3\u02a6\u0005\u008aF\u0002\u02a4",
    "\u02a6\u0005\u008cG\u0002\u02a5\u02a1\u0003\u0002\u0002\u0002\u02a5",
    "\u02a2\u0003\u0002\u0002\u0002\u02a5\u02a3\u0003\u0002\u0002\u0002\u02a5",
    "\u02a4\u0003\u0002\u0002\u0002\u02a6\u02ab\u0003\u0002\u0002\u0002\u02a7",
    "\u02a8\u0007|\u0002\u0002\u02a8\u02a9\u0007*\u0002\u0002\u02a9\u02aa",
    "\u0007|\u0002\u0002\u02aa\u02ac\u0005\u00b2Z\u0002\u02ab\u02a7\u0003",
    "\u0002\u0002\u0002\u02ab\u02ac\u0003\u0002\u0002\u0002\u02ac{\u0003",
    "\u0002\u0002\u0002\u02ad\u02ae\u0007+\u0002\u0002\u02ae\u02b3\u0007",
    "z\u0002\u0002\u02af\u02b0\u0007{\u0002\u0002\u02b0\u02b1\u0005~@\u0002",
    "\u02b1\u02b2\u0007z\u0002\u0002\u02b2\u02b4\u0003\u0002\u0002\u0002",
    "\u02b3\u02af\u0003\u0002\u0002\u0002\u02b4\u02b5\u0003\u0002\u0002\u0002",
    "\u02b5\u02b3\u0003\u0002\u0002\u0002\u02b5\u02b6\u0003\u0002\u0002\u0002",
    "\u02b6}\u0003\u0002\u0002\u0002\u02b7\u02b8\u0007,\u0002\u0002\u02b8",
    "\u02b9\u0007|\u0002\u0002\u02b9\u02ba\u0007y\u0002\u0002\u02ba\u02cc",
    "\u0007z\u0002\u0002\u02bb\u02bc\u0007{\u0002\u0002\u02bc\u02bd\u0007",
    "{\u0002\u0002\u02bd\u02be\u0005\u0080A\u0002\u02be\u02bf\u0007z\u0002",
    "\u0002\u02bf\u02c7\u0003\u0002\u0002\u0002\u02c0\u02c1\u0007{\u0002",
    "\u0002\u02c1\u02c2\u0007{\u0002\u0002\u02c2\u02c3\u0005\u00a0Q\u0002",
    "\u02c3\u02c4\u0007z\u0002\u0002\u02c4\u02c6\u0003\u0002\u0002\u0002",
    "\u02c5\u02c0\u0003\u0002\u0002\u0002\u02c6\u02c9\u0003\u0002\u0002\u0002",
    "\u02c7\u02c5\u0003\u0002\u0002\u0002\u02c7\u02c8\u0003\u0002\u0002\u0002",
    "\u02c8\u02cb\u0003\u0002\u0002\u0002\u02c9\u02c7\u0003\u0002\u0002\u0002",
    "\u02ca\u02bb\u0003\u0002\u0002\u0002\u02cb\u02ce\u0003\u0002\u0002\u0002",
    "\u02cc\u02ca\u0003\u0002\u0002\u0002\u02cc\u02cd\u0003\u0002\u0002\u0002",
    "\u02cd\u007f\u0003\u0002\u0002\u0002\u02ce\u02cc\u0003\u0002\u0002\u0002",
    "\u02cf\u02da\u0005\u008aF\u0002\u02d0\u02da\u0005\u008cG\u0002\u02d1",
    "\u02da\u0005\u0088E\u0002\u02d2\u02da\u0005\u0086D\u0002\u02d3\u02da",
    "\u0005\u0084C\u0002\u02d4\u02da\u0005\u008eH\u0002\u02d5\u02da\u0005",
    "\u0090I\u0002\u02d6\u02da\u0005\u009aN\u0002\u02d7\u02da\u0005\u009c",
    "O\u0002\u02d8\u02da\u0005\u009eP\u0002\u02d9\u02cf\u0003\u0002\u0002",
    "\u0002\u02d9\u02d0\u0003\u0002\u0002\u0002\u02d9\u02d1\u0003\u0002\u0002",
    "\u0002\u02d9\u02d2\u0003\u0002\u0002\u0002\u02d9\u02d3\u0003\u0002\u0002",
    "\u0002\u02d9\u02d4\u0003\u0002\u0002\u0002\u02d9\u02d5\u0003\u0002\u0002",
    "\u0002\u02d9\u02d6\u0003\u0002\u0002\u0002\u02d9\u02d7\u0003\u0002\u0002",
    "\u0002\u02d9\u02d8\u0003\u0002\u0002\u0002\u02da\u0081\u0003\u0002\u0002",
    "\u0002\u02db\u02dc\t\t\u0002\u0002\u02dc\u0083\u0003\u0002\u0002\u0002",
    "\u02dd\u02de\u0005h5\u0002\u02de\u02df\u0007|\u0002\u0002\u02df\u02e0",
    "\u0007/\u0002\u0002\u02e0\u0085\u0003\u0002\u0002\u0002\u02e1\u02e2",
    "\u0005h5\u0002\u02e2\u02e3\u0007|\u0002\u0002\u02e3\u02e5\u0005\u0082",
    "B\u0002\u02e4\u02e6\u0007|\u0002\u0002\u02e5\u02e4\u0003\u0002\u0002",
    "\u0002\u02e5\u02e6\u0003\u0002\u0002\u0002\u02e6\u02e7\u0003\u0002\u0002",
    "\u0002\u02e7\u02e8\u0005\u00c6d\u0002\u02e8\u02ec\u0007|\u0002\u0002",
    "\u02e9\u02ea\u0005\u0002\u0002\u0002\u02ea\u02eb\u0007|\u0002\u0002",
    "\u02eb\u02ed\u0003\u0002\u0002\u0002\u02ec\u02e9\u0003\u0002\u0002\u0002",
    "\u02ec\u02ed\u0003\u0002\u0002\u0002\u02ed\u02ee\u0003\u0002\u0002\u0002",
    "\u02ee\u02ef\u0005@!\u0002\u02ef\u0087\u0003\u0002\u0002\u0002\u02f0",
    "\u02f1\u0005h5\u0002\u02f1\u02f2\u0007|\u0002\u0002\u02f2\u02f4\u0005",
    "\u0082B\u0002\u02f3\u02f5\u0007|\u0002\u0002\u02f4\u02f3\u0003\u0002",
    "\u0002\u0002\u02f4\u02f5\u0003\u0002\u0002\u0002\u02f5\u02f6\u0003\u0002",
    "\u0002\u0002\u02f6\u02f7\u0005\u00c8e\u0002\u02f7\u02fb\u0007|\u0002",
    "\u0002\u02f8\u02f9\u0005\u0002\u0002\u0002\u02f9\u02fa\u0007|\u0002",
    "\u0002\u02fa\u02fc\u0003\u0002\u0002\u0002\u02fb\u02f8\u0003\u0002\u0002",
    "\u0002\u02fb\u02fc\u0003\u0002\u0002\u0002\u02fc\u02fd\u0003\u0002\u0002",
    "\u0002\u02fd\u02fe\u0005> \u0002\u02fe\u0089\u0003\u0002\u0002\u0002",
    "\u02ff\u0300\u0005h5\u0002\u0300\u0301\u0007|\u0002\u0002\u0301\u0303",
    "\u0005\u0082B\u0002\u0302\u0304\u0007|\u0002\u0002\u0303\u0302\u0003",
    "\u0002\u0002\u0002\u0303\u0304\u0003\u0002\u0002\u0002\u0304\u0305\u0003",
    "\u0002\u0002\u0002\u0305\u0306\u0005\u00caf\u0002\u0306\u030a\u0007",
    "|\u0002\u0002\u0307\u0308\u0005\u0002\u0002\u0002\u0308\u0309\u0007",
    "|\u0002\u0002\u0309\u030b\u0003\u0002\u0002\u0002\u030a\u0307\u0003",
    "\u0002\u0002\u0002\u030a\u030b\u0003\u0002\u0002\u0002\u030b\u030c\u0003",
    "\u0002\u0002\u0002\u030c\u030d\u0005> \u0002\u030d\u008b\u0003\u0002",
    "\u0002\u0002\u030e\u030f\u0005h5\u0002\u030f\u0310\u0007|\u0002\u0002",
    "\u0310\u0312\u0005\u0082B\u0002\u0311\u0313\u0007|\u0002\u0002\u0312",
    "\u0311\u0003\u0002\u0002\u0002\u0312\u0313\u0003\u0002\u0002\u0002\u0313",
    "\u0314\u0003\u0002\u0002\u0002\u0314\u0315\u0005\u00c4c\u0002\u0315",
    "\u0319\u0007|\u0002\u0002\u0316\u0317\u0005\u0002\u0002\u0002\u0317",
    "\u0318\u0007|\u0002\u0002\u0318\u031a\u0003\u0002\u0002\u0002\u0319",
    "\u0316\u0003\u0002\u0002\u0002\u0319\u031a\u0003\u0002\u0002\u0002\u031a",
    "\u031b\u0003\u0002\u0002\u0002\u031b\u031c\u0005@!\u0002\u031c\u008d",
    "\u0003\u0002\u0002\u0002\u031d\u031e\u0005h5\u0002\u031e\u031f\u0007",
    "|\u0002\u0002\u031f\u0320\u00070\u0002\u0002\u0320\u0321\u0007|\u0002",
    "\u0002\u0321\u0322\u0005\u0014\u000b\u0002\u0322\u0323\u0007|\u0002",
    "\u0002\u0323\u0324\u00071\u0002\u0002\u0324\u0325\u0007|\u0002\u0002",
    "\u0325\u0326\u0005 \u0011\u0002\u0326\u008f\u0003\u0002\u0002\u0002",
    "\u0327\u0328\u0005h5\u0002\u0328\u0329\u0007|\u0002\u0002\u0329\u032a",
    "\u0005\u0094K\u0002\u032a\u032b\u0007|\u0002\u0002\u032b\u032c\u0005",
    "\u0098M\u0002\u032c\u0091\u0003\u0002\u0002\u0002\u032d\u0331\u0007",
    "~\u0002\u0002\u032e\u032f\u00072\u0002\u0002\u032f\u0331\u0007|\u0002",
    "\u0002\u0330\u032d\u0003\u0002\u0002\u0002\u0330\u032e\u0003\u0002\u0002",
    "\u0002\u0331\u0093\u0003\u0002\u0002\u0002\u0332\u0333\u0005\u0092J",
    "\u0002\u0333\u0334\u0007y\u0002\u0002\u0334\u0095\u0003\u0002\u0002",
    "\u0002\u0335\u0336\u0005h5\u0002\u0336\u0337\u0007|\u0002\u0002\u0337",
    "\u0338\u0005\u00b2Z\u0002\u0338\u0097\u0003\u0002\u0002\u0002\u0339",
    "\u0342\u0007&\u0002\u0002\u033a\u033f\u0005\u0096L\u0002\u033b\u033c",
    "\u0007\u0012\u0002\u0002\u033c\u033e\u0005\u0096L\u0002\u033d\u033b",
    "\u0003\u0002\u0002\u0002\u033e\u0341\u0003\u0002\u0002\u0002\u033f\u033d",
    "\u0003\u0002\u0002\u0002\u033f\u0340\u0003\u0002\u0002\u0002\u0340\u0343",
    "\u0003\u0002\u0002\u0002\u0341\u033f\u0003\u0002\u0002\u0002\u0342\u033a",
    "\u0003\u0002\u0002\u0002\u0342\u0343\u0003\u0002\u0002\u0002\u0343\u0344",
    "\u0003\u0002\u0002\u0002\u0344\u0345\u0007\'\u0002\u0002\u0345\u0099",
    "\u0003\u0002\u0002\u0002\u0346\u0347\u0005h5\u0002\u0347\u0348\u0007",
    "|\u0002\u0002\u0348\u0349\u00073\u0002\u0002\u0349\u034a\u0007|\u0002",
    "\u0002\u034a\u034b\u0005\u00b2Z\u0002\u034b\u009b\u0003\u0002\u0002",
    "\u0002\u034c\u034d\u0005h5\u0002\u034d\u034e\u0007|\u0002\u0002\u034e",
    "\u034f\u00074\u0002\u0002\u034f\u0350\u0007|\u0002\u0002\u0350\u0351",
    "\u0005> \u0002\u0351\u0352\u0007|\u0002\u0002\u0352\u0353\u00071\u0002",
    "\u0002\u0353\u0354\u0007|\u0002\u0002\u0354\u0355\u0005> \u0002\u0355",
    "\u009d\u0003\u0002\u0002\u0002\u0356\u0357\u0005h5\u0002\u0357\u0358",
    "\u0007|\u0002\u0002\u0358\u0359\u00075\u0002\u0002\u0359\u035a\u0007",
    "|\u0002\u0002\u035a\u035b\u0005h5\u0002\u035b\u009f\u0003\u0002\u0002",
    "\u0002\u035c\u035d\t\n\u0002\u0002\u035d\u0366\u0007|\u0002\u0002\u035e",
    "\u0367\u0005\u00a2R\u0002\u035f\u0367\u0005\u00a4S\u0002\u0360\u0367",
    "\u0005\u00a8U\u0002\u0361\u0367\u0005\u00a6T\u0002\u0362\u0367\u0005",
    "\u00aaV\u0002\u0363\u0367\u0005\u00aeX\u0002\u0364\u0367\u0005\u00b0",
    "Y\u0002\u0365\u0367\u0005\u00acW\u0002\u0366\u035e\u0003\u0002\u0002",
    "\u0002\u0366\u035f\u0003\u0002\u0002\u0002\u0366\u0360\u0003\u0002\u0002",
    "\u0002\u0366\u0361\u0003\u0002\u0002\u0002\u0366\u0362\u0003\u0002\u0002",
    "\u0002\u0366\u0363\u0003\u0002\u0002\u0002\u0366\u0364\u0003\u0002\u0002",
    "\u0002\u0366\u0365\u0003\u0002\u0002\u0002\u0367\u00a1\u0003\u0002\u0002",
    "\u0002\u0368\u0369\u0005h5\u0002\u0369\u036a\u0007|\u0002\u0002\u036a",
    "\u036b\u00078\u0002\u0002\u036b\u036c\u0007|\u0002\u0002\u036c\u036d",
    "\u0005\u00b2Z\u0002\u036d\u00a3\u0003\u0002\u0002\u0002\u036e\u036f",
    "\u0005h5\u0002\u036f\u0370\u0007|\u0002\u0002\u0370\u0371\u00078\u0002",
    "\u0002\u0371\u0372\u0007|\u0002\u0002\u0372\u0373\u0007y\u0002\u0002",
    "\u0373\u0374\u0007|\u0002\u0002\u0374\u0375\u00079\u0002\u0002\u0375",
    "\u00a5\u0003\u0002\u0002\u0002\u0376\u0377\u0005h5\u0002\u0377\u0378",
    "\u0007|\u0002\u0002\u0378\u0379\u0007:\u0002\u0002\u0379\u00a7\u0003",
    "\u0002\u0002\u0002\u037a\u037b\u0005h5\u0002\u037b\u037c\u0007|\u0002",
    "\u0002\u037c\u037d\u0007;\u0002\u0002\u037d\u00a9\u0003\u0002\u0002",
    "\u0002\u037e\u037f\u0005h5\u0002\u037f\u0380\u0007|\u0002\u0002\u0380",
    "\u0381\u0007<\u0002\u0002\u0381\u0382\u0007|\u0002\u0002\u0382\u0383",
    "\u0005> \u0002\u0383\u00ab\u0003\u0002\u0002\u0002\u0384\u0385\u0005",
    "h5\u0002\u0385\u0386\u0007|\u0002\u0002\u0386\u0389\u0007=\u0002\u0002",
    "\u0387\u0388\u0007|\u0002\u0002\u0388\u038a\u0005\u0002\u0002\u0002",
    "\u0389\u0387\u0003\u0002\u0002\u0002\u0389\u038a\u0003\u0002\u0002\u0002",
    "\u038a\u038b\u0003\u0002\u0002\u0002\u038b\u038c\u0007|\u0002\u0002",
    "\u038c\u038d\u0005@!\u0002\u038d\u00ad\u0003\u0002\u0002\u0002\u038e",
    "\u038f\u0005h5\u0002\u038f\u0390\u0007>\u0002\u0002\u0390\u0391\u0007",
    "y\u0002\u0002\u0391\u0392\u0007?\u0002\u0002\u0392\u00af\u0003\u0002",
    "\u0002\u0002\u0393\u0394\u0005h5\u0002\u0394\u0395\u0007|\u0002\u0002",
    "\u0395\u0396\u00078\u0002\u0002\u0396\u0397\u0007|\u0002\u0002\u0397",
    "\u0398\u0007y\u0002\u0002\u0398\u0399\u0007|\u0002\u0002\u0399\u039a",
    "\u0007?\u0002\u0002\u039a\u00b1\u0003\u0002\u0002\u0002\u039b\u039f",
    "\u0007&\u0002\u0002\u039c\u039e\u0007|\u0002\u0002\u039d\u039c\u0003",
    "\u0002\u0002\u0002\u039e\u03a1\u0003\u0002\u0002\u0002\u039f\u039d\u0003",
    "\u0002\u0002\u0002\u039f\u03a0\u0003\u0002\u0002\u0002\u03a0\u03a8\u0003",
    "\u0002\u0002\u0002\u03a1\u039f\u0003\u0002\u0002\u0002\u03a2\u03a4\u0005",
    "\u00b4[\u0002\u03a3\u03a5\u0007|\u0002\u0002\u03a4\u03a3\u0003\u0002",
    "\u0002\u0002\u03a4\u03a5\u0003\u0002\u0002\u0002\u03a5\u03a7\u0003\u0002",
    "\u0002\u0002\u03a6\u03a2\u0003\u0002\u0002\u0002\u03a7\u03aa\u0003\u0002",
    "\u0002\u0002\u03a8\u03a6\u0003\u0002\u0002\u0002\u03a8\u03a9\u0003\u0002",
    "\u0002\u0002\u03a9\u03ae\u0003\u0002\u0002\u0002\u03aa\u03a8\u0003\u0002",
    "\u0002\u0002\u03ab\u03ad\u0007|\u0002\u0002\u03ac\u03ab\u0003\u0002",
    "\u0002\u0002\u03ad\u03b0\u0003\u0002\u0002\u0002\u03ae\u03ac\u0003\u0002",
    "\u0002\u0002\u03ae\u03af\u0003\u0002\u0002\u0002\u03af\u03b1\u0003\u0002",
    "\u0002\u0002\u03b0\u03ae\u0003\u0002\u0002\u0002\u03b1\u03b2\u0007\'",
    "\u0002\u0002\u03b2\u00b3\u0003\u0002\u0002\u0002\u03b3\u03ba\u0005\u00b6",
    "\\\u0002\u03b4\u03ba\u0005\u00ba^\u0002\u03b5\u03ba\u0005\u00b8]\u0002",
    "\u03b6\u03ba\u0005\u00bc_\u0002\u03b7\u03ba\u0005\u00be`\u0002\u03b8",
    "\u03ba\u0005\u00c0a\u0002\u03b9\u03b3\u0003\u0002\u0002\u0002\u03b9",
    "\u03b4\u0003\u0002\u0002\u0002\u03b9\u03b5\u0003\u0002\u0002\u0002\u03b9",
    "\u03b6\u0003\u0002\u0002\u0002\u03b9\u03b7\u0003\u0002\u0002\u0002\u03b9",
    "\u03b8\u0003\u0002\u0002\u0002\u03ba\u00b5\u0003\u0002\u0002\u0002\u03bb",
    "\u03bc\t\u000b\u0002\u0002\u03bc\u00b7\u0003\u0002\u0002\u0002\u03bd",
    "\u03be\t\f\u0002\u0002\u03be\u00b9\u0003\u0002\u0002\u0002\u03bf\u03c0",
    "\t\r\u0002\u0002\u03c0\u00bb\u0003\u0002\u0002\u0002\u03c1\u03c2\t\u000e",
    "\u0002\u0002\u03c2\u00bd\u0003\u0002\u0002\u0002\u03c3\u03c4\t\u000f",
    "\u0002\u0002\u03c4\u00bf\u0003\u0002\u0002\u0002\u03c5\u03c6\t\u0010",
    "\u0002\u0002\u03c6\u00c1\u0003\u0002\u0002\u0002\u03c7\u03cc\u0005\u00c6",
    "d\u0002\u03c8\u03cc\u0005\u00c4c\u0002\u03c9\u03cc\u0005\u00c8e\u0002",
    "\u03ca\u03cc\u0005\u00caf\u0002\u03cb\u03c7\u0003\u0002\u0002\u0002",
    "\u03cb\u03c8\u0003\u0002\u0002\u0002\u03cb\u03c9\u0003\u0002\u0002\u0002",
    "\u03cb\u03ca\u0003\u0002\u0002\u0002\u03cc\u00c3\u0003\u0002\u0002\u0002",
    "\u03cd\u03ce\t\u0011\u0002\u0002\u03ce\u00c5\u0003\u0002\u0002\u0002",
    "\u03cf\u03d0\t\u0012\u0002\u0002\u03d0\u00c7\u0003\u0002\u0002\u0002",
    "\u03d1\u03d2\t\u0013\u0002\u0002\u03d2\u00c9\u0003\u0002\u0002\u0002",
    "\u03d3\u03d4\t\u0014\u0002\u0002\u03d4\u00cb\u0003\u0002\u0002\u0002",
    "\u03d5\u03db\u0005\u00ceh\u0002\u03d6\u03db\u0005\u00d0i\u0002\u03d7",
    "\u03db\u0005\u00d2j\u0002\u03d8\u03db\u0005\u00d4k\u0002\u03d9\u03db",
    "\u0005\u00d6l\u0002\u03da\u03d5\u0003\u0002\u0002\u0002\u03da\u03d6",
    "\u0003\u0002\u0002\u0002\u03da\u03d7\u0003\u0002\u0002\u0002\u03da\u03d8",
    "\u0003\u0002\u0002\u0002\u03da\u03d9\u0003\u0002\u0002\u0002\u03db\u00cd",
    "\u0003\u0002\u0002\u0002\u03dc\u03dd\t\u0015\u0002\u0002\u03dd\u00cf",
    "\u0003\u0002\u0002\u0002\u03de\u03df\t\u0016\u0002\u0002\u03df\u00d1",
    "\u0003\u0002\u0002\u0002\u03e0\u03e1\t\u0017\u0002\u0002\u03e1\u00d3",
    "\u0003\u0002\u0002\u0002\u03e2\u03e3\t\u0018\u0002\u0002\u03e3\u00d5",
    "\u0003\u0002\u0002\u0002\u03e4\u03e5\t\u0019\u0002\u0002\u03e5\u00d7",
    "\u0003\u0002\u0002\u0002\u03e6\u03ee\u0005\u00dco\u0002\u03e7\u03ee",
    "\u0005\u00dep\u0002\u03e8\u03ee\u0005\u00e0q\u0002\u03e9\u03ee\u0005",
    "\u00e2r\u0002\u03ea\u03ee\u0005\u00e4s\u0002\u03eb\u03ee\u0005\u00e6",
    "t\u0002\u03ec\u03ee\u0005\u00e8u\u0002\u03ed\u03e6\u0003\u0002\u0002",
    "\u0002\u03ed\u03e7\u0003\u0002\u0002\u0002\u03ed\u03e8\u0003\u0002\u0002",
    "\u0002\u03ed\u03e9\u0003\u0002\u0002\u0002\u03ed\u03ea\u0003\u0002\u0002",
    "\u0002\u03ed\u03eb\u0003\u0002\u0002\u0002\u03ed\u03ec\u0003\u0002\u0002",
    "\u0002\u03ee\u00d9\u0003\u0002\u0002\u0002\u03ef\u03f0\t\u001a\u0002",
    "\u0002\u03f0\u00db\u0003\u0002\u0002\u0002\u03f1\u03f6\u0007b\u0002",
    "\u0002\u03f2\u03f3\u0005\u00dan\u0002\u03f3\u03f4\u0007c\u0002\u0002",
    "\u03f4\u03f6\u0003\u0002\u0002\u0002\u03f5\u03f1\u0003\u0002\u0002\u0002",
    "\u03f5\u03f2\u0003\u0002\u0002\u0002\u03f6\u00dd\u0003\u0002\u0002\u0002",
    "\u03f7\u03fc\u0007d\u0002\u0002\u03f8\u03f9\u0005\u00dan\u0002\u03f9",
    "\u03fa\u0007e\u0002\u0002\u03fa\u03fc\u0003\u0002\u0002\u0002\u03fb",
    "\u03f7\u0003\u0002\u0002\u0002\u03fb\u03f8\u0003\u0002\u0002\u0002\u03fc",
    "\u00df\u0003\u0002\u0002\u0002\u03fd\u0402\u0007f\u0002\u0002\u03fe",
    "\u03ff\u0005\u00dan\u0002\u03ff\u0400\u0005\u00be`\u0002\u0400\u0402",
    "\u0003\u0002\u0002\u0002\u0401\u03fd\u0003\u0002\u0002\u0002\u0401\u03fe",
    "\u0003\u0002\u0002\u0002\u0402\u00e1\u0003\u0002\u0002\u0002\u0403\u0408",
    "\u0007g\u0002\u0002\u0404\u0405\u0005\u00dan\u0002\u0405\u0406\u0005",
    "\u00ba^\u0002\u0406\u0408\u0003\u0002\u0002\u0002\u0407\u0403\u0003",
    "\u0002\u0002\u0002\u0407\u0404\u0003\u0002\u0002\u0002\u0408\u00e3\u0003",
    "\u0002\u0002\u0002\u0409\u040e\u0007h\u0002\u0002\u040a\u040b\u0005",
    "\u00dan\u0002\u040b\u040c\u0005\u00b8]\u0002\u040c\u040e\u0003\u0002",
    "\u0002\u0002\u040d\u0409\u0003\u0002\u0002\u0002\u040d\u040a\u0003\u0002",
    "\u0002\u0002\u040e\u00e5\u0003\u0002\u0002\u0002\u040f\u0414\u0007i",
    "\u0002\u0002\u0410\u0411\u0005\u00dan\u0002\u0411\u0412\u0005\u00bc",
    "_\u0002\u0412\u0414\u0003\u0002\u0002\u0002\u0413\u040f\u0003\u0002",
    "\u0002\u0002\u0413\u0410\u0003\u0002\u0002\u0002\u0414\u00e7\u0003\u0002",
    "\u0002\u0002\u0415\u041a\u0007j\u0002\u0002\u0416\u0417\u0005\u00da",
    "n\u0002\u0417\u0418\u0005\u00b6\\\u0002\u0418\u041a\u0003\u0002\u0002",
    "\u0002\u0419\u0415\u0003\u0002\u0002\u0002\u0419\u0416\u0003\u0002\u0002",
    "\u0002\u041a\u00e9\u0003\u0002\u0002\u0002\u041b\u0424\u0005\u00ecw",
    "\u0002\u041c\u0424\u0005\u00eex\u0002\u041d\u0424\u0005\u00f0y\u0002",
    "\u041e\u0424\u0005\u00f2z\u0002\u041f\u0424\u0005\u00f4{\u0002\u0420",
    "\u0424\u0005\u00f6|\u0002\u0421\u0424\u0005\u00f8}\u0002\u0422\u0424",
    "\u0005\u00fa~\u0002\u0423\u041b\u0003\u0002\u0002\u0002\u0423\u041c",
    "\u0003\u0002\u0002\u0002\u0423\u041d\u0003\u0002\u0002\u0002\u0423\u041e",
    "\u0003\u0002\u0002\u0002\u0423\u041f\u0003\u0002\u0002\u0002\u0423\u0420",
    "\u0003\u0002\u0002\u0002\u0423\u0421\u0003\u0002\u0002\u0002\u0423\u0422",
    "\u0003\u0002\u0002\u0002\u0424\u00eb\u0003\u0002\u0002\u0002\u0425\u0426",
    "\t\u001b\u0002\u0002\u0426\u00ed\u0003\u0002\u0002\u0002\u0427\u0428",
    "\t\u001c\u0002\u0002\u0428\u00ef\u0003\u0002\u0002\u0002\u0429\u042a",
    "\t\u001d\u0002\u0002\u042a\u00f1\u0003\u0002\u0002\u0002\u042b\u042c",
    "\t\u001e\u0002\u0002\u042c\u00f3\u0003\u0002\u0002\u0002\u042d\u042e",
    "\t\u001f\u0002\u0002\u042e\u00f5\u0003\u0002\u0002\u0002\u042f\u0430",
    "\t \u0002\u0002\u0430\u00f7\u0003\u0002\u0002\u0002\u0431\u0432\t!\u0002",
    "\u0002\u0432\u00f9\u0003\u0002\u0002\u0002\u0433\u0434\t\"\u0002\u0002",
    "\u0434\u00fb\u0003\u0002\u0002\u0002Z\u0103\u010a\u010f\u0116\u0122",
    "\u012d\u0142\u0146\u014b\u014f\u015d\u0165\u0170\u018a\u0196\u01ac\u01b1",
    "\u01b8\u01be\u01ca\u01cf\u01d5\u01db\u01de\u01e1\u01e5\u01e9\u01ec\u01ef",
    "\u01f4\u0200\u0205\u020b\u0211\u0214\u0217\u021b\u021f\u0222\u0225\u022a",
    "\u0236\u0249\u024e\u025d\u0268\u026c\u0276\u027a\u0284\u0288\u0299\u029e",
    "\u02a5\u02ab\u02b5\u02c7\u02cc\u02d9\u02e5\u02ec\u02f4\u02fb\u0303\u030a",
    "\u0312\u0319\u0330\u033f\u0342\u0366\u0389\u039f\u03a4\u03a8\u03ae\u03b9",
    "\u03cb\u03da\u03ed\u03f5\u03fb\u0401\u0407\u040d\u0413\u0419\u0423"].join("");


var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new antlr4.dfa.DFA(ds, index); });

var sharedContextCache = new antlr4.PredictionContextCache();

var literalNames = [ null, "'at'", "'@'", "'game'", "'options'", "'roads:'", 
                     "'ships:'", "'cities:'", "'settlements:'", "'robber'", 
                     "'pirate'", "'standard'", "'standardWithCities'", "'seaFarers'", 
                     "'board'", "'system2D:'", "','", "'pointy'", "'flat'", 
                     "'odd'", "'even'", "'|'", "'hexes'", "'locationIds'", 
                     "'..'", "'chits'", "'ports'", "'player'", "'p'", "'server'", 
                     "'s'", "'.'", "'client'", "'c'", "'hand'", "'stock'", 
                     "'['", "']'", "'devCards'", "'placement'", "'and gains'", 
                     "'turns'", "'turn'", "'builds'", "'build'", "'ends turn'", 
                     "'moves'", "'to'", "'rolls'", "'discards'", "'moves ship from'", 
                     "'accepts offer from'", "'v/'", "'check'", "'has'", 
                     "'roads in stock'", "'is not on turn'", "'is on turn'", 
                     "'has road at'", "'has settlement'", "'hasXRoads:'", 
                     "'roads'", "'\uD83D\uDC11'", "'sheep'", "'\uD83C\uDF32'", 
                     "'timber'", "'t'", "'\uD83C\uDF3E'", "'wheat'", "'w'", 
                     "'\u26F0'", "'ore'", "'o'", "'\u268C'", "'brick'", 
                     "'b'", "'?'", "'unknown'", "'\uD83C\uDFE0'", "'settlement'", 
                     "'\u26EA'", "'city'", "'\u26F5'", "'ship'", "'\uD83D\uDEE3'", 
                     "'road'", "'soldier'", "'m'", "'monopoly'", "'rb'", 
                     "'roadBuilding'", "'vp'", "'victoryPoint'", "'yop'", 
                     "'yearOfPlenty'", "'port'", "'port31'", "'3:1'", "'port41'", 
                     "'4:1'", "'brickPort'", "'wheatPort'", "'timberPort'", 
                     "'orePort'", "'sheepPort'", "'pasture'", "'P'", "'T'", 
                     "'mountain'", "'M'", "'river'", "'R'", "'field'", "'F'", 
                     "'sea'", "'S'", "'none'", "'desert'", "'D'", null, 
                     null, null, "' '", "'\uD83D\uDD28'", "'\uD83C\uDFB2'", 
                     "'\u2693'", "'\u2714'", "'\u2394'", "'\u2B21'" ];

var symbolicNames = [ null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, "NUMBER", "NL", "INDENT", "SPACE", "U_BUILD", 
                      "U_DICE", "U_PORT", "U_CHECK", "U_FLAT", "U_POINTY", 
                      "VERTEXDOT" ];

var ruleNames =  [ "at", "script", "game", "gameOptions", "gameOption", 
                   "roads", "ships", "cities", "settlements", "robber", 
                   "pirate", "placementSequence", "board", "boardOption", 
                   "layout2D", "location", "x", "y", "z", "locationXyz", 
                   "row", "column", "location2D", "locationId", "orientation", 
                   "pointy", "flat", "odd", "even", "oddEven", "edge", "vertex", 
                   "hexSetup", "hexRow", "evenHexRow", "oddHexRow", "locationSetup", 
                   "locationRow", "noLocation", "locationAssignment", "evenLocationRow", 
                   "oddLocationRow", "chitSetup", "chitRow", "noChit", "chitAssignment", 
                   "evenChitRow", "oddChitRow", "portsSetup", "portAtEdge", 
                   "players", "player", "server", "client", "setupPlayerOption", 
                   "hand", "stock", "devCards", "ports", "placements", "buildAction", 
                   "turns", "turn", "action", "build", "endTurn", "buildCity", 
                   "buildShip", "buildRoad", "buildSettlement", "moveRobber", 
                   "rollDice", "dice", "roll", "playerProduction", "production", 
                   "discardResources", "moveShip", "acceptOffer", "check", 
                   "playerHasResources", "hasXRoadsInStock", "isNotOnTurn", 
                   "isOnTurn", "hasRoadAt", "hasSettlementAt", "hasXRoads", 
                   "hasStockRoadAmount", "resourceSet", "resource", "sheep", 
                   "timber", "wheat", "ore", "brick", "unknown", "piece", 
                   "settlement", "city", "ship", "road", "devCard", "soldier", 
                   "monopoly", "roadBuilding", "victoryPoint", "yearOfPlenty", 
                   "port", "portPrefix", "port31", "port41", "brickPort", 
                   "wheatPort", "timberPort", "orePort", "sheepPort", "hex", 
                   "pasture", "forest", "mountain", "river", "field", "sea", 
                   "none", "desert" ];

function JSettlersParser (input) {
	antlr4.Parser.call(this, input);
    this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
    this.ruleNames = ruleNames;
    this.literalNames = literalNames;
    this.symbolicNames = symbolicNames;
    return this;
}

JSettlersParser.prototype = Object.create(antlr4.Parser.prototype);
JSettlersParser.prototype.constructor = JSettlersParser;

Object.defineProperty(JSettlersParser.prototype, "atn", {
	get : function() {
		return atn;
	}
});

JSettlersParser.EOF = antlr4.Token.EOF;
JSettlersParser.T__0 = 1;
JSettlersParser.T__1 = 2;
JSettlersParser.T__2 = 3;
JSettlersParser.T__3 = 4;
JSettlersParser.T__4 = 5;
JSettlersParser.T__5 = 6;
JSettlersParser.T__6 = 7;
JSettlersParser.T__7 = 8;
JSettlersParser.T__8 = 9;
JSettlersParser.T__9 = 10;
JSettlersParser.T__10 = 11;
JSettlersParser.T__11 = 12;
JSettlersParser.T__12 = 13;
JSettlersParser.T__13 = 14;
JSettlersParser.T__14 = 15;
JSettlersParser.T__15 = 16;
JSettlersParser.T__16 = 17;
JSettlersParser.T__17 = 18;
JSettlersParser.T__18 = 19;
JSettlersParser.T__19 = 20;
JSettlersParser.T__20 = 21;
JSettlersParser.T__21 = 22;
JSettlersParser.T__22 = 23;
JSettlersParser.T__23 = 24;
JSettlersParser.T__24 = 25;
JSettlersParser.T__25 = 26;
JSettlersParser.T__26 = 27;
JSettlersParser.T__27 = 28;
JSettlersParser.T__28 = 29;
JSettlersParser.T__29 = 30;
JSettlersParser.T__30 = 31;
JSettlersParser.T__31 = 32;
JSettlersParser.T__32 = 33;
JSettlersParser.T__33 = 34;
JSettlersParser.T__34 = 35;
JSettlersParser.T__35 = 36;
JSettlersParser.T__36 = 37;
JSettlersParser.T__37 = 38;
JSettlersParser.T__38 = 39;
JSettlersParser.T__39 = 40;
JSettlersParser.T__40 = 41;
JSettlersParser.T__41 = 42;
JSettlersParser.T__42 = 43;
JSettlersParser.T__43 = 44;
JSettlersParser.T__44 = 45;
JSettlersParser.T__45 = 46;
JSettlersParser.T__46 = 47;
JSettlersParser.T__47 = 48;
JSettlersParser.T__48 = 49;
JSettlersParser.T__49 = 50;
JSettlersParser.T__50 = 51;
JSettlersParser.T__51 = 52;
JSettlersParser.T__52 = 53;
JSettlersParser.T__53 = 54;
JSettlersParser.T__54 = 55;
JSettlersParser.T__55 = 56;
JSettlersParser.T__56 = 57;
JSettlersParser.T__57 = 58;
JSettlersParser.T__58 = 59;
JSettlersParser.T__59 = 60;
JSettlersParser.T__60 = 61;
JSettlersParser.T__61 = 62;
JSettlersParser.T__62 = 63;
JSettlersParser.T__63 = 64;
JSettlersParser.T__64 = 65;
JSettlersParser.T__65 = 66;
JSettlersParser.T__66 = 67;
JSettlersParser.T__67 = 68;
JSettlersParser.T__68 = 69;
JSettlersParser.T__69 = 70;
JSettlersParser.T__70 = 71;
JSettlersParser.T__71 = 72;
JSettlersParser.T__72 = 73;
JSettlersParser.T__73 = 74;
JSettlersParser.T__74 = 75;
JSettlersParser.T__75 = 76;
JSettlersParser.T__76 = 77;
JSettlersParser.T__77 = 78;
JSettlersParser.T__78 = 79;
JSettlersParser.T__79 = 80;
JSettlersParser.T__80 = 81;
JSettlersParser.T__81 = 82;
JSettlersParser.T__82 = 83;
JSettlersParser.T__83 = 84;
JSettlersParser.T__84 = 85;
JSettlersParser.T__85 = 86;
JSettlersParser.T__86 = 87;
JSettlersParser.T__87 = 88;
JSettlersParser.T__88 = 89;
JSettlersParser.T__89 = 90;
JSettlersParser.T__90 = 91;
JSettlersParser.T__91 = 92;
JSettlersParser.T__92 = 93;
JSettlersParser.T__93 = 94;
JSettlersParser.T__94 = 95;
JSettlersParser.T__95 = 96;
JSettlersParser.T__96 = 97;
JSettlersParser.T__97 = 98;
JSettlersParser.T__98 = 99;
JSettlersParser.T__99 = 100;
JSettlersParser.T__100 = 101;
JSettlersParser.T__101 = 102;
JSettlersParser.T__102 = 103;
JSettlersParser.T__103 = 104;
JSettlersParser.T__104 = 105;
JSettlersParser.T__105 = 106;
JSettlersParser.T__106 = 107;
JSettlersParser.T__107 = 108;
JSettlersParser.T__108 = 109;
JSettlersParser.T__109 = 110;
JSettlersParser.T__110 = 111;
JSettlersParser.T__111 = 112;
JSettlersParser.T__112 = 113;
JSettlersParser.T__113 = 114;
JSettlersParser.T__114 = 115;
JSettlersParser.T__115 = 116;
JSettlersParser.T__116 = 117;
JSettlersParser.T__117 = 118;
JSettlersParser.NUMBER = 119;
JSettlersParser.NL = 120;
JSettlersParser.INDENT = 121;
JSettlersParser.SPACE = 122;
JSettlersParser.U_BUILD = 123;
JSettlersParser.U_DICE = 124;
JSettlersParser.U_PORT = 125;
JSettlersParser.U_CHECK = 126;
JSettlersParser.U_FLAT = 127;
JSettlersParser.U_POINTY = 128;
JSettlersParser.VERTEXDOT = 129;

JSettlersParser.RULE_at = 0;
JSettlersParser.RULE_script = 1;
JSettlersParser.RULE_game = 2;
JSettlersParser.RULE_gameOptions = 3;
JSettlersParser.RULE_gameOption = 4;
JSettlersParser.RULE_roads = 5;
JSettlersParser.RULE_ships = 6;
JSettlersParser.RULE_cities = 7;
JSettlersParser.RULE_settlements = 8;
JSettlersParser.RULE_robber = 9;
JSettlersParser.RULE_pirate = 10;
JSettlersParser.RULE_placementSequence = 11;
JSettlersParser.RULE_board = 12;
JSettlersParser.RULE_boardOption = 13;
JSettlersParser.RULE_layout2D = 14;
JSettlersParser.RULE_location = 15;
JSettlersParser.RULE_x = 16;
JSettlersParser.RULE_y = 17;
JSettlersParser.RULE_z = 18;
JSettlersParser.RULE_locationXyz = 19;
JSettlersParser.RULE_row = 20;
JSettlersParser.RULE_column = 21;
JSettlersParser.RULE_location2D = 22;
JSettlersParser.RULE_locationId = 23;
JSettlersParser.RULE_orientation = 24;
JSettlersParser.RULE_pointy = 25;
JSettlersParser.RULE_flat = 26;
JSettlersParser.RULE_odd = 27;
JSettlersParser.RULE_even = 28;
JSettlersParser.RULE_oddEven = 29;
JSettlersParser.RULE_edge = 30;
JSettlersParser.RULE_vertex = 31;
JSettlersParser.RULE_hexSetup = 32;
JSettlersParser.RULE_hexRow = 33;
JSettlersParser.RULE_evenHexRow = 34;
JSettlersParser.RULE_oddHexRow = 35;
JSettlersParser.RULE_locationSetup = 36;
JSettlersParser.RULE_locationRow = 37;
JSettlersParser.RULE_noLocation = 38;
JSettlersParser.RULE_locationAssignment = 39;
JSettlersParser.RULE_evenLocationRow = 40;
JSettlersParser.RULE_oddLocationRow = 41;
JSettlersParser.RULE_chitSetup = 42;
JSettlersParser.RULE_chitRow = 43;
JSettlersParser.RULE_noChit = 44;
JSettlersParser.RULE_chitAssignment = 45;
JSettlersParser.RULE_evenChitRow = 46;
JSettlersParser.RULE_oddChitRow = 47;
JSettlersParser.RULE_portsSetup = 48;
JSettlersParser.RULE_portAtEdge = 49;
JSettlersParser.RULE_players = 50;
JSettlersParser.RULE_player = 51;
JSettlersParser.RULE_server = 52;
JSettlersParser.RULE_client = 53;
JSettlersParser.RULE_setupPlayerOption = 54;
JSettlersParser.RULE_hand = 55;
JSettlersParser.RULE_stock = 56;
JSettlersParser.RULE_devCards = 57;
JSettlersParser.RULE_ports = 58;
JSettlersParser.RULE_placements = 59;
JSettlersParser.RULE_buildAction = 60;
JSettlersParser.RULE_turns = 61;
JSettlersParser.RULE_turn = 62;
JSettlersParser.RULE_action = 63;
JSettlersParser.RULE_build = 64;
JSettlersParser.RULE_endTurn = 65;
JSettlersParser.RULE_buildCity = 66;
JSettlersParser.RULE_buildShip = 67;
JSettlersParser.RULE_buildRoad = 68;
JSettlersParser.RULE_buildSettlement = 69;
JSettlersParser.RULE_moveRobber = 70;
JSettlersParser.RULE_rollDice = 71;
JSettlersParser.RULE_dice = 72;
JSettlersParser.RULE_roll = 73;
JSettlersParser.RULE_playerProduction = 74;
JSettlersParser.RULE_production = 75;
JSettlersParser.RULE_discardResources = 76;
JSettlersParser.RULE_moveShip = 77;
JSettlersParser.RULE_acceptOffer = 78;
JSettlersParser.RULE_check = 79;
JSettlersParser.RULE_playerHasResources = 80;
JSettlersParser.RULE_hasXRoadsInStock = 81;
JSettlersParser.RULE_isNotOnTurn = 82;
JSettlersParser.RULE_isOnTurn = 83;
JSettlersParser.RULE_hasRoadAt = 84;
JSettlersParser.RULE_hasSettlementAt = 85;
JSettlersParser.RULE_hasXRoads = 86;
JSettlersParser.RULE_hasStockRoadAmount = 87;
JSettlersParser.RULE_resourceSet = 88;
JSettlersParser.RULE_resource = 89;
JSettlersParser.RULE_sheep = 90;
JSettlersParser.RULE_timber = 91;
JSettlersParser.RULE_wheat = 92;
JSettlersParser.RULE_ore = 93;
JSettlersParser.RULE_brick = 94;
JSettlersParser.RULE_unknown = 95;
JSettlersParser.RULE_piece = 96;
JSettlersParser.RULE_settlement = 97;
JSettlersParser.RULE_city = 98;
JSettlersParser.RULE_ship = 99;
JSettlersParser.RULE_road = 100;
JSettlersParser.RULE_devCard = 101;
JSettlersParser.RULE_soldier = 102;
JSettlersParser.RULE_monopoly = 103;
JSettlersParser.RULE_roadBuilding = 104;
JSettlersParser.RULE_victoryPoint = 105;
JSettlersParser.RULE_yearOfPlenty = 106;
JSettlersParser.RULE_port = 107;
JSettlersParser.RULE_portPrefix = 108;
JSettlersParser.RULE_port31 = 109;
JSettlersParser.RULE_port41 = 110;
JSettlersParser.RULE_brickPort = 111;
JSettlersParser.RULE_wheatPort = 112;
JSettlersParser.RULE_timberPort = 113;
JSettlersParser.RULE_orePort = 114;
JSettlersParser.RULE_sheepPort = 115;
JSettlersParser.RULE_hex = 116;
JSettlersParser.RULE_pasture = 117;
JSettlersParser.RULE_forest = 118;
JSettlersParser.RULE_mountain = 119;
JSettlersParser.RULE_river = 120;
JSettlersParser.RULE_field = 121;
JSettlersParser.RULE_sea = 122;
JSettlersParser.RULE_none = 123;
JSettlersParser.RULE_desert = 124;

function AtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JSettlersParser.RULE_at;
    return this;
}

AtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AtContext.prototype.constructor = AtContext;


AtContext.prototype.enterRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.enterAt(this);
	}
};

AtContext.prototype.exitRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.exitAt(this);
	}
};




JSettlersParser.AtContext = AtContext;

JSettlersParser.prototype.at = function() {

    var localctx = new AtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 0, JSettlersParser.RULE_at);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 250;
        _la = this._input.LA(1);
        if(!(_la===JSettlersParser.T__0 || _la===JSettlersParser.T__1)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ScriptContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JSettlersParser.RULE_script;
    return this;
}

ScriptContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ScriptContext.prototype.constructor = ScriptContext;

ScriptContext.prototype.game = function() {
    return this.getTypedRuleContext(GameContext,0);
};

ScriptContext.prototype.placements = function() {
    return this.getTypedRuleContext(PlacementsContext,0);
};

ScriptContext.prototype.turns = function() {
    return this.getTypedRuleContext(TurnsContext,0);
};

ScriptContext.prototype.EOF = function() {
    return this.getToken(JSettlersParser.EOF, 0);
};

ScriptContext.prototype.enterRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.enterScript(this);
	}
};

ScriptContext.prototype.exitRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.exitScript(this);
	}
};




JSettlersParser.ScriptContext = ScriptContext;

JSettlersParser.prototype.script = function() {

    var localctx = new ScriptContext(this, this._ctx, this.state);
    this.enterRule(localctx, 2, JSettlersParser.RULE_script);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 252;
        this.game();
        this.state = 253;
        this.placements();
        this.state = 254;
        this.turns();
        this.state = 257;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,0,this._ctx);
        if(la_===1) {
            this.state = 256;
            this.match(JSettlersParser.EOF);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function GameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JSettlersParser.RULE_game;
    return this;
}

GameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GameContext.prototype.constructor = GameContext;

GameContext.prototype.NL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(JSettlersParser.NL);
    } else {
        return this.getToken(JSettlersParser.NL, i);
    }
};


GameContext.prototype.gameOptions = function() {
    return this.getTypedRuleContext(GameOptionsContext,0);
};

GameContext.prototype.board = function() {
    return this.getTypedRuleContext(BoardContext,0);
};

GameContext.prototype.players = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PlayersContext);
    } else {
        return this.getTypedRuleContext(PlayersContext,i);
    }
};

GameContext.prototype.enterRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.enterGame(this);
	}
};

GameContext.prototype.exitRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.exitGame(this);
	}
};




JSettlersParser.GameContext = GameContext;

JSettlersParser.prototype.game = function() {

    var localctx = new GameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 4, JSettlersParser.RULE_game);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 259;
        this.match(JSettlersParser.T__2);
        this.state = 260;
        this.match(JSettlersParser.NL);
        this.state = 264;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,1,this._ctx);
        if(la_===1) {
            this.state = 261;
            this.gameOptions();
            this.state = 262;
            this.match(JSettlersParser.NL);

        }
        this.state = 269;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,2,this._ctx);
        if(la_===1) {
            this.state = 266;
            this.board();
            this.state = 267;
            this.match(JSettlersParser.NL);

        }
        this.state = 274; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 271;
            this.players();
            this.state = 272;
            this.match(JSettlersParser.NL);
            this.state = 276; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===JSettlersParser.INDENT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function GameOptionsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JSettlersParser.RULE_gameOptions;
    return this;
}

GameOptionsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GameOptionsContext.prototype.constructor = GameOptionsContext;

GameOptionsContext.prototype.INDENT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(JSettlersParser.INDENT);
    } else {
        return this.getToken(JSettlersParser.INDENT, i);
    }
};


GameOptionsContext.prototype.NL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(JSettlersParser.NL);
    } else {
        return this.getToken(JSettlersParser.NL, i);
    }
};


GameOptionsContext.prototype.gameOption = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(GameOptionContext);
    } else {
        return this.getTypedRuleContext(GameOptionContext,i);
    }
};

GameOptionsContext.prototype.enterRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.enterGameOptions(this);
	}
};

GameOptionsContext.prototype.exitRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.exitGameOptions(this);
	}
};




JSettlersParser.GameOptionsContext = GameOptionsContext;

JSettlersParser.prototype.gameOptions = function() {

    var localctx = new GameOptionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 6, JSettlersParser.RULE_gameOptions);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 278;
        this.match(JSettlersParser.INDENT);
        this.state = 279;
        this.match(JSettlersParser.T__3);
        this.state = 280;
        this.match(JSettlersParser.NL);
        this.state = 288;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===JSettlersParser.INDENT) {
            this.state = 281;
            this.match(JSettlersParser.INDENT);
            this.state = 282;
            this.match(JSettlersParser.INDENT);
            this.state = 283;
            this.gameOption();
            this.state = 284;
            this.match(JSettlersParser.NL);
            this.state = 290;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function GameOptionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JSettlersParser.RULE_gameOption;
    return this;
}

GameOptionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GameOptionContext.prototype.constructor = GameOptionContext;

GameOptionContext.prototype.roads = function() {
    return this.getTypedRuleContext(RoadsContext,0);
};

GameOptionContext.prototype.ships = function() {
    return this.getTypedRuleContext(ShipsContext,0);
};

GameOptionContext.prototype.cities = function() {
    return this.getTypedRuleContext(CitiesContext,0);
};

GameOptionContext.prototype.settlements = function() {
    return this.getTypedRuleContext(SettlementsContext,0);
};

GameOptionContext.prototype.pirate = function() {
    return this.getTypedRuleContext(PirateContext,0);
};

GameOptionContext.prototype.board = function() {
    return this.getTypedRuleContext(BoardContext,0);
};

GameOptionContext.prototype.robber = function() {
    return this.getTypedRuleContext(RobberContext,0);
};

GameOptionContext.prototype.placementSequence = function() {
    return this.getTypedRuleContext(PlacementSequenceContext,0);
};

GameOptionContext.prototype.enterRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.enterGameOption(this);
	}
};

GameOptionContext.prototype.exitRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.exitGameOption(this);
	}
};




JSettlersParser.GameOptionContext = GameOptionContext;

JSettlersParser.prototype.gameOption = function() {

    var localctx = new GameOptionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 8, JSettlersParser.RULE_gameOption);
    try {
        this.state = 299;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case JSettlersParser.T__4:
            this.enterOuterAlt(localctx, 1);
            this.state = 291;
            this.roads();
            break;
        case JSettlersParser.T__5:
            this.enterOuterAlt(localctx, 2);
            this.state = 292;
            this.ships();
            break;
        case JSettlersParser.T__6:
            this.enterOuterAlt(localctx, 3);
            this.state = 293;
            this.cities();
            break;
        case JSettlersParser.T__7:
            this.enterOuterAlt(localctx, 4);
            this.state = 294;
            this.settlements();
            break;
        case JSettlersParser.T__9:
            this.enterOuterAlt(localctx, 5);
            this.state = 295;
            this.pirate();
            break;
        case JSettlersParser.INDENT:
            this.enterOuterAlt(localctx, 6);
            this.state = 296;
            this.board();
            break;
        case JSettlersParser.T__8:
            this.enterOuterAlt(localctx, 7);
            this.state = 297;
            this.robber();
            break;
        case JSettlersParser.T__10:
        case JSettlersParser.T__11:
        case JSettlersParser.T__12:
            this.enterOuterAlt(localctx, 8);
            this.state = 298;
            this.placementSequence();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function RoadsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JSettlersParser.RULE_roads;
    return this;
}

RoadsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RoadsContext.prototype.constructor = RoadsContext;

RoadsContext.prototype.SPACE = function() {
    return this.getToken(JSettlersParser.SPACE, 0);
};

RoadsContext.prototype.NUMBER = function() {
    return this.getToken(JSettlersParser.NUMBER, 0);
};

RoadsContext.prototype.enterRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.enterRoads(this);
	}
};

RoadsContext.prototype.exitRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.exitRoads(this);
	}
};




JSettlersParser.RoadsContext = RoadsContext;

JSettlersParser.prototype.roads = function() {

    var localctx = new RoadsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 10, JSettlersParser.RULE_roads);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 301;
        this.match(JSettlersParser.T__4);
        this.state = 302;
        this.match(JSettlersParser.SPACE);
        this.state = 303;
        this.match(JSettlersParser.NUMBER);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ShipsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JSettlersParser.RULE_ships;
    return this;
}

ShipsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ShipsContext.prototype.constructor = ShipsContext;

ShipsContext.prototype.SPACE = function() {
    return this.getToken(JSettlersParser.SPACE, 0);
};

ShipsContext.prototype.NUMBER = function() {
    return this.getToken(JSettlersParser.NUMBER, 0);
};

ShipsContext.prototype.enterRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.enterShips(this);
	}
};

ShipsContext.prototype.exitRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.exitShips(this);
	}
};




JSettlersParser.ShipsContext = ShipsContext;

JSettlersParser.prototype.ships = function() {

    var localctx = new ShipsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 12, JSettlersParser.RULE_ships);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 305;
        this.match(JSettlersParser.T__5);
        this.state = 306;
        this.match(JSettlersParser.SPACE);
        this.state = 307;
        this.match(JSettlersParser.NUMBER);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CitiesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JSettlersParser.RULE_cities;
    return this;
}

CitiesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CitiesContext.prototype.constructor = CitiesContext;

CitiesContext.prototype.SPACE = function() {
    return this.getToken(JSettlersParser.SPACE, 0);
};

CitiesContext.prototype.NUMBER = function() {
    return this.getToken(JSettlersParser.NUMBER, 0);
};

CitiesContext.prototype.enterRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.enterCities(this);
	}
};

CitiesContext.prototype.exitRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.exitCities(this);
	}
};




JSettlersParser.CitiesContext = CitiesContext;

JSettlersParser.prototype.cities = function() {

    var localctx = new CitiesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 14, JSettlersParser.RULE_cities);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 309;
        this.match(JSettlersParser.T__6);
        this.state = 310;
        this.match(JSettlersParser.SPACE);
        this.state = 311;
        this.match(JSettlersParser.NUMBER);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SettlementsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JSettlersParser.RULE_settlements;
    return this;
}

SettlementsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SettlementsContext.prototype.constructor = SettlementsContext;

SettlementsContext.prototype.SPACE = function() {
    return this.getToken(JSettlersParser.SPACE, 0);
};

SettlementsContext.prototype.NUMBER = function() {
    return this.getToken(JSettlersParser.NUMBER, 0);
};

SettlementsContext.prototype.enterRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.enterSettlements(this);
	}
};

SettlementsContext.prototype.exitRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.exitSettlements(this);
	}
};




JSettlersParser.SettlementsContext = SettlementsContext;

JSettlersParser.prototype.settlements = function() {

    var localctx = new SettlementsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 16, JSettlersParser.RULE_settlements);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 313;
        this.match(JSettlersParser.T__7);
        this.state = 314;
        this.match(JSettlersParser.SPACE);
        this.state = 315;
        this.match(JSettlersParser.NUMBER);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function RobberContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JSettlersParser.RULE_robber;
    return this;
}

RobberContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RobberContext.prototype.constructor = RobberContext;

RobberContext.prototype.SPACE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(JSettlersParser.SPACE);
    } else {
        return this.getToken(JSettlersParser.SPACE, i);
    }
};


RobberContext.prototype.at = function() {
    return this.getTypedRuleContext(AtContext,0);
};

RobberContext.prototype.location = function() {
    return this.getTypedRuleContext(LocationContext,0);
};

RobberContext.prototype.enterRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.enterRobber(this);
	}
};

RobberContext.prototype.exitRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.exitRobber(this);
	}
};




JSettlersParser.RobberContext = RobberContext;

JSettlersParser.prototype.robber = function() {

    var localctx = new RobberContext(this, this._ctx, this.state);
    this.enterRule(localctx, 18, JSettlersParser.RULE_robber);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 317;
        this.match(JSettlersParser.T__8);
        this.state = 320;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,6,this._ctx);
        if(la_===1) {
            this.state = 318;
            this.match(JSettlersParser.SPACE);
            this.state = 319;
            this.at();

        }
        this.state = 324;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,7,this._ctx);
        if(la_===1) {
            this.state = 322;
            this.match(JSettlersParser.SPACE);
            this.state = 323;
            this.location();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PirateContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JSettlersParser.RULE_pirate;
    return this;
}

PirateContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PirateContext.prototype.constructor = PirateContext;

PirateContext.prototype.SPACE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(JSettlersParser.SPACE);
    } else {
        return this.getToken(JSettlersParser.SPACE, i);
    }
};


PirateContext.prototype.at = function() {
    return this.getTypedRuleContext(AtContext,0);
};

PirateContext.prototype.location = function() {
    return this.getTypedRuleContext(LocationContext,0);
};

PirateContext.prototype.enterRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.enterPirate(this);
	}
};

PirateContext.prototype.exitRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.exitPirate(this);
	}
};




JSettlersParser.PirateContext = PirateContext;

JSettlersParser.prototype.pirate = function() {

    var localctx = new PirateContext(this, this._ctx, this.state);
    this.enterRule(localctx, 20, JSettlersParser.RULE_pirate);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 326;
        this.match(JSettlersParser.T__9);
        this.state = 329;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,8,this._ctx);
        if(la_===1) {
            this.state = 327;
            this.match(JSettlersParser.SPACE);
            this.state = 328;
            this.at();

        }
        this.state = 333;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===JSettlersParser.SPACE) {
            this.state = 331;
            this.match(JSettlersParser.SPACE);
            this.state = 332;
            this.location();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PlacementSequenceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JSettlersParser.RULE_placementSequence;
    return this;
}

PlacementSequenceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PlacementSequenceContext.prototype.constructor = PlacementSequenceContext;


PlacementSequenceContext.prototype.enterRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.enterPlacementSequence(this);
	}
};

PlacementSequenceContext.prototype.exitRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.exitPlacementSequence(this);
	}
};




JSettlersParser.PlacementSequenceContext = PlacementSequenceContext;

JSettlersParser.prototype.placementSequence = function() {

    var localctx = new PlacementSequenceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 22, JSettlersParser.RULE_placementSequence);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 335;
        _la = this._input.LA(1);
        if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << JSettlersParser.T__10) | (1 << JSettlersParser.T__11) | (1 << JSettlersParser.T__12))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BoardContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JSettlersParser.RULE_board;
    return this;
}

BoardContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BoardContext.prototype.constructor = BoardContext;

BoardContext.prototype.INDENT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(JSettlersParser.INDENT);
    } else {
        return this.getToken(JSettlersParser.INDENT, i);
    }
};


BoardContext.prototype.NL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(JSettlersParser.NL);
    } else {
        return this.getToken(JSettlersParser.NL, i);
    }
};


BoardContext.prototype.boardOption = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BoardOptionContext);
    } else {
        return this.getTypedRuleContext(BoardOptionContext,i);
    }
};

BoardContext.prototype.enterRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.enterBoard(this);
	}
};

BoardContext.prototype.exitRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.exitBoard(this);
	}
};




JSettlersParser.BoardContext = BoardContext;

JSettlersParser.prototype.board = function() {

    var localctx = new BoardContext(this, this._ctx, this.state);
    this.enterRule(localctx, 24, JSettlersParser.RULE_board);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 337;
        this.match(JSettlersParser.INDENT);
        this.state = 338;
        this.match(JSettlersParser.T__13);
        this.state = 339;
        this.match(JSettlersParser.NL);
        this.state = 347;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===JSettlersParser.INDENT) {
            this.state = 340;
            this.match(JSettlersParser.INDENT);
            this.state = 341;
            this.match(JSettlersParser.INDENT);
            this.state = 342;
            this.boardOption();
            this.state = 343;
            this.match(JSettlersParser.NL);
            this.state = 349;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BoardOptionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JSettlersParser.RULE_boardOption;
    return this;
}

BoardOptionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BoardOptionContext.prototype.constructor = BoardOptionContext;

BoardOptionContext.prototype.layout2D = function() {
    return this.getTypedRuleContext(Layout2DContext,0);
};

BoardOptionContext.prototype.hexSetup = function() {
    return this.getTypedRuleContext(HexSetupContext,0);
};

BoardOptionContext.prototype.locationSetup = function() {
    return this.getTypedRuleContext(LocationSetupContext,0);
};

BoardOptionContext.prototype.chitSetup = function() {
    return this.getTypedRuleContext(ChitSetupContext,0);
};

BoardOptionContext.prototype.portsSetup = function() {
    return this.getTypedRuleContext(PortsSetupContext,0);
};

BoardOptionContext.prototype.enterRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.enterBoardOption(this);
	}
};

BoardOptionContext.prototype.exitRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.exitBoardOption(this);
	}
};




JSettlersParser.BoardOptionContext = BoardOptionContext;

JSettlersParser.prototype.boardOption = function() {

    var localctx = new BoardOptionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 26, JSettlersParser.RULE_boardOption);
    try {
        this.state = 355;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case JSettlersParser.T__14:
            this.enterOuterAlt(localctx, 1);
            this.state = 350;
            this.layout2D();
            break;
        case JSettlersParser.T__21:
            this.enterOuterAlt(localctx, 2);
            this.state = 351;
            this.hexSetup();
            break;
        case JSettlersParser.T__22:
            this.enterOuterAlt(localctx, 3);
            this.state = 352;
            this.locationSetup();
            break;
        case JSettlersParser.T__24:
            this.enterOuterAlt(localctx, 4);
            this.state = 353;
            this.chitSetup();
            break;
        case JSettlersParser.T__25:
            this.enterOuterAlt(localctx, 5);
            this.state = 354;
            this.portsSetup();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Layout2DContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JSettlersParser.RULE_layout2D;
    return this;
}

Layout2DContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Layout2DContext.prototype.constructor = Layout2DContext;

Layout2DContext.prototype.SPACE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(JSettlersParser.SPACE);
    } else {
        return this.getToken(JSettlersParser.SPACE, i);
    }
};


Layout2DContext.prototype.orientation = function() {
    return this.getTypedRuleContext(OrientationContext,0);
};

Layout2DContext.prototype.oddEven = function() {
    return this.getTypedRuleContext(OddEvenContext,0);
};

Layout2DContext.prototype.enterRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.enterLayout2D(this);
	}
};

Layout2DContext.prototype.exitRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.exitLayout2D(this);
	}
};




JSettlersParser.Layout2DContext = Layout2DContext;

JSettlersParser.prototype.layout2D = function() {

    var localctx = new Layout2DContext(this, this._ctx, this.state);
    this.enterRule(localctx, 28, JSettlersParser.RULE_layout2D);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 357;
        this.match(JSettlersParser.T__14);
        this.state = 358;
        this.match(JSettlersParser.SPACE);
        this.state = 359;
        this.orientation();
        this.state = 360;
        this.match(JSettlersParser.SPACE);
        this.state = 361;
        this.oddEven();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LocationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JSettlersParser.RULE_location;
    return this;
}

LocationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LocationContext.prototype.constructor = LocationContext;

LocationContext.prototype.locationXyz = function() {
    return this.getTypedRuleContext(LocationXyzContext,0);
};

LocationContext.prototype.location2D = function() {
    return this.getTypedRuleContext(Location2DContext,0);
};

LocationContext.prototype.locationId = function() {
    return this.getTypedRuleContext(LocationIdContext,0);
};

LocationContext.prototype.enterRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.enterLocation(this);
	}
};

LocationContext.prototype.exitRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.exitLocation(this);
	}
};




JSettlersParser.LocationContext = LocationContext;

JSettlersParser.prototype.location = function() {

    var localctx = new LocationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 30, JSettlersParser.RULE_location);
    try {
        this.state = 366;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,12,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 363;
            this.locationXyz();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 364;
            this.location2D();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 365;
            this.locationId();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function XContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JSettlersParser.RULE_x;
    return this;
}

XContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
XContext.prototype.constructor = XContext;

XContext.prototype.NUMBER = function() {
    return this.getToken(JSettlersParser.NUMBER, 0);
};

XContext.prototype.enterRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.enterX(this);
	}
};

XContext.prototype.exitRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.exitX(this);
	}
};




JSettlersParser.XContext = XContext;

JSettlersParser.prototype.x = function() {

    var localctx = new XContext(this, this._ctx, this.state);
    this.enterRule(localctx, 32, JSettlersParser.RULE_x);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 368;
        this.match(JSettlersParser.NUMBER);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function YContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JSettlersParser.RULE_y;
    return this;
}

YContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
YContext.prototype.constructor = YContext;

YContext.prototype.NUMBER = function() {
    return this.getToken(JSettlersParser.NUMBER, 0);
};

YContext.prototype.enterRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.enterY(this);
	}
};

YContext.prototype.exitRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.exitY(this);
	}
};




JSettlersParser.YContext = YContext;

JSettlersParser.prototype.y = function() {

    var localctx = new YContext(this, this._ctx, this.state);
    this.enterRule(localctx, 34, JSettlersParser.RULE_y);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 370;
        this.match(JSettlersParser.NUMBER);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ZContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JSettlersParser.RULE_z;
    return this;
}

ZContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ZContext.prototype.constructor = ZContext;

ZContext.prototype.NUMBER = function() {
    return this.getToken(JSettlersParser.NUMBER, 0);
};

ZContext.prototype.enterRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.enterZ(this);
	}
};

ZContext.prototype.exitRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.exitZ(this);
	}
};




JSettlersParser.ZContext = ZContext;

JSettlersParser.prototype.z = function() {

    var localctx = new ZContext(this, this._ctx, this.state);
    this.enterRule(localctx, 36, JSettlersParser.RULE_z);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 372;
        this.match(JSettlersParser.NUMBER);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LocationXyzContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JSettlersParser.RULE_locationXyz;
    return this;
}

LocationXyzContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LocationXyzContext.prototype.constructor = LocationXyzContext;

LocationXyzContext.prototype.x = function() {
    return this.getTypedRuleContext(XContext,0);
};

LocationXyzContext.prototype.y = function() {
    return this.getTypedRuleContext(YContext,0);
};

LocationXyzContext.prototype.z = function() {
    return this.getTypedRuleContext(ZContext,0);
};

LocationXyzContext.prototype.enterRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.enterLocationXyz(this);
	}
};

LocationXyzContext.prototype.exitRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.exitLocationXyz(this);
	}
};




JSettlersParser.LocationXyzContext = LocationXyzContext;

JSettlersParser.prototype.locationXyz = function() {

    var localctx = new LocationXyzContext(this, this._ctx, this.state);
    this.enterRule(localctx, 38, JSettlersParser.RULE_locationXyz);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 374;
        this.x();
        this.state = 375;
        this.match(JSettlersParser.T__15);
        this.state = 376;
        this.y();
        this.state = 377;
        this.match(JSettlersParser.T__15);
        this.state = 378;
        this.z();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function RowContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JSettlersParser.RULE_row;
    return this;
}

RowContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RowContext.prototype.constructor = RowContext;

RowContext.prototype.NUMBER = function() {
    return this.getToken(JSettlersParser.NUMBER, 0);
};

RowContext.prototype.enterRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.enterRow(this);
	}
};

RowContext.prototype.exitRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.exitRow(this);
	}
};




JSettlersParser.RowContext = RowContext;

JSettlersParser.prototype.row = function() {

    var localctx = new RowContext(this, this._ctx, this.state);
    this.enterRule(localctx, 40, JSettlersParser.RULE_row);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 380;
        this.match(JSettlersParser.NUMBER);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ColumnContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JSettlersParser.RULE_column;
    return this;
}

ColumnContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ColumnContext.prototype.constructor = ColumnContext;

ColumnContext.prototype.NUMBER = function() {
    return this.getToken(JSettlersParser.NUMBER, 0);
};

ColumnContext.prototype.enterRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.enterColumn(this);
	}
};

ColumnContext.prototype.exitRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.exitColumn(this);
	}
};




JSettlersParser.ColumnContext = ColumnContext;

JSettlersParser.prototype.column = function() {

    var localctx = new ColumnContext(this, this._ctx, this.state);
    this.enterRule(localctx, 42, JSettlersParser.RULE_column);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 382;
        this.match(JSettlersParser.NUMBER);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Location2DContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JSettlersParser.RULE_location2D;
    return this;
}

Location2DContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Location2DContext.prototype.constructor = Location2DContext;

Location2DContext.prototype.row = function() {
    return this.getTypedRuleContext(RowContext,0);
};

Location2DContext.prototype.column = function() {
    return this.getTypedRuleContext(ColumnContext,0);
};

Location2DContext.prototype.enterRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.enterLocation2D(this);
	}
};

Location2DContext.prototype.exitRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.exitLocation2D(this);
	}
};




JSettlersParser.Location2DContext = Location2DContext;

JSettlersParser.prototype.location2D = function() {

    var localctx = new Location2DContext(this, this._ctx, this.state);
    this.enterRule(localctx, 44, JSettlersParser.RULE_location2D);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 384;
        this.row();
        this.state = 385;
        this.match(JSettlersParser.T__15);
        this.state = 386;
        this.column();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LocationIdContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JSettlersParser.RULE_locationId;
    return this;
}

LocationIdContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LocationIdContext.prototype.constructor = LocationIdContext;

LocationIdContext.prototype.NUMBER = function() {
    return this.getToken(JSettlersParser.NUMBER, 0);
};

LocationIdContext.prototype.enterRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.enterLocationId(this);
	}
};

LocationIdContext.prototype.exitRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.exitLocationId(this);
	}
};




JSettlersParser.LocationIdContext = LocationIdContext;

JSettlersParser.prototype.locationId = function() {

    var localctx = new LocationIdContext(this, this._ctx, this.state);
    this.enterRule(localctx, 46, JSettlersParser.RULE_locationId);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 388;
        this.match(JSettlersParser.NUMBER);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OrientationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JSettlersParser.RULE_orientation;
    return this;
}

OrientationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OrientationContext.prototype.constructor = OrientationContext;

OrientationContext.prototype.pointy = function() {
    return this.getTypedRuleContext(PointyContext,0);
};

OrientationContext.prototype.flat = function() {
    return this.getTypedRuleContext(FlatContext,0);
};

OrientationContext.prototype.enterRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.enterOrientation(this);
	}
};

OrientationContext.prototype.exitRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.exitOrientation(this);
	}
};




JSettlersParser.OrientationContext = OrientationContext;

JSettlersParser.prototype.orientation = function() {

    var localctx = new OrientationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 48, JSettlersParser.RULE_orientation);
    try {
        this.state = 392;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case JSettlersParser.T__16:
        case JSettlersParser.U_POINTY:
            this.enterOuterAlt(localctx, 1);
            this.state = 390;
            this.pointy();
            break;
        case JSettlersParser.T__17:
        case JSettlersParser.U_FLAT:
            this.enterOuterAlt(localctx, 2);
            this.state = 391;
            this.flat();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PointyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JSettlersParser.RULE_pointy;
    return this;
}

PointyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PointyContext.prototype.constructor = PointyContext;

PointyContext.prototype.U_POINTY = function() {
    return this.getToken(JSettlersParser.U_POINTY, 0);
};

PointyContext.prototype.enterRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.enterPointy(this);
	}
};

PointyContext.prototype.exitRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.exitPointy(this);
	}
};




JSettlersParser.PointyContext = PointyContext;

JSettlersParser.prototype.pointy = function() {

    var localctx = new PointyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 50, JSettlersParser.RULE_pointy);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 394;
        _la = this._input.LA(1);
        if(!(_la===JSettlersParser.T__16 || _la===JSettlersParser.U_POINTY)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FlatContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JSettlersParser.RULE_flat;
    return this;
}

FlatContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FlatContext.prototype.constructor = FlatContext;

FlatContext.prototype.U_FLAT = function() {
    return this.getToken(JSettlersParser.U_FLAT, 0);
};

FlatContext.prototype.enterRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.enterFlat(this);
	}
};

FlatContext.prototype.exitRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.exitFlat(this);
	}
};




JSettlersParser.FlatContext = FlatContext;

JSettlersParser.prototype.flat = function() {

    var localctx = new FlatContext(this, this._ctx, this.state);
    this.enterRule(localctx, 52, JSettlersParser.RULE_flat);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 396;
        _la = this._input.LA(1);
        if(!(_la===JSettlersParser.T__17 || _la===JSettlersParser.U_FLAT)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OddContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JSettlersParser.RULE_odd;
    return this;
}

OddContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OddContext.prototype.constructor = OddContext;


OddContext.prototype.enterRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.enterOdd(this);
	}
};

OddContext.prototype.exitRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.exitOdd(this);
	}
};




JSettlersParser.OddContext = OddContext;

JSettlersParser.prototype.odd = function() {

    var localctx = new OddContext(this, this._ctx, this.state);
    this.enterRule(localctx, 54, JSettlersParser.RULE_odd);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 398;
        this.match(JSettlersParser.T__18);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EvenContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JSettlersParser.RULE_even;
    return this;
}

EvenContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EvenContext.prototype.constructor = EvenContext;


EvenContext.prototype.enterRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.enterEven(this);
	}
};

EvenContext.prototype.exitRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.exitEven(this);
	}
};




JSettlersParser.EvenContext = EvenContext;

JSettlersParser.prototype.even = function() {

    var localctx = new EvenContext(this, this._ctx, this.state);
    this.enterRule(localctx, 56, JSettlersParser.RULE_even);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 400;
        this.match(JSettlersParser.T__19);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OddEvenContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JSettlersParser.RULE_oddEven;
    return this;
}

OddEvenContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OddEvenContext.prototype.constructor = OddEvenContext;

OddEvenContext.prototype.odd = function() {
    return this.getTypedRuleContext(OddContext,0);
};

OddEvenContext.prototype.even = function() {
    return this.getTypedRuleContext(EvenContext,0);
};

OddEvenContext.prototype.enterRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.enterOddEven(this);
	}
};

OddEvenContext.prototype.exitRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.exitOddEven(this);
	}
};




JSettlersParser.OddEvenContext = OddEvenContext;

JSettlersParser.prototype.oddEven = function() {

    var localctx = new OddEvenContext(this, this._ctx, this.state);
    this.enterRule(localctx, 58, JSettlersParser.RULE_oddEven);
    try {
        this.state = 404;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case JSettlersParser.T__18:
            this.enterOuterAlt(localctx, 1);
            this.state = 402;
            this.odd();
            break;
        case JSettlersParser.T__19:
            this.enterOuterAlt(localctx, 2);
            this.state = 403;
            this.even();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EdgeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JSettlersParser.RULE_edge;
    return this;
}

EdgeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EdgeContext.prototype.constructor = EdgeContext;

EdgeContext.prototype.location = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(LocationContext);
    } else {
        return this.getTypedRuleContext(LocationContext,i);
    }
};

EdgeContext.prototype.enterRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.enterEdge(this);
	}
};

EdgeContext.prototype.exitRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.exitEdge(this);
	}
};




JSettlersParser.EdgeContext = EdgeContext;

JSettlersParser.prototype.edge = function() {

    var localctx = new EdgeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 60, JSettlersParser.RULE_edge);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 406;
        this.location();
        this.state = 407;
        this.match(JSettlersParser.T__20);
        this.state = 408;
        this.location();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function VertexContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JSettlersParser.RULE_vertex;
    return this;
}

VertexContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VertexContext.prototype.constructor = VertexContext;

VertexContext.prototype.location = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(LocationContext);
    } else {
        return this.getTypedRuleContext(LocationContext,i);
    }
};

VertexContext.prototype.VERTEXDOT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(JSettlersParser.VERTEXDOT);
    } else {
        return this.getToken(JSettlersParser.VERTEXDOT, i);
    }
};


VertexContext.prototype.enterRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.enterVertex(this);
	}
};

VertexContext.prototype.exitRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.exitVertex(this);
	}
};




JSettlersParser.VertexContext = VertexContext;

JSettlersParser.prototype.vertex = function() {

    var localctx = new VertexContext(this, this._ctx, this.state);
    this.enterRule(localctx, 62, JSettlersParser.RULE_vertex);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 410;
        this.location();
        this.state = 411;
        this.match(JSettlersParser.VERTEXDOT);
        this.state = 412;
        this.location();
        this.state = 413;
        this.match(JSettlersParser.VERTEXDOT);
        this.state = 414;
        this.location();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function HexSetupContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JSettlersParser.RULE_hexSetup;
    return this;
}

HexSetupContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
HexSetupContext.prototype.constructor = HexSetupContext;

HexSetupContext.prototype.NL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(JSettlersParser.NL);
    } else {
        return this.getToken(JSettlersParser.NL, i);
    }
};


HexSetupContext.prototype.INDENT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(JSettlersParser.INDENT);
    } else {
        return this.getToken(JSettlersParser.INDENT, i);
    }
};


HexSetupContext.prototype.hexRow = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(HexRowContext);
    } else {
        return this.getTypedRuleContext(HexRowContext,i);
    }
};

HexSetupContext.prototype.enterRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.enterHexSetup(this);
	}
};

HexSetupContext.prototype.exitRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.exitHexSetup(this);
	}
};




JSettlersParser.HexSetupContext = HexSetupContext;

JSettlersParser.prototype.hexSetup = function() {

    var localctx = new HexSetupContext(this, this._ctx, this.state);
    this.enterRule(localctx, 64, JSettlersParser.RULE_hexSetup);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 416;
        this.match(JSettlersParser.T__21);
        this.state = 417;
        this.match(JSettlersParser.NL);
        this.state = 426;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===JSettlersParser.INDENT) {
            this.state = 418;
            this.match(JSettlersParser.INDENT);
            this.state = 419;
            this.match(JSettlersParser.INDENT);
            this.state = 420;
            this.match(JSettlersParser.INDENT);
            this.state = 421;
            this.hexRow();
            this.state = 422;
            this.match(JSettlersParser.NL);
            this.state = 428;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function HexRowContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JSettlersParser.RULE_hexRow;
    return this;
}

HexRowContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
HexRowContext.prototype.constructor = HexRowContext;

HexRowContext.prototype.evenHexRow = function() {
    return this.getTypedRuleContext(EvenHexRowContext,0);
};

HexRowContext.prototype.oddHexRow = function() {
    return this.getTypedRuleContext(OddHexRowContext,0);
};

HexRowContext.prototype.enterRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.enterHexRow(this);
	}
};

HexRowContext.prototype.exitRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.exitHexRow(this);
	}
};




JSettlersParser.HexRowContext = HexRowContext;

JSettlersParser.prototype.hexRow = function() {

    var localctx = new HexRowContext(this, this._ctx, this.state);
    this.enterRule(localctx, 66, JSettlersParser.RULE_hexRow);
    try {
        this.state = 431;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case JSettlersParser.T__30:
        case JSettlersParser.T__64:
        case JSettlersParser.T__104:
        case JSettlersParser.T__105:
        case JSettlersParser.T__106:
        case JSettlersParser.T__107:
        case JSettlersParser.T__108:
        case JSettlersParser.T__109:
        case JSettlersParser.T__110:
        case JSettlersParser.T__111:
        case JSettlersParser.T__112:
        case JSettlersParser.T__113:
        case JSettlersParser.T__114:
        case JSettlersParser.T__115:
        case JSettlersParser.T__116:
        case JSettlersParser.T__117:
            this.enterOuterAlt(localctx, 1);
            this.state = 429;
            this.evenHexRow();
            break;
        case JSettlersParser.SPACE:
            this.enterOuterAlt(localctx, 2);
            this.state = 430;
            this.oddHexRow();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EvenHexRowContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JSettlersParser.RULE_evenHexRow;
    return this;
}

EvenHexRowContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EvenHexRowContext.prototype.constructor = EvenHexRowContext;

EvenHexRowContext.prototype.hex = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(HexContext);
    } else {
        return this.getTypedRuleContext(HexContext,i);
    }
};

EvenHexRowContext.prototype.SPACE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(JSettlersParser.SPACE);
    } else {
        return this.getToken(JSettlersParser.SPACE, i);
    }
};


EvenHexRowContext.prototype.enterRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.enterEvenHexRow(this);
	}
};

EvenHexRowContext.prototype.exitRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.exitEvenHexRow(this);
	}
};




JSettlersParser.EvenHexRowContext = EvenHexRowContext;

JSettlersParser.prototype.evenHexRow = function() {

    var localctx = new EvenHexRowContext(this, this._ctx, this.state);
    this.enterRule(localctx, 68, JSettlersParser.RULE_evenHexRow);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 433;
        this.hex();
        this.state = 436; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 434;
            this.match(JSettlersParser.SPACE);
            this.state = 435;
            this.hex();
            this.state = 438; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===JSettlersParser.SPACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OddHexRowContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JSettlersParser.RULE_oddHexRow;
    return this;
}

OddHexRowContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OddHexRowContext.prototype.constructor = OddHexRowContext;

OddHexRowContext.prototype.SPACE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(JSettlersParser.SPACE);
    } else {
        return this.getToken(JSettlersParser.SPACE, i);
    }
};


OddHexRowContext.prototype.hex = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(HexContext);
    } else {
        return this.getTypedRuleContext(HexContext,i);
    }
};

OddHexRowContext.prototype.enterRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.enterOddHexRow(this);
	}
};

OddHexRowContext.prototype.exitRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.exitOddHexRow(this);
	}
};




JSettlersParser.OddHexRowContext = OddHexRowContext;

JSettlersParser.prototype.oddHexRow = function() {

    var localctx = new OddHexRowContext(this, this._ctx, this.state);
    this.enterRule(localctx, 70, JSettlersParser.RULE_oddHexRow);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 442; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 440;
            this.match(JSettlersParser.SPACE);
            this.state = 441;
            this.hex();
            this.state = 444; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===JSettlersParser.SPACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LocationSetupContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JSettlersParser.RULE_locationSetup;
    return this;
}

LocationSetupContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LocationSetupContext.prototype.constructor = LocationSetupContext;

LocationSetupContext.prototype.NL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(JSettlersParser.NL);
    } else {
        return this.getToken(JSettlersParser.NL, i);
    }
};


LocationSetupContext.prototype.INDENT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(JSettlersParser.INDENT);
    } else {
        return this.getToken(JSettlersParser.INDENT, i);
    }
};


LocationSetupContext.prototype.locationRow = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(LocationRowContext);
    } else {
        return this.getTypedRuleContext(LocationRowContext,i);
    }
};

LocationSetupContext.prototype.enterRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.enterLocationSetup(this);
	}
};

LocationSetupContext.prototype.exitRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.exitLocationSetup(this);
	}
};




JSettlersParser.LocationSetupContext = LocationSetupContext;

JSettlersParser.prototype.locationSetup = function() {

    var localctx = new LocationSetupContext(this, this._ctx, this.state);
    this.enterRule(localctx, 72, JSettlersParser.RULE_locationSetup);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 446;
        this.match(JSettlersParser.T__22);
        this.state = 447;
        this.match(JSettlersParser.NL);
        this.state = 456;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===JSettlersParser.INDENT) {
            this.state = 448;
            this.match(JSettlersParser.INDENT);
            this.state = 449;
            this.match(JSettlersParser.INDENT);
            this.state = 450;
            this.match(JSettlersParser.INDENT);
            this.state = 451;
            this.locationRow();
            this.state = 452;
            this.match(JSettlersParser.NL);
            this.state = 458;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LocationRowContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JSettlersParser.RULE_locationRow;
    return this;
}

LocationRowContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LocationRowContext.prototype.constructor = LocationRowContext;

LocationRowContext.prototype.evenLocationRow = function() {
    return this.getTypedRuleContext(EvenLocationRowContext,0);
};

LocationRowContext.prototype.oddLocationRow = function() {
    return this.getTypedRuleContext(OddLocationRowContext,0);
};

LocationRowContext.prototype.enterRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.enterLocationRow(this);
	}
};

LocationRowContext.prototype.exitRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.exitLocationRow(this);
	}
};




JSettlersParser.LocationRowContext = LocationRowContext;

JSettlersParser.prototype.locationRow = function() {

    var localctx = new LocationRowContext(this, this._ctx, this.state);
    this.enterRule(localctx, 74, JSettlersParser.RULE_locationRow);
    try {
        this.state = 461;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case JSettlersParser.SPACE:
            this.enterOuterAlt(localctx, 1);
            this.state = 459;
            this.evenLocationRow();
            break;
        case JSettlersParser.T__23:
        case JSettlersParser.NUMBER:
            this.enterOuterAlt(localctx, 2);
            this.state = 460;
            this.oddLocationRow();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NoLocationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JSettlersParser.RULE_noLocation;
    return this;
}

NoLocationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NoLocationContext.prototype.constructor = NoLocationContext;


NoLocationContext.prototype.enterRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.enterNoLocation(this);
	}
};

NoLocationContext.prototype.exitRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.exitNoLocation(this);
	}
};




JSettlersParser.NoLocationContext = NoLocationContext;

JSettlersParser.prototype.noLocation = function() {

    var localctx = new NoLocationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 76, JSettlersParser.RULE_noLocation);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 463;
        this.match(JSettlersParser.T__23);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LocationAssignmentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JSettlersParser.RULE_locationAssignment;
    return this;
}

LocationAssignmentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LocationAssignmentContext.prototype.constructor = LocationAssignmentContext;

LocationAssignmentContext.prototype.NUMBER = function() {
    return this.getToken(JSettlersParser.NUMBER, 0);
};

LocationAssignmentContext.prototype.noLocation = function() {
    return this.getTypedRuleContext(NoLocationContext,0);
};

LocationAssignmentContext.prototype.enterRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.enterLocationAssignment(this);
	}
};

LocationAssignmentContext.prototype.exitRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.exitLocationAssignment(this);
	}
};




JSettlersParser.LocationAssignmentContext = LocationAssignmentContext;

JSettlersParser.prototype.locationAssignment = function() {

    var localctx = new LocationAssignmentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 78, JSettlersParser.RULE_locationAssignment);
    try {
        this.state = 467;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case JSettlersParser.NUMBER:
            this.enterOuterAlt(localctx, 1);
            this.state = 465;
            this.match(JSettlersParser.NUMBER);
            break;
        case JSettlersParser.T__23:
            this.enterOuterAlt(localctx, 2);
            this.state = 466;
            this.noLocation();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EvenLocationRowContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JSettlersParser.RULE_evenLocationRow;
    return this;
}

EvenLocationRowContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EvenLocationRowContext.prototype.constructor = EvenLocationRowContext;

EvenLocationRowContext.prototype.SPACE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(JSettlersParser.SPACE);
    } else {
        return this.getToken(JSettlersParser.SPACE, i);
    }
};


EvenLocationRowContext.prototype.locationAssignment = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(LocationAssignmentContext);
    } else {
        return this.getTypedRuleContext(LocationAssignmentContext,i);
    }
};

EvenLocationRowContext.prototype.enterRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.enterEvenLocationRow(this);
	}
};

EvenLocationRowContext.prototype.exitRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.exitEvenLocationRow(this);
	}
};




JSettlersParser.EvenLocationRowContext = EvenLocationRowContext;

JSettlersParser.prototype.evenLocationRow = function() {

    var localctx = new EvenLocationRowContext(this, this._ctx, this.state);
    this.enterRule(localctx, 80, JSettlersParser.RULE_evenLocationRow);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 469;
        this.match(JSettlersParser.SPACE);
        this.state = 470;
        this.match(JSettlersParser.SPACE);
        this.state = 481; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 471;
            this.locationAssignment();
            this.state = 473;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,22,this._ctx);
            if(la_===1) {
                this.state = 472;
                this.match(JSettlersParser.SPACE);

            }
            this.state = 476;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,23,this._ctx);
            if(la_===1) {
                this.state = 475;
                this.match(JSettlersParser.SPACE);

            }
            this.state = 479;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===JSettlersParser.SPACE) {
                this.state = 478;
                this.match(JSettlersParser.SPACE);
            }

            this.state = 483; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===JSettlersParser.T__23 || _la===JSettlersParser.NUMBER);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OddLocationRowContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JSettlersParser.RULE_oddLocationRow;
    return this;
}

OddLocationRowContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OddLocationRowContext.prototype.constructor = OddLocationRowContext;

OddLocationRowContext.prototype.locationAssignment = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(LocationAssignmentContext);
    } else {
        return this.getTypedRuleContext(LocationAssignmentContext,i);
    }
};

OddLocationRowContext.prototype.SPACE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(JSettlersParser.SPACE);
    } else {
        return this.getToken(JSettlersParser.SPACE, i);
    }
};


OddLocationRowContext.prototype.enterRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.enterOddLocationRow(this);
	}
};

OddLocationRowContext.prototype.exitRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.exitOddLocationRow(this);
	}
};




JSettlersParser.OddLocationRowContext = OddLocationRowContext;

JSettlersParser.prototype.oddLocationRow = function() {

    var localctx = new OddLocationRowContext(this, this._ctx, this.state);
    this.enterRule(localctx, 82, JSettlersParser.RULE_oddLocationRow);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 485;
        this.locationAssignment();
        this.state = 496; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 487;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,26,this._ctx);
            if(la_===1) {
                this.state = 486;
                this.match(JSettlersParser.SPACE);

            }
            this.state = 490;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,27,this._ctx);
            if(la_===1) {
                this.state = 489;
                this.match(JSettlersParser.SPACE);

            }
            this.state = 493;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===JSettlersParser.SPACE) {
                this.state = 492;
                this.match(JSettlersParser.SPACE);
            }

            this.state = 495;
            this.locationAssignment();
            this.state = 498; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===JSettlersParser.T__23 || _la===JSettlersParser.NUMBER || _la===JSettlersParser.SPACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ChitSetupContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JSettlersParser.RULE_chitSetup;
    return this;
}

ChitSetupContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ChitSetupContext.prototype.constructor = ChitSetupContext;

ChitSetupContext.prototype.NL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(JSettlersParser.NL);
    } else {
        return this.getToken(JSettlersParser.NL, i);
    }
};


ChitSetupContext.prototype.INDENT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(JSettlersParser.INDENT);
    } else {
        return this.getToken(JSettlersParser.INDENT, i);
    }
};


ChitSetupContext.prototype.chitRow = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ChitRowContext);
    } else {
        return this.getTypedRuleContext(ChitRowContext,i);
    }
};

ChitSetupContext.prototype.enterRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.enterChitSetup(this);
	}
};

ChitSetupContext.prototype.exitRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.exitChitSetup(this);
	}
};




JSettlersParser.ChitSetupContext = ChitSetupContext;

JSettlersParser.prototype.chitSetup = function() {

    var localctx = new ChitSetupContext(this, this._ctx, this.state);
    this.enterRule(localctx, 84, JSettlersParser.RULE_chitSetup);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 500;
        this.match(JSettlersParser.T__24);
        this.state = 501;
        this.match(JSettlersParser.NL);
        this.state = 510;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===JSettlersParser.INDENT) {
            this.state = 502;
            this.match(JSettlersParser.INDENT);
            this.state = 503;
            this.match(JSettlersParser.INDENT);
            this.state = 504;
            this.match(JSettlersParser.INDENT);
            this.state = 505;
            this.chitRow();
            this.state = 506;
            this.match(JSettlersParser.NL);
            this.state = 512;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ChitRowContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JSettlersParser.RULE_chitRow;
    return this;
}

ChitRowContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ChitRowContext.prototype.constructor = ChitRowContext;

ChitRowContext.prototype.evenChitRow = function() {
    return this.getTypedRuleContext(EvenChitRowContext,0);
};

ChitRowContext.prototype.oddChitRow = function() {
    return this.getTypedRuleContext(OddChitRowContext,0);
};

ChitRowContext.prototype.enterRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.enterChitRow(this);
	}
};

ChitRowContext.prototype.exitRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.exitChitRow(this);
	}
};




JSettlersParser.ChitRowContext = ChitRowContext;

JSettlersParser.prototype.chitRow = function() {

    var localctx = new ChitRowContext(this, this._ctx, this.state);
    this.enterRule(localctx, 86, JSettlersParser.RULE_chitRow);
    try {
        this.state = 515;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case JSettlersParser.SPACE:
            this.enterOuterAlt(localctx, 1);
            this.state = 513;
            this.evenChitRow();
            break;
        case JSettlersParser.T__23:
        case JSettlersParser.NUMBER:
            this.enterOuterAlt(localctx, 2);
            this.state = 514;
            this.oddChitRow();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NoChitContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JSettlersParser.RULE_noChit;
    return this;
}

NoChitContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NoChitContext.prototype.constructor = NoChitContext;


NoChitContext.prototype.enterRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.enterNoChit(this);
	}
};

NoChitContext.prototype.exitRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.exitNoChit(this);
	}
};




JSettlersParser.NoChitContext = NoChitContext;

JSettlersParser.prototype.noChit = function() {

    var localctx = new NoChitContext(this, this._ctx, this.state);
    this.enterRule(localctx, 88, JSettlersParser.RULE_noChit);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 517;
        this.match(JSettlersParser.T__23);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ChitAssignmentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JSettlersParser.RULE_chitAssignment;
    return this;
}

ChitAssignmentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ChitAssignmentContext.prototype.constructor = ChitAssignmentContext;

ChitAssignmentContext.prototype.NUMBER = function() {
    return this.getToken(JSettlersParser.NUMBER, 0);
};

ChitAssignmentContext.prototype.noChit = function() {
    return this.getTypedRuleContext(NoChitContext,0);
};

ChitAssignmentContext.prototype.enterRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.enterChitAssignment(this);
	}
};

ChitAssignmentContext.prototype.exitRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.exitChitAssignment(this);
	}
};




JSettlersParser.ChitAssignmentContext = ChitAssignmentContext;

JSettlersParser.prototype.chitAssignment = function() {

    var localctx = new ChitAssignmentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 90, JSettlersParser.RULE_chitAssignment);
    try {
        this.state = 521;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case JSettlersParser.NUMBER:
            this.enterOuterAlt(localctx, 1);
            this.state = 519;
            this.match(JSettlersParser.NUMBER);
            break;
        case JSettlersParser.T__23:
            this.enterOuterAlt(localctx, 2);
            this.state = 520;
            this.noChit();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EvenChitRowContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JSettlersParser.RULE_evenChitRow;
    return this;
}

EvenChitRowContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EvenChitRowContext.prototype.constructor = EvenChitRowContext;

EvenChitRowContext.prototype.SPACE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(JSettlersParser.SPACE);
    } else {
        return this.getToken(JSettlersParser.SPACE, i);
    }
};


EvenChitRowContext.prototype.chitAssignment = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ChitAssignmentContext);
    } else {
        return this.getTypedRuleContext(ChitAssignmentContext,i);
    }
};

EvenChitRowContext.prototype.enterRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.enterEvenChitRow(this);
	}
};

EvenChitRowContext.prototype.exitRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.exitEvenChitRow(this);
	}
};




JSettlersParser.EvenChitRowContext = EvenChitRowContext;

JSettlersParser.prototype.evenChitRow = function() {

    var localctx = new EvenChitRowContext(this, this._ctx, this.state);
    this.enterRule(localctx, 92, JSettlersParser.RULE_evenChitRow);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 523;
        this.match(JSettlersParser.SPACE);
        this.state = 524;
        this.match(JSettlersParser.SPACE);
        this.state = 535; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 525;
            this.chitAssignment();
            this.state = 527;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,33,this._ctx);
            if(la_===1) {
                this.state = 526;
                this.match(JSettlersParser.SPACE);

            }
            this.state = 530;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,34,this._ctx);
            if(la_===1) {
                this.state = 529;
                this.match(JSettlersParser.SPACE);

            }
            this.state = 533;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===JSettlersParser.SPACE) {
                this.state = 532;
                this.match(JSettlersParser.SPACE);
            }

            this.state = 537; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===JSettlersParser.T__23 || _la===JSettlersParser.NUMBER);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OddChitRowContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JSettlersParser.RULE_oddChitRow;
    return this;
}

OddChitRowContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OddChitRowContext.prototype.constructor = OddChitRowContext;

OddChitRowContext.prototype.chitAssignment = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ChitAssignmentContext);
    } else {
        return this.getTypedRuleContext(ChitAssignmentContext,i);
    }
};

OddChitRowContext.prototype.SPACE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(JSettlersParser.SPACE);
    } else {
        return this.getToken(JSettlersParser.SPACE, i);
    }
};


OddChitRowContext.prototype.enterRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.enterOddChitRow(this);
	}
};

OddChitRowContext.prototype.exitRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.exitOddChitRow(this);
	}
};




JSettlersParser.OddChitRowContext = OddChitRowContext;

JSettlersParser.prototype.oddChitRow = function() {

    var localctx = new OddChitRowContext(this, this._ctx, this.state);
    this.enterRule(localctx, 94, JSettlersParser.RULE_oddChitRow);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 539;
        this.chitAssignment();
        this.state = 550; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 541;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,37,this._ctx);
            if(la_===1) {
                this.state = 540;
                this.match(JSettlersParser.SPACE);

            }
            this.state = 544;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,38,this._ctx);
            if(la_===1) {
                this.state = 543;
                this.match(JSettlersParser.SPACE);

            }
            this.state = 547;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===JSettlersParser.SPACE) {
                this.state = 546;
                this.match(JSettlersParser.SPACE);
            }

            this.state = 549;
            this.chitAssignment();
            this.state = 552; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===JSettlersParser.T__23 || _la===JSettlersParser.NUMBER || _la===JSettlersParser.SPACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PortsSetupContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JSettlersParser.RULE_portsSetup;
    return this;
}

PortsSetupContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PortsSetupContext.prototype.constructor = PortsSetupContext;

PortsSetupContext.prototype.NL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(JSettlersParser.NL);
    } else {
        return this.getToken(JSettlersParser.NL, i);
    }
};


PortsSetupContext.prototype.INDENT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(JSettlersParser.INDENT);
    } else {
        return this.getToken(JSettlersParser.INDENT, i);
    }
};


PortsSetupContext.prototype.portAtEdge = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PortAtEdgeContext);
    } else {
        return this.getTypedRuleContext(PortAtEdgeContext,i);
    }
};

PortsSetupContext.prototype.enterRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.enterPortsSetup(this);
	}
};

PortsSetupContext.prototype.exitRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.exitPortsSetup(this);
	}
};




JSettlersParser.PortsSetupContext = PortsSetupContext;

JSettlersParser.prototype.portsSetup = function() {

    var localctx = new PortsSetupContext(this, this._ctx, this.state);
    this.enterRule(localctx, 96, JSettlersParser.RULE_portsSetup);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 554;
        this.match(JSettlersParser.T__25);
        this.state = 555;
        this.match(JSettlersParser.NL);
        this.state = 564;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===JSettlersParser.INDENT) {
            this.state = 556;
            this.match(JSettlersParser.INDENT);
            this.state = 557;
            this.match(JSettlersParser.INDENT);
            this.state = 558;
            this.match(JSettlersParser.INDENT);
            this.state = 559;
            this.portAtEdge();
            this.state = 560;
            this.match(JSettlersParser.NL);
            this.state = 566;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PortAtEdgeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JSettlersParser.RULE_portAtEdge;
    return this;
}

PortAtEdgeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PortAtEdgeContext.prototype.constructor = PortAtEdgeContext;

PortAtEdgeContext.prototype.port = function() {
    return this.getTypedRuleContext(PortContext,0);
};

PortAtEdgeContext.prototype.SPACE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(JSettlersParser.SPACE);
    } else {
        return this.getToken(JSettlersParser.SPACE, i);
    }
};


PortAtEdgeContext.prototype.at = function() {
    return this.getTypedRuleContext(AtContext,0);
};

PortAtEdgeContext.prototype.edge = function() {
    return this.getTypedRuleContext(EdgeContext,0);
};

PortAtEdgeContext.prototype.enterRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.enterPortAtEdge(this);
	}
};

PortAtEdgeContext.prototype.exitRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.exitPortAtEdge(this);
	}
};




JSettlersParser.PortAtEdgeContext = PortAtEdgeContext;

JSettlersParser.prototype.portAtEdge = function() {

    var localctx = new PortAtEdgeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 98, JSettlersParser.RULE_portAtEdge);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 567;
        this.port();
        this.state = 568;
        this.match(JSettlersParser.SPACE);
        this.state = 569;
        this.at();
        this.state = 570;
        this.match(JSettlersParser.SPACE);
        this.state = 571;
        this.edge();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PlayersContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JSettlersParser.RULE_players;
    return this;
}

PlayersContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PlayersContext.prototype.constructor = PlayersContext;

PlayersContext.prototype.INDENT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(JSettlersParser.INDENT);
    } else {
        return this.getToken(JSettlersParser.INDENT, i);
    }
};


PlayersContext.prototype.player = function() {
    return this.getTypedRuleContext(PlayerContext,0);
};

PlayersContext.prototype.NL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(JSettlersParser.NL);
    } else {
        return this.getToken(JSettlersParser.NL, i);
    }
};


PlayersContext.prototype.setupPlayerOption = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SetupPlayerOptionContext);
    } else {
        return this.getTypedRuleContext(SetupPlayerOptionContext,i);
    }
};

PlayersContext.prototype.enterRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.enterPlayers(this);
	}
};

PlayersContext.prototype.exitRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.exitPlayers(this);
	}
};




JSettlersParser.PlayersContext = PlayersContext;

JSettlersParser.prototype.players = function() {

    var localctx = new PlayersContext(this, this._ctx, this.state);
    this.enterRule(localctx, 100, JSettlersParser.RULE_players);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 573;
        this.match(JSettlersParser.INDENT);
        this.state = 574;
        this.player();
        this.state = 575;
        this.match(JSettlersParser.NL);
        this.state = 583;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===JSettlersParser.INDENT) {
            this.state = 576;
            this.match(JSettlersParser.INDENT);
            this.state = 577;
            this.match(JSettlersParser.INDENT);
            this.state = 578;
            this.setupPlayerOption();
            this.state = 579;
            this.match(JSettlersParser.NL);
            this.state = 585;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PlayerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JSettlersParser.RULE_player;
    return this;
}

PlayerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PlayerContext.prototype.constructor = PlayerContext;

PlayerContext.prototype.NUMBER = function() {
    return this.getToken(JSettlersParser.NUMBER, 0);
};

PlayerContext.prototype.server = function() {
    return this.getTypedRuleContext(ServerContext,0);
};

PlayerContext.prototype.client = function() {
    return this.getTypedRuleContext(ClientContext,0);
};

PlayerContext.prototype.enterRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.enterPlayer(this);
	}
};

PlayerContext.prototype.exitRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.exitPlayer(this);
	}
};




JSettlersParser.PlayerContext = PlayerContext;

JSettlersParser.prototype.player = function() {

    var localctx = new PlayerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 102, JSettlersParser.RULE_player);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 588;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
        case JSettlersParser.T__28:
        case JSettlersParser.T__29:
        	this.state = 586;
        	this.server();
        	break;
        case JSettlersParser.T__31:
        case JSettlersParser.T__32:
        	this.state = 587;
        	this.client();
        	break;
        case JSettlersParser.T__26:
        case JSettlersParser.T__27:
        	break;
        default:
        	break;
        }
        this.state = 590;
        _la = this._input.LA(1);
        if(!(_la===JSettlersParser.T__26 || _la===JSettlersParser.T__27)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 591;
        this.match(JSettlersParser.NUMBER);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ServerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JSettlersParser.RULE_server;
    return this;
}

ServerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ServerContext.prototype.constructor = ServerContext;


ServerContext.prototype.enterRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.enterServer(this);
	}
};

ServerContext.prototype.exitRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.exitServer(this);
	}
};




JSettlersParser.ServerContext = ServerContext;

JSettlersParser.prototype.server = function() {

    var localctx = new ServerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 104, JSettlersParser.RULE_server);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 593;
        _la = this._input.LA(1);
        if(!(_la===JSettlersParser.T__28 || _la===JSettlersParser.T__29)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 594;
        this.match(JSettlersParser.T__30);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ClientContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JSettlersParser.RULE_client;
    return this;
}

ClientContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClientContext.prototype.constructor = ClientContext;


ClientContext.prototype.enterRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.enterClient(this);
	}
};

ClientContext.prototype.exitRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.exitClient(this);
	}
};




JSettlersParser.ClientContext = ClientContext;

JSettlersParser.prototype.client = function() {

    var localctx = new ClientContext(this, this._ctx, this.state);
    this.enterRule(localctx, 106, JSettlersParser.RULE_client);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 596;
        _la = this._input.LA(1);
        if(!(_la===JSettlersParser.T__31 || _la===JSettlersParser.T__32)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 597;
        this.match(JSettlersParser.T__30);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SetupPlayerOptionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JSettlersParser.RULE_setupPlayerOption;
    return this;
}

SetupPlayerOptionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SetupPlayerOptionContext.prototype.constructor = SetupPlayerOptionContext;

SetupPlayerOptionContext.prototype.hand = function() {
    return this.getTypedRuleContext(HandContext,0);
};

SetupPlayerOptionContext.prototype.stock = function() {
    return this.getTypedRuleContext(StockContext,0);
};

SetupPlayerOptionContext.prototype.devCards = function() {
    return this.getTypedRuleContext(DevCardsContext,0);
};

SetupPlayerOptionContext.prototype.ports = function() {
    return this.getTypedRuleContext(PortsContext,0);
};

SetupPlayerOptionContext.prototype.enterRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.enterSetupPlayerOption(this);
	}
};

SetupPlayerOptionContext.prototype.exitRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.exitSetupPlayerOption(this);
	}
};




JSettlersParser.SetupPlayerOptionContext = SetupPlayerOptionContext;

JSettlersParser.prototype.setupPlayerOption = function() {

    var localctx = new SetupPlayerOptionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 108, JSettlersParser.RULE_setupPlayerOption);
    try {
        this.state = 603;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case JSettlersParser.T__33:
            this.enterOuterAlt(localctx, 1);
            this.state = 599;
            this.hand();
            break;
        case JSettlersParser.T__34:
            this.enterOuterAlt(localctx, 2);
            this.state = 600;
            this.stock();
            break;
        case JSettlersParser.T__37:
            this.enterOuterAlt(localctx, 3);
            this.state = 601;
            this.devCards();
            break;
        case JSettlersParser.T__25:
            this.enterOuterAlt(localctx, 4);
            this.state = 602;
            this.ports();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function HandContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JSettlersParser.RULE_hand;
    return this;
}

HandContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
HandContext.prototype.constructor = HandContext;

HandContext.prototype.SPACE = function() {
    return this.getToken(JSettlersParser.SPACE, 0);
};

HandContext.prototype.resourceSet = function() {
    return this.getTypedRuleContext(ResourceSetContext,0);
};

HandContext.prototype.enterRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.enterHand(this);
	}
};

HandContext.prototype.exitRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.exitHand(this);
	}
};




JSettlersParser.HandContext = HandContext;

JSettlersParser.prototype.hand = function() {

    var localctx = new HandContext(this, this._ctx, this.state);
    this.enterRule(localctx, 110, JSettlersParser.RULE_hand);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 605;
        this.match(JSettlersParser.T__33);
        this.state = 606;
        this.match(JSettlersParser.SPACE);
        this.state = 607;
        this.resourceSet();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StockContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JSettlersParser.RULE_stock;
    return this;
}

StockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StockContext.prototype.constructor = StockContext;

StockContext.prototype.SPACE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(JSettlersParser.SPACE);
    } else {
        return this.getToken(JSettlersParser.SPACE, i);
    }
};


StockContext.prototype.piece = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PieceContext);
    } else {
        return this.getTypedRuleContext(PieceContext,i);
    }
};

StockContext.prototype.enterRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.enterStock(this);
	}
};

StockContext.prototype.exitRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.exitStock(this);
	}
};




JSettlersParser.StockContext = StockContext;

JSettlersParser.prototype.stock = function() {

    var localctx = new StockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 112, JSettlersParser.RULE_stock);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 609;
        this.match(JSettlersParser.T__34);
        this.state = 610;
        this.match(JSettlersParser.SPACE);
        this.state = 611;
        this.match(JSettlersParser.T__35);
        this.state = 618;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(((((_la - 78)) & ~0x1f) == 0 && ((1 << (_la - 78)) & ((1 << (JSettlersParser.T__77 - 78)) | (1 << (JSettlersParser.T__78 - 78)) | (1 << (JSettlersParser.T__79 - 78)) | (1 << (JSettlersParser.T__80 - 78)) | (1 << (JSettlersParser.T__81 - 78)) | (1 << (JSettlersParser.T__82 - 78)) | (1 << (JSettlersParser.T__83 - 78)) | (1 << (JSettlersParser.T__84 - 78)))) !== 0)) {
            this.state = 612;
            this.piece();
            this.state = 614;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===JSettlersParser.SPACE) {
                this.state = 613;
                this.match(JSettlersParser.SPACE);
            }

            this.state = 620;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 621;
        this.match(JSettlersParser.T__36);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DevCardsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JSettlersParser.RULE_devCards;
    return this;
}

DevCardsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DevCardsContext.prototype.constructor = DevCardsContext;

DevCardsContext.prototype.SPACE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(JSettlersParser.SPACE);
    } else {
        return this.getToken(JSettlersParser.SPACE, i);
    }
};


DevCardsContext.prototype.devCard = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(DevCardContext);
    } else {
        return this.getTypedRuleContext(DevCardContext,i);
    }
};

DevCardsContext.prototype.enterRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.enterDevCards(this);
	}
};

DevCardsContext.prototype.exitRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.exitDevCards(this);
	}
};




JSettlersParser.DevCardsContext = DevCardsContext;

JSettlersParser.prototype.devCards = function() {

    var localctx = new DevCardsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 114, JSettlersParser.RULE_devCards);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 623;
        this.match(JSettlersParser.T__37);
        this.state = 624;
        this.match(JSettlersParser.SPACE);
        this.state = 625;
        this.match(JSettlersParser.T__35);
        this.state = 632;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===JSettlersParser.T__29 || ((((_la - 86)) & ~0x1f) == 0 && ((1 << (_la - 86)) & ((1 << (JSettlersParser.T__85 - 86)) | (1 << (JSettlersParser.T__86 - 86)) | (1 << (JSettlersParser.T__87 - 86)) | (1 << (JSettlersParser.T__88 - 86)) | (1 << (JSettlersParser.T__89 - 86)) | (1 << (JSettlersParser.T__90 - 86)) | (1 << (JSettlersParser.T__91 - 86)) | (1 << (JSettlersParser.T__92 - 86)) | (1 << (JSettlersParser.T__93 - 86)))) !== 0)) {
            this.state = 626;
            this.devCard();
            this.state = 628;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===JSettlersParser.SPACE) {
                this.state = 627;
                this.match(JSettlersParser.SPACE);
            }

            this.state = 634;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 635;
        this.match(JSettlersParser.T__36);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PortsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JSettlersParser.RULE_ports;
    return this;
}

PortsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PortsContext.prototype.constructor = PortsContext;

PortsContext.prototype.SPACE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(JSettlersParser.SPACE);
    } else {
        return this.getToken(JSettlersParser.SPACE, i);
    }
};


PortsContext.prototype.port = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PortContext);
    } else {
        return this.getTypedRuleContext(PortContext,i);
    }
};

PortsContext.prototype.enterRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.enterPorts(this);
	}
};

PortsContext.prototype.exitRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.exitPorts(this);
	}
};




JSettlersParser.PortsContext = PortsContext;

JSettlersParser.prototype.ports = function() {

    var localctx = new PortsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 116, JSettlersParser.RULE_ports);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 637;
        this.match(JSettlersParser.T__25);
        this.state = 638;
        this.match(JSettlersParser.SPACE);
        this.state = 639;
        this.match(JSettlersParser.T__35);
        this.state = 646;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(((((_la - 95)) & ~0x1f) == 0 && ((1 << (_la - 95)) & ((1 << (JSettlersParser.T__94 - 95)) | (1 << (JSettlersParser.T__95 - 95)) | (1 << (JSettlersParser.T__97 - 95)) | (1 << (JSettlersParser.T__99 - 95)) | (1 << (JSettlersParser.T__100 - 95)) | (1 << (JSettlersParser.T__101 - 95)) | (1 << (JSettlersParser.T__102 - 95)) | (1 << (JSettlersParser.T__103 - 95)) | (1 << (JSettlersParser.U_PORT - 95)))) !== 0)) {
            this.state = 640;
            this.port();
            this.state = 642;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===JSettlersParser.SPACE) {
                this.state = 641;
                this.match(JSettlersParser.SPACE);
            }

            this.state = 648;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 649;
        this.match(JSettlersParser.T__36);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PlacementsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JSettlersParser.RULE_placements;
    return this;
}

PlacementsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PlacementsContext.prototype.constructor = PlacementsContext;

PlacementsContext.prototype.NL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(JSettlersParser.NL);
    } else {
        return this.getToken(JSettlersParser.NL, i);
    }
};


PlacementsContext.prototype.INDENT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(JSettlersParser.INDENT);
    } else {
        return this.getToken(JSettlersParser.INDENT, i);
    }
};


PlacementsContext.prototype.buildAction = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BuildActionContext);
    } else {
        return this.getTypedRuleContext(BuildActionContext,i);
    }
};

PlacementsContext.prototype.check = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CheckContext);
    } else {
        return this.getTypedRuleContext(CheckContext,i);
    }
};

PlacementsContext.prototype.enterRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.enterPlacements(this);
	}
};

PlacementsContext.prototype.exitRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.exitPlacements(this);
	}
};




JSettlersParser.PlacementsContext = PlacementsContext;

JSettlersParser.prototype.placements = function() {

    var localctx = new PlacementsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 118, JSettlersParser.RULE_placements);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 651;
        this.match(JSettlersParser.T__38);
        this.state = 652;
        this.match(JSettlersParser.NL);
        this.state = 668;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===JSettlersParser.INDENT) {
            this.state = 653;
            this.match(JSettlersParser.INDENT);
            this.state = 654;
            this.buildAction();
            this.state = 655;
            this.match(JSettlersParser.NL);
            this.state = 663;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,51,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 657;
                    this.match(JSettlersParser.INDENT);
                    this.state = 658;
                    this.check();
                    this.state = 659;
                    this.match(JSettlersParser.NL); 
                }
                this.state = 665;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,51,this._ctx);
            }

            this.state = 670;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BuildActionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JSettlersParser.RULE_buildAction;
    return this;
}

BuildActionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BuildActionContext.prototype.constructor = BuildActionContext;

BuildActionContext.prototype.buildCity = function() {
    return this.getTypedRuleContext(BuildCityContext,0);
};

BuildActionContext.prototype.buildShip = function() {
    return this.getTypedRuleContext(BuildShipContext,0);
};

BuildActionContext.prototype.buildRoad = function() {
    return this.getTypedRuleContext(BuildRoadContext,0);
};

BuildActionContext.prototype.buildSettlement = function() {
    return this.getTypedRuleContext(BuildSettlementContext,0);
};

BuildActionContext.prototype.SPACE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(JSettlersParser.SPACE);
    } else {
        return this.getToken(JSettlersParser.SPACE, i);
    }
};


BuildActionContext.prototype.resourceSet = function() {
    return this.getTypedRuleContext(ResourceSetContext,0);
};

BuildActionContext.prototype.enterRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.enterBuildAction(this);
	}
};

BuildActionContext.prototype.exitRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.exitBuildAction(this);
	}
};




JSettlersParser.BuildActionContext = BuildActionContext;

JSettlersParser.prototype.buildAction = function() {

    var localctx = new BuildActionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 120, JSettlersParser.RULE_buildAction);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 675;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,53,this._ctx);
        switch(la_) {
        case 1:
            this.state = 671;
            this.buildCity();
            break;

        case 2:
            this.state = 672;
            this.buildShip();
            break;

        case 3:
            this.state = 673;
            this.buildRoad();
            break;

        case 4:
            this.state = 674;
            this.buildSettlement();
            break;

        }
        this.state = 681;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===JSettlersParser.SPACE) {
            this.state = 677;
            this.match(JSettlersParser.SPACE);
            this.state = 678;
            this.match(JSettlersParser.T__39);
            this.state = 679;
            this.match(JSettlersParser.SPACE);
            this.state = 680;
            this.resourceSet();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TurnsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JSettlersParser.RULE_turns;
    return this;
}

TurnsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TurnsContext.prototype.constructor = TurnsContext;

TurnsContext.prototype.NL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(JSettlersParser.NL);
    } else {
        return this.getToken(JSettlersParser.NL, i);
    }
};


TurnsContext.prototype.INDENT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(JSettlersParser.INDENT);
    } else {
        return this.getToken(JSettlersParser.INDENT, i);
    }
};


TurnsContext.prototype.turn = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TurnContext);
    } else {
        return this.getTypedRuleContext(TurnContext,i);
    }
};

TurnsContext.prototype.enterRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.enterTurns(this);
	}
};

TurnsContext.prototype.exitRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.exitTurns(this);
	}
};




JSettlersParser.TurnsContext = TurnsContext;

JSettlersParser.prototype.turns = function() {

    var localctx = new TurnsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 122, JSettlersParser.RULE_turns);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 683;
        this.match(JSettlersParser.T__40);
        this.state = 684;
        this.match(JSettlersParser.NL);
        this.state = 689; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 685;
            this.match(JSettlersParser.INDENT);
            this.state = 686;
            this.turn();
            this.state = 687;
            this.match(JSettlersParser.NL);
            this.state = 691; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===JSettlersParser.INDENT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TurnContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JSettlersParser.RULE_turn;
    return this;
}

TurnContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TurnContext.prototype.constructor = TurnContext;

TurnContext.prototype.SPACE = function() {
    return this.getToken(JSettlersParser.SPACE, 0);
};

TurnContext.prototype.NUMBER = function() {
    return this.getToken(JSettlersParser.NUMBER, 0);
};

TurnContext.prototype.NL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(JSettlersParser.NL);
    } else {
        return this.getToken(JSettlersParser.NL, i);
    }
};


TurnContext.prototype.INDENT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(JSettlersParser.INDENT);
    } else {
        return this.getToken(JSettlersParser.INDENT, i);
    }
};


TurnContext.prototype.action = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ActionContext);
    } else {
        return this.getTypedRuleContext(ActionContext,i);
    }
};

TurnContext.prototype.check = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CheckContext);
    } else {
        return this.getTypedRuleContext(CheckContext,i);
    }
};

TurnContext.prototype.enterRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.enterTurn(this);
	}
};

TurnContext.prototype.exitRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.exitTurn(this);
	}
};




JSettlersParser.TurnContext = TurnContext;

JSettlersParser.prototype.turn = function() {

    var localctx = new TurnContext(this, this._ctx, this.state);
    this.enterRule(localctx, 124, JSettlersParser.RULE_turn);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 693;
        this.match(JSettlersParser.T__41);
        this.state = 694;
        this.match(JSettlersParser.SPACE);
        this.state = 695;
        this.match(JSettlersParser.NUMBER);
        this.state = 696;
        this.match(JSettlersParser.NL);
        this.state = 714;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===JSettlersParser.INDENT) {
            this.state = 697;
            this.match(JSettlersParser.INDENT);
            this.state = 698;
            this.match(JSettlersParser.INDENT);
            this.state = 699;
            this.action();
            this.state = 700;
            this.match(JSettlersParser.NL);
            this.state = 709;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,56,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 702;
                    this.match(JSettlersParser.INDENT);
                    this.state = 703;
                    this.match(JSettlersParser.INDENT);
                    this.state = 704;
                    this.check();
                    this.state = 705;
                    this.match(JSettlersParser.NL); 
                }
                this.state = 711;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,56,this._ctx);
            }

            this.state = 716;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ActionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JSettlersParser.RULE_action;
    return this;
}

ActionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ActionContext.prototype.constructor = ActionContext;

ActionContext.prototype.buildRoad = function() {
    return this.getTypedRuleContext(BuildRoadContext,0);
};

ActionContext.prototype.buildSettlement = function() {
    return this.getTypedRuleContext(BuildSettlementContext,0);
};

ActionContext.prototype.buildShip = function() {
    return this.getTypedRuleContext(BuildShipContext,0);
};

ActionContext.prototype.buildCity = function() {
    return this.getTypedRuleContext(BuildCityContext,0);
};

ActionContext.prototype.endTurn = function() {
    return this.getTypedRuleContext(EndTurnContext,0);
};

ActionContext.prototype.moveRobber = function() {
    return this.getTypedRuleContext(MoveRobberContext,0);
};

ActionContext.prototype.rollDice = function() {
    return this.getTypedRuleContext(RollDiceContext,0);
};

ActionContext.prototype.discardResources = function() {
    return this.getTypedRuleContext(DiscardResourcesContext,0);
};

ActionContext.prototype.moveShip = function() {
    return this.getTypedRuleContext(MoveShipContext,0);
};

ActionContext.prototype.acceptOffer = function() {
    return this.getTypedRuleContext(AcceptOfferContext,0);
};

ActionContext.prototype.enterRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.enterAction(this);
	}
};

ActionContext.prototype.exitRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.exitAction(this);
	}
};




JSettlersParser.ActionContext = ActionContext;

JSettlersParser.prototype.action = function() {

    var localctx = new ActionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 126, JSettlersParser.RULE_action);
    try {
        this.state = 727;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,58,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 717;
            this.buildRoad();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 718;
            this.buildSettlement();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 719;
            this.buildShip();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 720;
            this.buildCity();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 721;
            this.endTurn();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 722;
            this.moveRobber();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 723;
            this.rollDice();
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 724;
            this.discardResources();
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 725;
            this.moveShip();
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 726;
            this.acceptOffer();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BuildContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JSettlersParser.RULE_build;
    return this;
}

BuildContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BuildContext.prototype.constructor = BuildContext;

BuildContext.prototype.U_BUILD = function() {
    return this.getToken(JSettlersParser.U_BUILD, 0);
};

BuildContext.prototype.enterRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.enterBuild(this);
	}
};

BuildContext.prototype.exitRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.exitBuild(this);
	}
};




JSettlersParser.BuildContext = BuildContext;

JSettlersParser.prototype.build = function() {

    var localctx = new BuildContext(this, this._ctx, this.state);
    this.enterRule(localctx, 128, JSettlersParser.RULE_build);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 729;
        _la = this._input.LA(1);
        if(!(_la===JSettlersParser.T__42 || _la===JSettlersParser.T__43 || _la===JSettlersParser.U_BUILD)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EndTurnContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JSettlersParser.RULE_endTurn;
    return this;
}

EndTurnContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EndTurnContext.prototype.constructor = EndTurnContext;

EndTurnContext.prototype.player = function() {
    return this.getTypedRuleContext(PlayerContext,0);
};

EndTurnContext.prototype.SPACE = function() {
    return this.getToken(JSettlersParser.SPACE, 0);
};

EndTurnContext.prototype.enterRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.enterEndTurn(this);
	}
};

EndTurnContext.prototype.exitRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.exitEndTurn(this);
	}
};




JSettlersParser.EndTurnContext = EndTurnContext;

JSettlersParser.prototype.endTurn = function() {

    var localctx = new EndTurnContext(this, this._ctx, this.state);
    this.enterRule(localctx, 130, JSettlersParser.RULE_endTurn);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 731;
        this.player();
        this.state = 732;
        this.match(JSettlersParser.SPACE);
        this.state = 733;
        this.match(JSettlersParser.T__44);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BuildCityContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JSettlersParser.RULE_buildCity;
    return this;
}

BuildCityContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BuildCityContext.prototype.constructor = BuildCityContext;

BuildCityContext.prototype.player = function() {
    return this.getTypedRuleContext(PlayerContext,0);
};

BuildCityContext.prototype.SPACE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(JSettlersParser.SPACE);
    } else {
        return this.getToken(JSettlersParser.SPACE, i);
    }
};


BuildCityContext.prototype.build = function() {
    return this.getTypedRuleContext(BuildContext,0);
};

BuildCityContext.prototype.city = function() {
    return this.getTypedRuleContext(CityContext,0);
};

BuildCityContext.prototype.vertex = function() {
    return this.getTypedRuleContext(VertexContext,0);
};

BuildCityContext.prototype.at = function() {
    return this.getTypedRuleContext(AtContext,0);
};

BuildCityContext.prototype.enterRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.enterBuildCity(this);
	}
};

BuildCityContext.prototype.exitRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.exitBuildCity(this);
	}
};




JSettlersParser.BuildCityContext = BuildCityContext;

JSettlersParser.prototype.buildCity = function() {

    var localctx = new BuildCityContext(this, this._ctx, this.state);
    this.enterRule(localctx, 132, JSettlersParser.RULE_buildCity);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 735;
        this.player();
        this.state = 736;
        this.match(JSettlersParser.SPACE);
        this.state = 737;
        this.build();
        this.state = 739;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===JSettlersParser.SPACE) {
            this.state = 738;
            this.match(JSettlersParser.SPACE);
        }

        this.state = 741;
        this.city();
        this.state = 742;
        this.match(JSettlersParser.SPACE);
        this.state = 746;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===JSettlersParser.T__0 || _la===JSettlersParser.T__1) {
            this.state = 743;
            this.at();
            this.state = 744;
            this.match(JSettlersParser.SPACE);
        }

        this.state = 748;
        this.vertex();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BuildShipContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JSettlersParser.RULE_buildShip;
    return this;
}

BuildShipContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BuildShipContext.prototype.constructor = BuildShipContext;

BuildShipContext.prototype.player = function() {
    return this.getTypedRuleContext(PlayerContext,0);
};

BuildShipContext.prototype.SPACE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(JSettlersParser.SPACE);
    } else {
        return this.getToken(JSettlersParser.SPACE, i);
    }
};


BuildShipContext.prototype.build = function() {
    return this.getTypedRuleContext(BuildContext,0);
};

BuildShipContext.prototype.ship = function() {
    return this.getTypedRuleContext(ShipContext,0);
};

BuildShipContext.prototype.edge = function() {
    return this.getTypedRuleContext(EdgeContext,0);
};

BuildShipContext.prototype.at = function() {
    return this.getTypedRuleContext(AtContext,0);
};

BuildShipContext.prototype.enterRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.enterBuildShip(this);
	}
};

BuildShipContext.prototype.exitRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.exitBuildShip(this);
	}
};




JSettlersParser.BuildShipContext = BuildShipContext;

JSettlersParser.prototype.buildShip = function() {

    var localctx = new BuildShipContext(this, this._ctx, this.state);
    this.enterRule(localctx, 134, JSettlersParser.RULE_buildShip);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 750;
        this.player();
        this.state = 751;
        this.match(JSettlersParser.SPACE);
        this.state = 752;
        this.build();
        this.state = 754;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===JSettlersParser.SPACE) {
            this.state = 753;
            this.match(JSettlersParser.SPACE);
        }

        this.state = 756;
        this.ship();
        this.state = 757;
        this.match(JSettlersParser.SPACE);
        this.state = 761;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===JSettlersParser.T__0 || _la===JSettlersParser.T__1) {
            this.state = 758;
            this.at();
            this.state = 759;
            this.match(JSettlersParser.SPACE);
        }

        this.state = 763;
        this.edge();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BuildRoadContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JSettlersParser.RULE_buildRoad;
    return this;
}

BuildRoadContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BuildRoadContext.prototype.constructor = BuildRoadContext;

BuildRoadContext.prototype.player = function() {
    return this.getTypedRuleContext(PlayerContext,0);
};

BuildRoadContext.prototype.SPACE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(JSettlersParser.SPACE);
    } else {
        return this.getToken(JSettlersParser.SPACE, i);
    }
};


BuildRoadContext.prototype.build = function() {
    return this.getTypedRuleContext(BuildContext,0);
};

BuildRoadContext.prototype.road = function() {
    return this.getTypedRuleContext(RoadContext,0);
};

BuildRoadContext.prototype.edge = function() {
    return this.getTypedRuleContext(EdgeContext,0);
};

BuildRoadContext.prototype.at = function() {
    return this.getTypedRuleContext(AtContext,0);
};

BuildRoadContext.prototype.enterRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.enterBuildRoad(this);
	}
};

BuildRoadContext.prototype.exitRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.exitBuildRoad(this);
	}
};




JSettlersParser.BuildRoadContext = BuildRoadContext;

JSettlersParser.prototype.buildRoad = function() {

    var localctx = new BuildRoadContext(this, this._ctx, this.state);
    this.enterRule(localctx, 136, JSettlersParser.RULE_buildRoad);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 765;
        this.player();
        this.state = 766;
        this.match(JSettlersParser.SPACE);
        this.state = 767;
        this.build();
        this.state = 769;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===JSettlersParser.SPACE) {
            this.state = 768;
            this.match(JSettlersParser.SPACE);
        }

        this.state = 771;
        this.road();
        this.state = 772;
        this.match(JSettlersParser.SPACE);
        this.state = 776;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===JSettlersParser.T__0 || _la===JSettlersParser.T__1) {
            this.state = 773;
            this.at();
            this.state = 774;
            this.match(JSettlersParser.SPACE);
        }

        this.state = 778;
        this.edge();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BuildSettlementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JSettlersParser.RULE_buildSettlement;
    return this;
}

BuildSettlementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BuildSettlementContext.prototype.constructor = BuildSettlementContext;

BuildSettlementContext.prototype.player = function() {
    return this.getTypedRuleContext(PlayerContext,0);
};

BuildSettlementContext.prototype.SPACE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(JSettlersParser.SPACE);
    } else {
        return this.getToken(JSettlersParser.SPACE, i);
    }
};


BuildSettlementContext.prototype.build = function() {
    return this.getTypedRuleContext(BuildContext,0);
};

BuildSettlementContext.prototype.settlement = function() {
    return this.getTypedRuleContext(SettlementContext,0);
};

BuildSettlementContext.prototype.vertex = function() {
    return this.getTypedRuleContext(VertexContext,0);
};

BuildSettlementContext.prototype.at = function() {
    return this.getTypedRuleContext(AtContext,0);
};

BuildSettlementContext.prototype.enterRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.enterBuildSettlement(this);
	}
};

BuildSettlementContext.prototype.exitRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.exitBuildSettlement(this);
	}
};




JSettlersParser.BuildSettlementContext = BuildSettlementContext;

JSettlersParser.prototype.buildSettlement = function() {

    var localctx = new BuildSettlementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 138, JSettlersParser.RULE_buildSettlement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 780;
        this.player();
        this.state = 781;
        this.match(JSettlersParser.SPACE);
        this.state = 782;
        this.build();
        this.state = 784;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===JSettlersParser.SPACE) {
            this.state = 783;
            this.match(JSettlersParser.SPACE);
        }

        this.state = 786;
        this.settlement();
        this.state = 787;
        this.match(JSettlersParser.SPACE);
        this.state = 791;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===JSettlersParser.T__0 || _la===JSettlersParser.T__1) {
            this.state = 788;
            this.at();
            this.state = 789;
            this.match(JSettlersParser.SPACE);
        }

        this.state = 793;
        this.vertex();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MoveRobberContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JSettlersParser.RULE_moveRobber;
    return this;
}

MoveRobberContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MoveRobberContext.prototype.constructor = MoveRobberContext;

MoveRobberContext.prototype.player = function() {
    return this.getTypedRuleContext(PlayerContext,0);
};

MoveRobberContext.prototype.SPACE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(JSettlersParser.SPACE);
    } else {
        return this.getToken(JSettlersParser.SPACE, i);
    }
};


MoveRobberContext.prototype.robber = function() {
    return this.getTypedRuleContext(RobberContext,0);
};

MoveRobberContext.prototype.location = function() {
    return this.getTypedRuleContext(LocationContext,0);
};

MoveRobberContext.prototype.enterRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.enterMoveRobber(this);
	}
};

MoveRobberContext.prototype.exitRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.exitMoveRobber(this);
	}
};




JSettlersParser.MoveRobberContext = MoveRobberContext;

JSettlersParser.prototype.moveRobber = function() {

    var localctx = new MoveRobberContext(this, this._ctx, this.state);
    this.enterRule(localctx, 140, JSettlersParser.RULE_moveRobber);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 795;
        this.player();
        this.state = 796;
        this.match(JSettlersParser.SPACE);
        this.state = 797;
        this.match(JSettlersParser.T__45);
        this.state = 798;
        this.match(JSettlersParser.SPACE);
        this.state = 799;
        this.robber();
        this.state = 800;
        this.match(JSettlersParser.SPACE);
        this.state = 801;
        this.match(JSettlersParser.T__46);
        this.state = 802;
        this.match(JSettlersParser.SPACE);
        this.state = 803;
        this.location();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function RollDiceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JSettlersParser.RULE_rollDice;
    return this;
}

RollDiceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RollDiceContext.prototype.constructor = RollDiceContext;

RollDiceContext.prototype.player = function() {
    return this.getTypedRuleContext(PlayerContext,0);
};

RollDiceContext.prototype.SPACE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(JSettlersParser.SPACE);
    } else {
        return this.getToken(JSettlersParser.SPACE, i);
    }
};


RollDiceContext.prototype.roll = function() {
    return this.getTypedRuleContext(RollContext,0);
};

RollDiceContext.prototype.production = function() {
    return this.getTypedRuleContext(ProductionContext,0);
};

RollDiceContext.prototype.enterRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.enterRollDice(this);
	}
};

RollDiceContext.prototype.exitRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.exitRollDice(this);
	}
};




JSettlersParser.RollDiceContext = RollDiceContext;

JSettlersParser.prototype.rollDice = function() {

    var localctx = new RollDiceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 142, JSettlersParser.RULE_rollDice);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 805;
        this.player();
        this.state = 806;
        this.match(JSettlersParser.SPACE);
        this.state = 807;
        this.roll();
        this.state = 808;
        this.match(JSettlersParser.SPACE);
        this.state = 809;
        this.production();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DiceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JSettlersParser.RULE_dice;
    return this;
}

DiceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DiceContext.prototype.constructor = DiceContext;

DiceContext.prototype.U_DICE = function() {
    return this.getToken(JSettlersParser.U_DICE, 0);
};

DiceContext.prototype.SPACE = function() {
    return this.getToken(JSettlersParser.SPACE, 0);
};

DiceContext.prototype.enterRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.enterDice(this);
	}
};

DiceContext.prototype.exitRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.exitDice(this);
	}
};




JSettlersParser.DiceContext = DiceContext;

JSettlersParser.prototype.dice = function() {

    var localctx = new DiceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 144, JSettlersParser.RULE_dice);
    try {
        this.state = 814;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case JSettlersParser.U_DICE:
            this.enterOuterAlt(localctx, 1);
            this.state = 811;
            this.match(JSettlersParser.U_DICE);
            break;
        case JSettlersParser.T__47:
            this.enterOuterAlt(localctx, 2);
            this.state = 812;
            this.match(JSettlersParser.T__47);
            this.state = 813;
            this.match(JSettlersParser.SPACE);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function RollContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JSettlersParser.RULE_roll;
    return this;
}

RollContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RollContext.prototype.constructor = RollContext;

RollContext.prototype.dice = function() {
    return this.getTypedRuleContext(DiceContext,0);
};

RollContext.prototype.NUMBER = function() {
    return this.getToken(JSettlersParser.NUMBER, 0);
};

RollContext.prototype.enterRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.enterRoll(this);
	}
};

RollContext.prototype.exitRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.exitRoll(this);
	}
};




JSettlersParser.RollContext = RollContext;

JSettlersParser.prototype.roll = function() {

    var localctx = new RollContext(this, this._ctx, this.state);
    this.enterRule(localctx, 146, JSettlersParser.RULE_roll);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 816;
        this.dice();
        this.state = 817;
        this.match(JSettlersParser.NUMBER);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PlayerProductionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JSettlersParser.RULE_playerProduction;
    return this;
}

PlayerProductionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PlayerProductionContext.prototype.constructor = PlayerProductionContext;

PlayerProductionContext.prototype.player = function() {
    return this.getTypedRuleContext(PlayerContext,0);
};

PlayerProductionContext.prototype.SPACE = function() {
    return this.getToken(JSettlersParser.SPACE, 0);
};

PlayerProductionContext.prototype.resourceSet = function() {
    return this.getTypedRuleContext(ResourceSetContext,0);
};

PlayerProductionContext.prototype.enterRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.enterPlayerProduction(this);
	}
};

PlayerProductionContext.prototype.exitRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.exitPlayerProduction(this);
	}
};




JSettlersParser.PlayerProductionContext = PlayerProductionContext;

JSettlersParser.prototype.playerProduction = function() {

    var localctx = new PlayerProductionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 148, JSettlersParser.RULE_playerProduction);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 819;
        this.player();
        this.state = 820;
        this.match(JSettlersParser.SPACE);
        this.state = 821;
        this.resourceSet();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ProductionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JSettlersParser.RULE_production;
    return this;
}

ProductionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ProductionContext.prototype.constructor = ProductionContext;

ProductionContext.prototype.playerProduction = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PlayerProductionContext);
    } else {
        return this.getTypedRuleContext(PlayerProductionContext,i);
    }
};

ProductionContext.prototype.enterRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.enterProduction(this);
	}
};

ProductionContext.prototype.exitRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.exitProduction(this);
	}
};




JSettlersParser.ProductionContext = ProductionContext;

JSettlersParser.prototype.production = function() {

    var localctx = new ProductionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 150, JSettlersParser.RULE_production);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 823;
        this.match(JSettlersParser.T__35);
        this.state = 832;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 27)) & ~0x1f) == 0 && ((1 << (_la - 27)) & ((1 << (JSettlersParser.T__26 - 27)) | (1 << (JSettlersParser.T__27 - 27)) | (1 << (JSettlersParser.T__28 - 27)) | (1 << (JSettlersParser.T__29 - 27)) | (1 << (JSettlersParser.T__31 - 27)) | (1 << (JSettlersParser.T__32 - 27)))) !== 0)) {
            this.state = 824;
            this.playerProduction();
            this.state = 829;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===JSettlersParser.T__15) {
                this.state = 825;
                this.match(JSettlersParser.T__15);
                this.state = 826;
                this.playerProduction();
                this.state = 831;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

        this.state = 834;
        this.match(JSettlersParser.T__36);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DiscardResourcesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JSettlersParser.RULE_discardResources;
    return this;
}

DiscardResourcesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DiscardResourcesContext.prototype.constructor = DiscardResourcesContext;

DiscardResourcesContext.prototype.player = function() {
    return this.getTypedRuleContext(PlayerContext,0);
};

DiscardResourcesContext.prototype.SPACE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(JSettlersParser.SPACE);
    } else {
        return this.getToken(JSettlersParser.SPACE, i);
    }
};


DiscardResourcesContext.prototype.resourceSet = function() {
    return this.getTypedRuleContext(ResourceSetContext,0);
};

DiscardResourcesContext.prototype.enterRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.enterDiscardResources(this);
	}
};

DiscardResourcesContext.prototype.exitRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.exitDiscardResources(this);
	}
};




JSettlersParser.DiscardResourcesContext = DiscardResourcesContext;

JSettlersParser.prototype.discardResources = function() {

    var localctx = new DiscardResourcesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 152, JSettlersParser.RULE_discardResources);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 836;
        this.player();
        this.state = 837;
        this.match(JSettlersParser.SPACE);
        this.state = 838;
        this.match(JSettlersParser.T__48);
        this.state = 839;
        this.match(JSettlersParser.SPACE);
        this.state = 840;
        this.resourceSet();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MoveShipContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JSettlersParser.RULE_moveShip;
    return this;
}

MoveShipContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MoveShipContext.prototype.constructor = MoveShipContext;

MoveShipContext.prototype.player = function() {
    return this.getTypedRuleContext(PlayerContext,0);
};

MoveShipContext.prototype.SPACE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(JSettlersParser.SPACE);
    } else {
        return this.getToken(JSettlersParser.SPACE, i);
    }
};


MoveShipContext.prototype.edge = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(EdgeContext);
    } else {
        return this.getTypedRuleContext(EdgeContext,i);
    }
};

MoveShipContext.prototype.enterRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.enterMoveShip(this);
	}
};

MoveShipContext.prototype.exitRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.exitMoveShip(this);
	}
};




JSettlersParser.MoveShipContext = MoveShipContext;

JSettlersParser.prototype.moveShip = function() {

    var localctx = new MoveShipContext(this, this._ctx, this.state);
    this.enterRule(localctx, 154, JSettlersParser.RULE_moveShip);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 842;
        this.player();
        this.state = 843;
        this.match(JSettlersParser.SPACE);
        this.state = 844;
        this.match(JSettlersParser.T__49);
        this.state = 845;
        this.match(JSettlersParser.SPACE);
        this.state = 846;
        this.edge();
        this.state = 847;
        this.match(JSettlersParser.SPACE);
        this.state = 848;
        this.match(JSettlersParser.T__46);
        this.state = 849;
        this.match(JSettlersParser.SPACE);
        this.state = 850;
        this.edge();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AcceptOfferContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JSettlersParser.RULE_acceptOffer;
    return this;
}

AcceptOfferContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AcceptOfferContext.prototype.constructor = AcceptOfferContext;

AcceptOfferContext.prototype.player = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PlayerContext);
    } else {
        return this.getTypedRuleContext(PlayerContext,i);
    }
};

AcceptOfferContext.prototype.SPACE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(JSettlersParser.SPACE);
    } else {
        return this.getToken(JSettlersParser.SPACE, i);
    }
};


AcceptOfferContext.prototype.enterRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.enterAcceptOffer(this);
	}
};

AcceptOfferContext.prototype.exitRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.exitAcceptOffer(this);
	}
};




JSettlersParser.AcceptOfferContext = AcceptOfferContext;

JSettlersParser.prototype.acceptOffer = function() {

    var localctx = new AcceptOfferContext(this, this._ctx, this.state);
    this.enterRule(localctx, 156, JSettlersParser.RULE_acceptOffer);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 852;
        this.player();
        this.state = 853;
        this.match(JSettlersParser.SPACE);
        this.state = 854;
        this.match(JSettlersParser.T__50);
        this.state = 855;
        this.match(JSettlersParser.SPACE);
        this.state = 856;
        this.player();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CheckContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JSettlersParser.RULE_check;
    return this;
}

CheckContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CheckContext.prototype.constructor = CheckContext;

CheckContext.prototype.SPACE = function() {
    return this.getToken(JSettlersParser.SPACE, 0);
};

CheckContext.prototype.U_CHECK = function() {
    return this.getToken(JSettlersParser.U_CHECK, 0);
};

CheckContext.prototype.playerHasResources = function() {
    return this.getTypedRuleContext(PlayerHasResourcesContext,0);
};

CheckContext.prototype.hasXRoadsInStock = function() {
    return this.getTypedRuleContext(HasXRoadsInStockContext,0);
};

CheckContext.prototype.isOnTurn = function() {
    return this.getTypedRuleContext(IsOnTurnContext,0);
};

CheckContext.prototype.isNotOnTurn = function() {
    return this.getTypedRuleContext(IsNotOnTurnContext,0);
};

CheckContext.prototype.hasRoadAt = function() {
    return this.getTypedRuleContext(HasRoadAtContext,0);
};

CheckContext.prototype.hasXRoads = function() {
    return this.getTypedRuleContext(HasXRoadsContext,0);
};

CheckContext.prototype.hasStockRoadAmount = function() {
    return this.getTypedRuleContext(HasStockRoadAmountContext,0);
};

CheckContext.prototype.hasSettlementAt = function() {
    return this.getTypedRuleContext(HasSettlementAtContext,0);
};

CheckContext.prototype.enterRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.enterCheck(this);
	}
};

CheckContext.prototype.exitRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.exitCheck(this);
	}
};




JSettlersParser.CheckContext = CheckContext;

JSettlersParser.prototype.check = function() {

    var localctx = new CheckContext(this, this._ctx, this.state);
    this.enterRule(localctx, 158, JSettlersParser.RULE_check);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 858;
        _la = this._input.LA(1);
        if(!(_la===JSettlersParser.T__51 || _la===JSettlersParser.T__52 || _la===JSettlersParser.U_CHECK)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 859;
        this.match(JSettlersParser.SPACE);
        this.state = 868;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,70,this._ctx);
        switch(la_) {
        case 1:
            this.state = 860;
            this.playerHasResources();
            break;

        case 2:
            this.state = 861;
            this.hasXRoadsInStock();
            break;

        case 3:
            this.state = 862;
            this.isOnTurn();
            break;

        case 4:
            this.state = 863;
            this.isNotOnTurn();
            break;

        case 5:
            this.state = 864;
            this.hasRoadAt();
            break;

        case 6:
            this.state = 865;
            this.hasXRoads();
            break;

        case 7:
            this.state = 866;
            this.hasStockRoadAmount();
            break;

        case 8:
            this.state = 867;
            this.hasSettlementAt();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PlayerHasResourcesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JSettlersParser.RULE_playerHasResources;
    return this;
}

PlayerHasResourcesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PlayerHasResourcesContext.prototype.constructor = PlayerHasResourcesContext;

PlayerHasResourcesContext.prototype.player = function() {
    return this.getTypedRuleContext(PlayerContext,0);
};

PlayerHasResourcesContext.prototype.SPACE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(JSettlersParser.SPACE);
    } else {
        return this.getToken(JSettlersParser.SPACE, i);
    }
};


PlayerHasResourcesContext.prototype.resourceSet = function() {
    return this.getTypedRuleContext(ResourceSetContext,0);
};

PlayerHasResourcesContext.prototype.enterRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.enterPlayerHasResources(this);
	}
};

PlayerHasResourcesContext.prototype.exitRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.exitPlayerHasResources(this);
	}
};




JSettlersParser.PlayerHasResourcesContext = PlayerHasResourcesContext;

JSettlersParser.prototype.playerHasResources = function() {

    var localctx = new PlayerHasResourcesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 160, JSettlersParser.RULE_playerHasResources);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 870;
        this.player();
        this.state = 871;
        this.match(JSettlersParser.SPACE);
        this.state = 872;
        this.match(JSettlersParser.T__53);
        this.state = 873;
        this.match(JSettlersParser.SPACE);
        this.state = 874;
        this.resourceSet();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function HasXRoadsInStockContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JSettlersParser.RULE_hasXRoadsInStock;
    return this;
}

HasXRoadsInStockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
HasXRoadsInStockContext.prototype.constructor = HasXRoadsInStockContext;

HasXRoadsInStockContext.prototype.player = function() {
    return this.getTypedRuleContext(PlayerContext,0);
};

HasXRoadsInStockContext.prototype.SPACE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(JSettlersParser.SPACE);
    } else {
        return this.getToken(JSettlersParser.SPACE, i);
    }
};


HasXRoadsInStockContext.prototype.NUMBER = function() {
    return this.getToken(JSettlersParser.NUMBER, 0);
};

HasXRoadsInStockContext.prototype.enterRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.enterHasXRoadsInStock(this);
	}
};

HasXRoadsInStockContext.prototype.exitRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.exitHasXRoadsInStock(this);
	}
};




JSettlersParser.HasXRoadsInStockContext = HasXRoadsInStockContext;

JSettlersParser.prototype.hasXRoadsInStock = function() {

    var localctx = new HasXRoadsInStockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 162, JSettlersParser.RULE_hasXRoadsInStock);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 876;
        this.player();
        this.state = 877;
        this.match(JSettlersParser.SPACE);
        this.state = 878;
        this.match(JSettlersParser.T__53);
        this.state = 879;
        this.match(JSettlersParser.SPACE);
        this.state = 880;
        this.match(JSettlersParser.NUMBER);
        this.state = 881;
        this.match(JSettlersParser.SPACE);
        this.state = 882;
        this.match(JSettlersParser.T__54);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IsNotOnTurnContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JSettlersParser.RULE_isNotOnTurn;
    return this;
}

IsNotOnTurnContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IsNotOnTurnContext.prototype.constructor = IsNotOnTurnContext;

IsNotOnTurnContext.prototype.player = function() {
    return this.getTypedRuleContext(PlayerContext,0);
};

IsNotOnTurnContext.prototype.SPACE = function() {
    return this.getToken(JSettlersParser.SPACE, 0);
};

IsNotOnTurnContext.prototype.enterRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.enterIsNotOnTurn(this);
	}
};

IsNotOnTurnContext.prototype.exitRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.exitIsNotOnTurn(this);
	}
};




JSettlersParser.IsNotOnTurnContext = IsNotOnTurnContext;

JSettlersParser.prototype.isNotOnTurn = function() {

    var localctx = new IsNotOnTurnContext(this, this._ctx, this.state);
    this.enterRule(localctx, 164, JSettlersParser.RULE_isNotOnTurn);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 884;
        this.player();
        this.state = 885;
        this.match(JSettlersParser.SPACE);
        this.state = 886;
        this.match(JSettlersParser.T__55);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IsOnTurnContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JSettlersParser.RULE_isOnTurn;
    return this;
}

IsOnTurnContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IsOnTurnContext.prototype.constructor = IsOnTurnContext;

IsOnTurnContext.prototype.player = function() {
    return this.getTypedRuleContext(PlayerContext,0);
};

IsOnTurnContext.prototype.SPACE = function() {
    return this.getToken(JSettlersParser.SPACE, 0);
};

IsOnTurnContext.prototype.enterRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.enterIsOnTurn(this);
	}
};

IsOnTurnContext.prototype.exitRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.exitIsOnTurn(this);
	}
};




JSettlersParser.IsOnTurnContext = IsOnTurnContext;

JSettlersParser.prototype.isOnTurn = function() {

    var localctx = new IsOnTurnContext(this, this._ctx, this.state);
    this.enterRule(localctx, 166, JSettlersParser.RULE_isOnTurn);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 888;
        this.player();
        this.state = 889;
        this.match(JSettlersParser.SPACE);
        this.state = 890;
        this.match(JSettlersParser.T__56);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function HasRoadAtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JSettlersParser.RULE_hasRoadAt;
    return this;
}

HasRoadAtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
HasRoadAtContext.prototype.constructor = HasRoadAtContext;

HasRoadAtContext.prototype.player = function() {
    return this.getTypedRuleContext(PlayerContext,0);
};

HasRoadAtContext.prototype.SPACE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(JSettlersParser.SPACE);
    } else {
        return this.getToken(JSettlersParser.SPACE, i);
    }
};


HasRoadAtContext.prototype.edge = function() {
    return this.getTypedRuleContext(EdgeContext,0);
};

HasRoadAtContext.prototype.enterRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.enterHasRoadAt(this);
	}
};

HasRoadAtContext.prototype.exitRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.exitHasRoadAt(this);
	}
};




JSettlersParser.HasRoadAtContext = HasRoadAtContext;

JSettlersParser.prototype.hasRoadAt = function() {

    var localctx = new HasRoadAtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 168, JSettlersParser.RULE_hasRoadAt);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 892;
        this.player();
        this.state = 893;
        this.match(JSettlersParser.SPACE);
        this.state = 894;
        this.match(JSettlersParser.T__57);
        this.state = 895;
        this.match(JSettlersParser.SPACE);
        this.state = 896;
        this.edge();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function HasSettlementAtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JSettlersParser.RULE_hasSettlementAt;
    return this;
}

HasSettlementAtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
HasSettlementAtContext.prototype.constructor = HasSettlementAtContext;

HasSettlementAtContext.prototype.player = function() {
    return this.getTypedRuleContext(PlayerContext,0);
};

HasSettlementAtContext.prototype.SPACE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(JSettlersParser.SPACE);
    } else {
        return this.getToken(JSettlersParser.SPACE, i);
    }
};


HasSettlementAtContext.prototype.vertex = function() {
    return this.getTypedRuleContext(VertexContext,0);
};

HasSettlementAtContext.prototype.at = function() {
    return this.getTypedRuleContext(AtContext,0);
};

HasSettlementAtContext.prototype.enterRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.enterHasSettlementAt(this);
	}
};

HasSettlementAtContext.prototype.exitRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.exitHasSettlementAt(this);
	}
};




JSettlersParser.HasSettlementAtContext = HasSettlementAtContext;

JSettlersParser.prototype.hasSettlementAt = function() {

    var localctx = new HasSettlementAtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 170, JSettlersParser.RULE_hasSettlementAt);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 898;
        this.player();
        this.state = 899;
        this.match(JSettlersParser.SPACE);
        this.state = 900;
        this.match(JSettlersParser.T__58);
        this.state = 903;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,71,this._ctx);
        if(la_===1) {
            this.state = 901;
            this.match(JSettlersParser.SPACE);
            this.state = 902;
            this.at();

        }
        this.state = 905;
        this.match(JSettlersParser.SPACE);
        this.state = 906;
        this.vertex();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function HasXRoadsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JSettlersParser.RULE_hasXRoads;
    return this;
}

HasXRoadsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
HasXRoadsContext.prototype.constructor = HasXRoadsContext;

HasXRoadsContext.prototype.player = function() {
    return this.getTypedRuleContext(PlayerContext,0);
};

HasXRoadsContext.prototype.NUMBER = function() {
    return this.getToken(JSettlersParser.NUMBER, 0);
};

HasXRoadsContext.prototype.enterRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.enterHasXRoads(this);
	}
};

HasXRoadsContext.prototype.exitRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.exitHasXRoads(this);
	}
};




JSettlersParser.HasXRoadsContext = HasXRoadsContext;

JSettlersParser.prototype.hasXRoads = function() {

    var localctx = new HasXRoadsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 172, JSettlersParser.RULE_hasXRoads);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 908;
        this.player();
        this.state = 909;
        this.match(JSettlersParser.T__59);
        this.state = 910;
        this.match(JSettlersParser.NUMBER);
        this.state = 911;
        this.match(JSettlersParser.T__60);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function HasStockRoadAmountContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JSettlersParser.RULE_hasStockRoadAmount;
    return this;
}

HasStockRoadAmountContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
HasStockRoadAmountContext.prototype.constructor = HasStockRoadAmountContext;

HasStockRoadAmountContext.prototype.player = function() {
    return this.getTypedRuleContext(PlayerContext,0);
};

HasStockRoadAmountContext.prototype.SPACE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(JSettlersParser.SPACE);
    } else {
        return this.getToken(JSettlersParser.SPACE, i);
    }
};


HasStockRoadAmountContext.prototype.NUMBER = function() {
    return this.getToken(JSettlersParser.NUMBER, 0);
};

HasStockRoadAmountContext.prototype.enterRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.enterHasStockRoadAmount(this);
	}
};

HasStockRoadAmountContext.prototype.exitRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.exitHasStockRoadAmount(this);
	}
};




JSettlersParser.HasStockRoadAmountContext = HasStockRoadAmountContext;

JSettlersParser.prototype.hasStockRoadAmount = function() {

    var localctx = new HasStockRoadAmountContext(this, this._ctx, this.state);
    this.enterRule(localctx, 174, JSettlersParser.RULE_hasStockRoadAmount);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 913;
        this.player();
        this.state = 914;
        this.match(JSettlersParser.SPACE);
        this.state = 915;
        this.match(JSettlersParser.T__53);
        this.state = 916;
        this.match(JSettlersParser.SPACE);
        this.state = 917;
        this.match(JSettlersParser.NUMBER);
        this.state = 918;
        this.match(JSettlersParser.SPACE);
        this.state = 919;
        this.match(JSettlersParser.T__60);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ResourceSetContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JSettlersParser.RULE_resourceSet;
    return this;
}

ResourceSetContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ResourceSetContext.prototype.constructor = ResourceSetContext;

ResourceSetContext.prototype.SPACE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(JSettlersParser.SPACE);
    } else {
        return this.getToken(JSettlersParser.SPACE, i);
    }
};


ResourceSetContext.prototype.resource = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ResourceContext);
    } else {
        return this.getTypedRuleContext(ResourceContext,i);
    }
};

ResourceSetContext.prototype.enterRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.enterResourceSet(this);
	}
};

ResourceSetContext.prototype.exitRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.exitResourceSet(this);
	}
};




JSettlersParser.ResourceSetContext = ResourceSetContext;

JSettlersParser.prototype.resourceSet = function() {

    var localctx = new ResourceSetContext(this, this._ctx, this.state);
    this.enterRule(localctx, 176, JSettlersParser.RULE_resourceSet);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 921;
        this.match(JSettlersParser.T__35);
        this.state = 925;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,72,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 922;
                this.match(JSettlersParser.SPACE); 
            }
            this.state = 927;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,72,this._ctx);
        }

        this.state = 934;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===JSettlersParser.T__29 || ((((_la - 62)) & ~0x1f) == 0 && ((1 << (_la - 62)) & ((1 << (JSettlersParser.T__61 - 62)) | (1 << (JSettlersParser.T__62 - 62)) | (1 << (JSettlersParser.T__63 - 62)) | (1 << (JSettlersParser.T__64 - 62)) | (1 << (JSettlersParser.T__65 - 62)) | (1 << (JSettlersParser.T__66 - 62)) | (1 << (JSettlersParser.T__67 - 62)) | (1 << (JSettlersParser.T__68 - 62)) | (1 << (JSettlersParser.T__69 - 62)) | (1 << (JSettlersParser.T__70 - 62)) | (1 << (JSettlersParser.T__71 - 62)) | (1 << (JSettlersParser.T__72 - 62)) | (1 << (JSettlersParser.T__73 - 62)) | (1 << (JSettlersParser.T__74 - 62)) | (1 << (JSettlersParser.T__75 - 62)) | (1 << (JSettlersParser.T__76 - 62)))) !== 0)) {
            this.state = 928;
            this.resource();
            this.state = 930;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,73,this._ctx);
            if(la_===1) {
                this.state = 929;
                this.match(JSettlersParser.SPACE);

            }
            this.state = 936;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 940;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===JSettlersParser.SPACE) {
            this.state = 937;
            this.match(JSettlersParser.SPACE);
            this.state = 942;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 943;
        this.match(JSettlersParser.T__36);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ResourceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JSettlersParser.RULE_resource;
    return this;
}

ResourceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ResourceContext.prototype.constructor = ResourceContext;

ResourceContext.prototype.sheep = function() {
    return this.getTypedRuleContext(SheepContext,0);
};

ResourceContext.prototype.wheat = function() {
    return this.getTypedRuleContext(WheatContext,0);
};

ResourceContext.prototype.timber = function() {
    return this.getTypedRuleContext(TimberContext,0);
};

ResourceContext.prototype.ore = function() {
    return this.getTypedRuleContext(OreContext,0);
};

ResourceContext.prototype.brick = function() {
    return this.getTypedRuleContext(BrickContext,0);
};

ResourceContext.prototype.unknown = function() {
    return this.getTypedRuleContext(UnknownContext,0);
};

ResourceContext.prototype.enterRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.enterResource(this);
	}
};

ResourceContext.prototype.exitRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.exitResource(this);
	}
};




JSettlersParser.ResourceContext = ResourceContext;

JSettlersParser.prototype.resource = function() {

    var localctx = new ResourceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 178, JSettlersParser.RULE_resource);
    try {
        this.state = 951;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case JSettlersParser.T__29:
        case JSettlersParser.T__61:
        case JSettlersParser.T__62:
            this.enterOuterAlt(localctx, 1);
            this.state = 945;
            this.sheep();
            break;
        case JSettlersParser.T__66:
        case JSettlersParser.T__67:
        case JSettlersParser.T__68:
            this.enterOuterAlt(localctx, 2);
            this.state = 946;
            this.wheat();
            break;
        case JSettlersParser.T__63:
        case JSettlersParser.T__64:
        case JSettlersParser.T__65:
            this.enterOuterAlt(localctx, 3);
            this.state = 947;
            this.timber();
            break;
        case JSettlersParser.T__69:
        case JSettlersParser.T__70:
        case JSettlersParser.T__71:
            this.enterOuterAlt(localctx, 4);
            this.state = 948;
            this.ore();
            break;
        case JSettlersParser.T__72:
        case JSettlersParser.T__73:
        case JSettlersParser.T__74:
            this.enterOuterAlt(localctx, 5);
            this.state = 949;
            this.brick();
            break;
        case JSettlersParser.T__75:
        case JSettlersParser.T__76:
            this.enterOuterAlt(localctx, 6);
            this.state = 950;
            this.unknown();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SheepContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JSettlersParser.RULE_sheep;
    return this;
}

SheepContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SheepContext.prototype.constructor = SheepContext;


SheepContext.prototype.enterRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.enterSheep(this);
	}
};

SheepContext.prototype.exitRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.exitSheep(this);
	}
};




JSettlersParser.SheepContext = SheepContext;

JSettlersParser.prototype.sheep = function() {

    var localctx = new SheepContext(this, this._ctx, this.state);
    this.enterRule(localctx, 180, JSettlersParser.RULE_sheep);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 953;
        _la = this._input.LA(1);
        if(!(_la===JSettlersParser.T__29 || _la===JSettlersParser.T__61 || _la===JSettlersParser.T__62)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TimberContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JSettlersParser.RULE_timber;
    return this;
}

TimberContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TimberContext.prototype.constructor = TimberContext;


TimberContext.prototype.enterRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.enterTimber(this);
	}
};

TimberContext.prototype.exitRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.exitTimber(this);
	}
};




JSettlersParser.TimberContext = TimberContext;

JSettlersParser.prototype.timber = function() {

    var localctx = new TimberContext(this, this._ctx, this.state);
    this.enterRule(localctx, 182, JSettlersParser.RULE_timber);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 955;
        _la = this._input.LA(1);
        if(!(((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (JSettlersParser.T__63 - 64)) | (1 << (JSettlersParser.T__64 - 64)) | (1 << (JSettlersParser.T__65 - 64)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function WheatContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JSettlersParser.RULE_wheat;
    return this;
}

WheatContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WheatContext.prototype.constructor = WheatContext;


WheatContext.prototype.enterRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.enterWheat(this);
	}
};

WheatContext.prototype.exitRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.exitWheat(this);
	}
};




JSettlersParser.WheatContext = WheatContext;

JSettlersParser.prototype.wheat = function() {

    var localctx = new WheatContext(this, this._ctx, this.state);
    this.enterRule(localctx, 184, JSettlersParser.RULE_wheat);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 957;
        _la = this._input.LA(1);
        if(!(((((_la - 67)) & ~0x1f) == 0 && ((1 << (_la - 67)) & ((1 << (JSettlersParser.T__66 - 67)) | (1 << (JSettlersParser.T__67 - 67)) | (1 << (JSettlersParser.T__68 - 67)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OreContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JSettlersParser.RULE_ore;
    return this;
}

OreContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OreContext.prototype.constructor = OreContext;


OreContext.prototype.enterRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.enterOre(this);
	}
};

OreContext.prototype.exitRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.exitOre(this);
	}
};




JSettlersParser.OreContext = OreContext;

JSettlersParser.prototype.ore = function() {

    var localctx = new OreContext(this, this._ctx, this.state);
    this.enterRule(localctx, 186, JSettlersParser.RULE_ore);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 959;
        _la = this._input.LA(1);
        if(!(((((_la - 70)) & ~0x1f) == 0 && ((1 << (_la - 70)) & ((1 << (JSettlersParser.T__69 - 70)) | (1 << (JSettlersParser.T__70 - 70)) | (1 << (JSettlersParser.T__71 - 70)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BrickContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JSettlersParser.RULE_brick;
    return this;
}

BrickContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BrickContext.prototype.constructor = BrickContext;


BrickContext.prototype.enterRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.enterBrick(this);
	}
};

BrickContext.prototype.exitRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.exitBrick(this);
	}
};




JSettlersParser.BrickContext = BrickContext;

JSettlersParser.prototype.brick = function() {

    var localctx = new BrickContext(this, this._ctx, this.state);
    this.enterRule(localctx, 188, JSettlersParser.RULE_brick);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 961;
        _la = this._input.LA(1);
        if(!(((((_la - 73)) & ~0x1f) == 0 && ((1 << (_la - 73)) & ((1 << (JSettlersParser.T__72 - 73)) | (1 << (JSettlersParser.T__73 - 73)) | (1 << (JSettlersParser.T__74 - 73)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function UnknownContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JSettlersParser.RULE_unknown;
    return this;
}

UnknownContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UnknownContext.prototype.constructor = UnknownContext;


UnknownContext.prototype.enterRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.enterUnknown(this);
	}
};

UnknownContext.prototype.exitRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.exitUnknown(this);
	}
};




JSettlersParser.UnknownContext = UnknownContext;

JSettlersParser.prototype.unknown = function() {

    var localctx = new UnknownContext(this, this._ctx, this.state);
    this.enterRule(localctx, 190, JSettlersParser.RULE_unknown);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 963;
        _la = this._input.LA(1);
        if(!(_la===JSettlersParser.T__75 || _la===JSettlersParser.T__76)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PieceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JSettlersParser.RULE_piece;
    return this;
}

PieceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PieceContext.prototype.constructor = PieceContext;

PieceContext.prototype.city = function() {
    return this.getTypedRuleContext(CityContext,0);
};

PieceContext.prototype.settlement = function() {
    return this.getTypedRuleContext(SettlementContext,0);
};

PieceContext.prototype.ship = function() {
    return this.getTypedRuleContext(ShipContext,0);
};

PieceContext.prototype.road = function() {
    return this.getTypedRuleContext(RoadContext,0);
};

PieceContext.prototype.enterRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.enterPiece(this);
	}
};

PieceContext.prototype.exitRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.exitPiece(this);
	}
};




JSettlersParser.PieceContext = PieceContext;

JSettlersParser.prototype.piece = function() {

    var localctx = new PieceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 192, JSettlersParser.RULE_piece);
    try {
        this.state = 969;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case JSettlersParser.T__79:
        case JSettlersParser.T__80:
            this.enterOuterAlt(localctx, 1);
            this.state = 965;
            this.city();
            break;
        case JSettlersParser.T__77:
        case JSettlersParser.T__78:
            this.enterOuterAlt(localctx, 2);
            this.state = 966;
            this.settlement();
            break;
        case JSettlersParser.T__81:
        case JSettlersParser.T__82:
            this.enterOuterAlt(localctx, 3);
            this.state = 967;
            this.ship();
            break;
        case JSettlersParser.T__83:
        case JSettlersParser.T__84:
            this.enterOuterAlt(localctx, 4);
            this.state = 968;
            this.road();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SettlementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JSettlersParser.RULE_settlement;
    return this;
}

SettlementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SettlementContext.prototype.constructor = SettlementContext;


SettlementContext.prototype.enterRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.enterSettlement(this);
	}
};

SettlementContext.prototype.exitRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.exitSettlement(this);
	}
};




JSettlersParser.SettlementContext = SettlementContext;

JSettlersParser.prototype.settlement = function() {

    var localctx = new SettlementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 194, JSettlersParser.RULE_settlement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 971;
        _la = this._input.LA(1);
        if(!(_la===JSettlersParser.T__77 || _la===JSettlersParser.T__78)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CityContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JSettlersParser.RULE_city;
    return this;
}

CityContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CityContext.prototype.constructor = CityContext;


CityContext.prototype.enterRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.enterCity(this);
	}
};

CityContext.prototype.exitRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.exitCity(this);
	}
};




JSettlersParser.CityContext = CityContext;

JSettlersParser.prototype.city = function() {

    var localctx = new CityContext(this, this._ctx, this.state);
    this.enterRule(localctx, 196, JSettlersParser.RULE_city);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 973;
        _la = this._input.LA(1);
        if(!(_la===JSettlersParser.T__79 || _la===JSettlersParser.T__80)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ShipContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JSettlersParser.RULE_ship;
    return this;
}

ShipContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ShipContext.prototype.constructor = ShipContext;


ShipContext.prototype.enterRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.enterShip(this);
	}
};

ShipContext.prototype.exitRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.exitShip(this);
	}
};




JSettlersParser.ShipContext = ShipContext;

JSettlersParser.prototype.ship = function() {

    var localctx = new ShipContext(this, this._ctx, this.state);
    this.enterRule(localctx, 198, JSettlersParser.RULE_ship);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 975;
        _la = this._input.LA(1);
        if(!(_la===JSettlersParser.T__81 || _la===JSettlersParser.T__82)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function RoadContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JSettlersParser.RULE_road;
    return this;
}

RoadContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RoadContext.prototype.constructor = RoadContext;


RoadContext.prototype.enterRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.enterRoad(this);
	}
};

RoadContext.prototype.exitRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.exitRoad(this);
	}
};




JSettlersParser.RoadContext = RoadContext;

JSettlersParser.prototype.road = function() {

    var localctx = new RoadContext(this, this._ctx, this.state);
    this.enterRule(localctx, 200, JSettlersParser.RULE_road);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 977;
        _la = this._input.LA(1);
        if(!(_la===JSettlersParser.T__83 || _la===JSettlersParser.T__84)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DevCardContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JSettlersParser.RULE_devCard;
    return this;
}

DevCardContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DevCardContext.prototype.constructor = DevCardContext;

DevCardContext.prototype.soldier = function() {
    return this.getTypedRuleContext(SoldierContext,0);
};

DevCardContext.prototype.monopoly = function() {
    return this.getTypedRuleContext(MonopolyContext,0);
};

DevCardContext.prototype.roadBuilding = function() {
    return this.getTypedRuleContext(RoadBuildingContext,0);
};

DevCardContext.prototype.victoryPoint = function() {
    return this.getTypedRuleContext(VictoryPointContext,0);
};

DevCardContext.prototype.yearOfPlenty = function() {
    return this.getTypedRuleContext(YearOfPlentyContext,0);
};

DevCardContext.prototype.enterRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.enterDevCard(this);
	}
};

DevCardContext.prototype.exitRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.exitDevCard(this);
	}
};




JSettlersParser.DevCardContext = DevCardContext;

JSettlersParser.prototype.devCard = function() {

    var localctx = new DevCardContext(this, this._ctx, this.state);
    this.enterRule(localctx, 202, JSettlersParser.RULE_devCard);
    try {
        this.state = 984;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case JSettlersParser.T__29:
        case JSettlersParser.T__85:
            this.enterOuterAlt(localctx, 1);
            this.state = 979;
            this.soldier();
            break;
        case JSettlersParser.T__86:
        case JSettlersParser.T__87:
            this.enterOuterAlt(localctx, 2);
            this.state = 980;
            this.monopoly();
            break;
        case JSettlersParser.T__88:
        case JSettlersParser.T__89:
            this.enterOuterAlt(localctx, 3);
            this.state = 981;
            this.roadBuilding();
            break;
        case JSettlersParser.T__90:
        case JSettlersParser.T__91:
            this.enterOuterAlt(localctx, 4);
            this.state = 982;
            this.victoryPoint();
            break;
        case JSettlersParser.T__92:
        case JSettlersParser.T__93:
            this.enterOuterAlt(localctx, 5);
            this.state = 983;
            this.yearOfPlenty();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SoldierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JSettlersParser.RULE_soldier;
    return this;
}

SoldierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SoldierContext.prototype.constructor = SoldierContext;


SoldierContext.prototype.enterRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.enterSoldier(this);
	}
};

SoldierContext.prototype.exitRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.exitSoldier(this);
	}
};




JSettlersParser.SoldierContext = SoldierContext;

JSettlersParser.prototype.soldier = function() {

    var localctx = new SoldierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 204, JSettlersParser.RULE_soldier);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 986;
        _la = this._input.LA(1);
        if(!(_la===JSettlersParser.T__29 || _la===JSettlersParser.T__85)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MonopolyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JSettlersParser.RULE_monopoly;
    return this;
}

MonopolyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MonopolyContext.prototype.constructor = MonopolyContext;


MonopolyContext.prototype.enterRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.enterMonopoly(this);
	}
};

MonopolyContext.prototype.exitRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.exitMonopoly(this);
	}
};




JSettlersParser.MonopolyContext = MonopolyContext;

JSettlersParser.prototype.monopoly = function() {

    var localctx = new MonopolyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 206, JSettlersParser.RULE_monopoly);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 988;
        _la = this._input.LA(1);
        if(!(_la===JSettlersParser.T__86 || _la===JSettlersParser.T__87)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function RoadBuildingContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JSettlersParser.RULE_roadBuilding;
    return this;
}

RoadBuildingContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RoadBuildingContext.prototype.constructor = RoadBuildingContext;


RoadBuildingContext.prototype.enterRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.enterRoadBuilding(this);
	}
};

RoadBuildingContext.prototype.exitRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.exitRoadBuilding(this);
	}
};




JSettlersParser.RoadBuildingContext = RoadBuildingContext;

JSettlersParser.prototype.roadBuilding = function() {

    var localctx = new RoadBuildingContext(this, this._ctx, this.state);
    this.enterRule(localctx, 208, JSettlersParser.RULE_roadBuilding);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 990;
        _la = this._input.LA(1);
        if(!(_la===JSettlersParser.T__88 || _la===JSettlersParser.T__89)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function VictoryPointContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JSettlersParser.RULE_victoryPoint;
    return this;
}

VictoryPointContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VictoryPointContext.prototype.constructor = VictoryPointContext;


VictoryPointContext.prototype.enterRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.enterVictoryPoint(this);
	}
};

VictoryPointContext.prototype.exitRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.exitVictoryPoint(this);
	}
};




JSettlersParser.VictoryPointContext = VictoryPointContext;

JSettlersParser.prototype.victoryPoint = function() {

    var localctx = new VictoryPointContext(this, this._ctx, this.state);
    this.enterRule(localctx, 210, JSettlersParser.RULE_victoryPoint);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 992;
        _la = this._input.LA(1);
        if(!(_la===JSettlersParser.T__90 || _la===JSettlersParser.T__91)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function YearOfPlentyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JSettlersParser.RULE_yearOfPlenty;
    return this;
}

YearOfPlentyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
YearOfPlentyContext.prototype.constructor = YearOfPlentyContext;


YearOfPlentyContext.prototype.enterRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.enterYearOfPlenty(this);
	}
};

YearOfPlentyContext.prototype.exitRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.exitYearOfPlenty(this);
	}
};




JSettlersParser.YearOfPlentyContext = YearOfPlentyContext;

JSettlersParser.prototype.yearOfPlenty = function() {

    var localctx = new YearOfPlentyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 212, JSettlersParser.RULE_yearOfPlenty);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 994;
        _la = this._input.LA(1);
        if(!(_la===JSettlersParser.T__92 || _la===JSettlersParser.T__93)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PortContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JSettlersParser.RULE_port;
    return this;
}

PortContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PortContext.prototype.constructor = PortContext;

PortContext.prototype.port31 = function() {
    return this.getTypedRuleContext(Port31Context,0);
};

PortContext.prototype.port41 = function() {
    return this.getTypedRuleContext(Port41Context,0);
};

PortContext.prototype.brickPort = function() {
    return this.getTypedRuleContext(BrickPortContext,0);
};

PortContext.prototype.wheatPort = function() {
    return this.getTypedRuleContext(WheatPortContext,0);
};

PortContext.prototype.timberPort = function() {
    return this.getTypedRuleContext(TimberPortContext,0);
};

PortContext.prototype.orePort = function() {
    return this.getTypedRuleContext(OrePortContext,0);
};

PortContext.prototype.sheepPort = function() {
    return this.getTypedRuleContext(SheepPortContext,0);
};

PortContext.prototype.enterRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.enterPort(this);
	}
};

PortContext.prototype.exitRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.exitPort(this);
	}
};




JSettlersParser.PortContext = PortContext;

JSettlersParser.prototype.port = function() {

    var localctx = new PortContext(this, this._ctx, this.state);
    this.enterRule(localctx, 214, JSettlersParser.RULE_port);
    try {
        this.state = 1003;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,79,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 996;
            this.port31();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 997;
            this.port41();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 998;
            this.brickPort();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 999;
            this.wheatPort();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 1000;
            this.timberPort();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 1001;
            this.orePort();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 1002;
            this.sheepPort();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PortPrefixContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JSettlersParser.RULE_portPrefix;
    return this;
}

PortPrefixContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PortPrefixContext.prototype.constructor = PortPrefixContext;

PortPrefixContext.prototype.U_PORT = function() {
    return this.getToken(JSettlersParser.U_PORT, 0);
};

PortPrefixContext.prototype.enterRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.enterPortPrefix(this);
	}
};

PortPrefixContext.prototype.exitRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.exitPortPrefix(this);
	}
};




JSettlersParser.PortPrefixContext = PortPrefixContext;

JSettlersParser.prototype.portPrefix = function() {

    var localctx = new PortPrefixContext(this, this._ctx, this.state);
    this.enterRule(localctx, 216, JSettlersParser.RULE_portPrefix);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1005;
        _la = this._input.LA(1);
        if(!(_la===JSettlersParser.T__94 || _la===JSettlersParser.U_PORT)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Port31Context(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JSettlersParser.RULE_port31;
    return this;
}

Port31Context.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Port31Context.prototype.constructor = Port31Context;

Port31Context.prototype.portPrefix = function() {
    return this.getTypedRuleContext(PortPrefixContext,0);
};

Port31Context.prototype.enterRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.enterPort31(this);
	}
};

Port31Context.prototype.exitRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.exitPort31(this);
	}
};




JSettlersParser.Port31Context = Port31Context;

JSettlersParser.prototype.port31 = function() {

    var localctx = new Port31Context(this, this._ctx, this.state);
    this.enterRule(localctx, 218, JSettlersParser.RULE_port31);
    try {
        this.state = 1011;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case JSettlersParser.T__95:
            this.enterOuterAlt(localctx, 1);
            this.state = 1007;
            this.match(JSettlersParser.T__95);
            break;
        case JSettlersParser.T__94:
        case JSettlersParser.U_PORT:
            this.enterOuterAlt(localctx, 2);
            this.state = 1008;
            this.portPrefix();
            this.state = 1009;
            this.match(JSettlersParser.T__96);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Port41Context(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JSettlersParser.RULE_port41;
    return this;
}

Port41Context.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Port41Context.prototype.constructor = Port41Context;

Port41Context.prototype.portPrefix = function() {
    return this.getTypedRuleContext(PortPrefixContext,0);
};

Port41Context.prototype.enterRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.enterPort41(this);
	}
};

Port41Context.prototype.exitRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.exitPort41(this);
	}
};




JSettlersParser.Port41Context = Port41Context;

JSettlersParser.prototype.port41 = function() {

    var localctx = new Port41Context(this, this._ctx, this.state);
    this.enterRule(localctx, 220, JSettlersParser.RULE_port41);
    try {
        this.state = 1017;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case JSettlersParser.T__97:
            this.enterOuterAlt(localctx, 1);
            this.state = 1013;
            this.match(JSettlersParser.T__97);
            break;
        case JSettlersParser.T__94:
        case JSettlersParser.U_PORT:
            this.enterOuterAlt(localctx, 2);
            this.state = 1014;
            this.portPrefix();
            this.state = 1015;
            this.match(JSettlersParser.T__98);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BrickPortContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JSettlersParser.RULE_brickPort;
    return this;
}

BrickPortContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BrickPortContext.prototype.constructor = BrickPortContext;

BrickPortContext.prototype.portPrefix = function() {
    return this.getTypedRuleContext(PortPrefixContext,0);
};

BrickPortContext.prototype.brick = function() {
    return this.getTypedRuleContext(BrickContext,0);
};

BrickPortContext.prototype.enterRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.enterBrickPort(this);
	}
};

BrickPortContext.prototype.exitRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.exitBrickPort(this);
	}
};




JSettlersParser.BrickPortContext = BrickPortContext;

JSettlersParser.prototype.brickPort = function() {

    var localctx = new BrickPortContext(this, this._ctx, this.state);
    this.enterRule(localctx, 222, JSettlersParser.RULE_brickPort);
    try {
        this.state = 1023;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case JSettlersParser.T__99:
            this.enterOuterAlt(localctx, 1);
            this.state = 1019;
            this.match(JSettlersParser.T__99);
            break;
        case JSettlersParser.T__94:
        case JSettlersParser.U_PORT:
            this.enterOuterAlt(localctx, 2);
            this.state = 1020;
            this.portPrefix();
            this.state = 1021;
            this.brick();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function WheatPortContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JSettlersParser.RULE_wheatPort;
    return this;
}

WheatPortContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WheatPortContext.prototype.constructor = WheatPortContext;

WheatPortContext.prototype.portPrefix = function() {
    return this.getTypedRuleContext(PortPrefixContext,0);
};

WheatPortContext.prototype.wheat = function() {
    return this.getTypedRuleContext(WheatContext,0);
};

WheatPortContext.prototype.enterRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.enterWheatPort(this);
	}
};

WheatPortContext.prototype.exitRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.exitWheatPort(this);
	}
};




JSettlersParser.WheatPortContext = WheatPortContext;

JSettlersParser.prototype.wheatPort = function() {

    var localctx = new WheatPortContext(this, this._ctx, this.state);
    this.enterRule(localctx, 224, JSettlersParser.RULE_wheatPort);
    try {
        this.state = 1029;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case JSettlersParser.T__100:
            this.enterOuterAlt(localctx, 1);
            this.state = 1025;
            this.match(JSettlersParser.T__100);
            break;
        case JSettlersParser.T__94:
        case JSettlersParser.U_PORT:
            this.enterOuterAlt(localctx, 2);
            this.state = 1026;
            this.portPrefix();
            this.state = 1027;
            this.wheat();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TimberPortContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JSettlersParser.RULE_timberPort;
    return this;
}

TimberPortContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TimberPortContext.prototype.constructor = TimberPortContext;

TimberPortContext.prototype.portPrefix = function() {
    return this.getTypedRuleContext(PortPrefixContext,0);
};

TimberPortContext.prototype.timber = function() {
    return this.getTypedRuleContext(TimberContext,0);
};

TimberPortContext.prototype.enterRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.enterTimberPort(this);
	}
};

TimberPortContext.prototype.exitRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.exitTimberPort(this);
	}
};




JSettlersParser.TimberPortContext = TimberPortContext;

JSettlersParser.prototype.timberPort = function() {

    var localctx = new TimberPortContext(this, this._ctx, this.state);
    this.enterRule(localctx, 226, JSettlersParser.RULE_timberPort);
    try {
        this.state = 1035;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case JSettlersParser.T__101:
            this.enterOuterAlt(localctx, 1);
            this.state = 1031;
            this.match(JSettlersParser.T__101);
            break;
        case JSettlersParser.T__94:
        case JSettlersParser.U_PORT:
            this.enterOuterAlt(localctx, 2);
            this.state = 1032;
            this.portPrefix();
            this.state = 1033;
            this.timber();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OrePortContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JSettlersParser.RULE_orePort;
    return this;
}

OrePortContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OrePortContext.prototype.constructor = OrePortContext;

OrePortContext.prototype.portPrefix = function() {
    return this.getTypedRuleContext(PortPrefixContext,0);
};

OrePortContext.prototype.ore = function() {
    return this.getTypedRuleContext(OreContext,0);
};

OrePortContext.prototype.enterRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.enterOrePort(this);
	}
};

OrePortContext.prototype.exitRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.exitOrePort(this);
	}
};




JSettlersParser.OrePortContext = OrePortContext;

JSettlersParser.prototype.orePort = function() {

    var localctx = new OrePortContext(this, this._ctx, this.state);
    this.enterRule(localctx, 228, JSettlersParser.RULE_orePort);
    try {
        this.state = 1041;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case JSettlersParser.T__102:
            this.enterOuterAlt(localctx, 1);
            this.state = 1037;
            this.match(JSettlersParser.T__102);
            break;
        case JSettlersParser.T__94:
        case JSettlersParser.U_PORT:
            this.enterOuterAlt(localctx, 2);
            this.state = 1038;
            this.portPrefix();
            this.state = 1039;
            this.ore();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SheepPortContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JSettlersParser.RULE_sheepPort;
    return this;
}

SheepPortContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SheepPortContext.prototype.constructor = SheepPortContext;

SheepPortContext.prototype.portPrefix = function() {
    return this.getTypedRuleContext(PortPrefixContext,0);
};

SheepPortContext.prototype.sheep = function() {
    return this.getTypedRuleContext(SheepContext,0);
};

SheepPortContext.prototype.enterRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.enterSheepPort(this);
	}
};

SheepPortContext.prototype.exitRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.exitSheepPort(this);
	}
};




JSettlersParser.SheepPortContext = SheepPortContext;

JSettlersParser.prototype.sheepPort = function() {

    var localctx = new SheepPortContext(this, this._ctx, this.state);
    this.enterRule(localctx, 230, JSettlersParser.RULE_sheepPort);
    try {
        this.state = 1047;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case JSettlersParser.T__103:
            this.enterOuterAlt(localctx, 1);
            this.state = 1043;
            this.match(JSettlersParser.T__103);
            break;
        case JSettlersParser.T__94:
        case JSettlersParser.U_PORT:
            this.enterOuterAlt(localctx, 2);
            this.state = 1044;
            this.portPrefix();
            this.state = 1045;
            this.sheep();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function HexContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JSettlersParser.RULE_hex;
    return this;
}

HexContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
HexContext.prototype.constructor = HexContext;

HexContext.prototype.pasture = function() {
    return this.getTypedRuleContext(PastureContext,0);
};

HexContext.prototype.forest = function() {
    return this.getTypedRuleContext(ForestContext,0);
};

HexContext.prototype.mountain = function() {
    return this.getTypedRuleContext(MountainContext,0);
};

HexContext.prototype.river = function() {
    return this.getTypedRuleContext(RiverContext,0);
};

HexContext.prototype.field = function() {
    return this.getTypedRuleContext(FieldContext,0);
};

HexContext.prototype.sea = function() {
    return this.getTypedRuleContext(SeaContext,0);
};

HexContext.prototype.none = function() {
    return this.getTypedRuleContext(NoneContext,0);
};

HexContext.prototype.desert = function() {
    return this.getTypedRuleContext(DesertContext,0);
};

HexContext.prototype.enterRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.enterHex(this);
	}
};

HexContext.prototype.exitRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.exitHex(this);
	}
};




JSettlersParser.HexContext = HexContext;

JSettlersParser.prototype.hex = function() {

    var localctx = new HexContext(this, this._ctx, this.state);
    this.enterRule(localctx, 232, JSettlersParser.RULE_hex);
    try {
        this.state = 1057;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case JSettlersParser.T__104:
        case JSettlersParser.T__105:
            this.enterOuterAlt(localctx, 1);
            this.state = 1049;
            this.pasture();
            break;
        case JSettlersParser.T__64:
        case JSettlersParser.T__106:
            this.enterOuterAlt(localctx, 2);
            this.state = 1050;
            this.forest();
            break;
        case JSettlersParser.T__107:
        case JSettlersParser.T__108:
            this.enterOuterAlt(localctx, 3);
            this.state = 1051;
            this.mountain();
            break;
        case JSettlersParser.T__109:
        case JSettlersParser.T__110:
            this.enterOuterAlt(localctx, 4);
            this.state = 1052;
            this.river();
            break;
        case JSettlersParser.T__111:
        case JSettlersParser.T__112:
            this.enterOuterAlt(localctx, 5);
            this.state = 1053;
            this.field();
            break;
        case JSettlersParser.T__113:
        case JSettlersParser.T__114:
            this.enterOuterAlt(localctx, 6);
            this.state = 1054;
            this.sea();
            break;
        case JSettlersParser.T__30:
        case JSettlersParser.T__115:
            this.enterOuterAlt(localctx, 7);
            this.state = 1055;
            this.none();
            break;
        case JSettlersParser.T__116:
        case JSettlersParser.T__117:
            this.enterOuterAlt(localctx, 8);
            this.state = 1056;
            this.desert();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PastureContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JSettlersParser.RULE_pasture;
    return this;
}

PastureContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PastureContext.prototype.constructor = PastureContext;


PastureContext.prototype.enterRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.enterPasture(this);
	}
};

PastureContext.prototype.exitRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.exitPasture(this);
	}
};




JSettlersParser.PastureContext = PastureContext;

JSettlersParser.prototype.pasture = function() {

    var localctx = new PastureContext(this, this._ctx, this.state);
    this.enterRule(localctx, 234, JSettlersParser.RULE_pasture);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1059;
        _la = this._input.LA(1);
        if(!(_la===JSettlersParser.T__104 || _la===JSettlersParser.T__105)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ForestContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JSettlersParser.RULE_forest;
    return this;
}

ForestContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ForestContext.prototype.constructor = ForestContext;


ForestContext.prototype.enterRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.enterForest(this);
	}
};

ForestContext.prototype.exitRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.exitForest(this);
	}
};




JSettlersParser.ForestContext = ForestContext;

JSettlersParser.prototype.forest = function() {

    var localctx = new ForestContext(this, this._ctx, this.state);
    this.enterRule(localctx, 236, JSettlersParser.RULE_forest);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1061;
        _la = this._input.LA(1);
        if(!(_la===JSettlersParser.T__64 || _la===JSettlersParser.T__106)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MountainContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JSettlersParser.RULE_mountain;
    return this;
}

MountainContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MountainContext.prototype.constructor = MountainContext;


MountainContext.prototype.enterRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.enterMountain(this);
	}
};

MountainContext.prototype.exitRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.exitMountain(this);
	}
};




JSettlersParser.MountainContext = MountainContext;

JSettlersParser.prototype.mountain = function() {

    var localctx = new MountainContext(this, this._ctx, this.state);
    this.enterRule(localctx, 238, JSettlersParser.RULE_mountain);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1063;
        _la = this._input.LA(1);
        if(!(_la===JSettlersParser.T__107 || _la===JSettlersParser.T__108)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function RiverContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JSettlersParser.RULE_river;
    return this;
}

RiverContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RiverContext.prototype.constructor = RiverContext;


RiverContext.prototype.enterRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.enterRiver(this);
	}
};

RiverContext.prototype.exitRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.exitRiver(this);
	}
};




JSettlersParser.RiverContext = RiverContext;

JSettlersParser.prototype.river = function() {

    var localctx = new RiverContext(this, this._ctx, this.state);
    this.enterRule(localctx, 240, JSettlersParser.RULE_river);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1065;
        _la = this._input.LA(1);
        if(!(_la===JSettlersParser.T__109 || _la===JSettlersParser.T__110)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FieldContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JSettlersParser.RULE_field;
    return this;
}

FieldContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FieldContext.prototype.constructor = FieldContext;


FieldContext.prototype.enterRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.enterField(this);
	}
};

FieldContext.prototype.exitRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.exitField(this);
	}
};




JSettlersParser.FieldContext = FieldContext;

JSettlersParser.prototype.field = function() {

    var localctx = new FieldContext(this, this._ctx, this.state);
    this.enterRule(localctx, 242, JSettlersParser.RULE_field);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1067;
        _la = this._input.LA(1);
        if(!(_la===JSettlersParser.T__111 || _la===JSettlersParser.T__112)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SeaContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JSettlersParser.RULE_sea;
    return this;
}

SeaContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SeaContext.prototype.constructor = SeaContext;


SeaContext.prototype.enterRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.enterSea(this);
	}
};

SeaContext.prototype.exitRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.exitSea(this);
	}
};




JSettlersParser.SeaContext = SeaContext;

JSettlersParser.prototype.sea = function() {

    var localctx = new SeaContext(this, this._ctx, this.state);
    this.enterRule(localctx, 244, JSettlersParser.RULE_sea);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1069;
        _la = this._input.LA(1);
        if(!(_la===JSettlersParser.T__113 || _la===JSettlersParser.T__114)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NoneContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JSettlersParser.RULE_none;
    return this;
}

NoneContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NoneContext.prototype.constructor = NoneContext;


NoneContext.prototype.enterRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.enterNone(this);
	}
};

NoneContext.prototype.exitRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.exitNone(this);
	}
};




JSettlersParser.NoneContext = NoneContext;

JSettlersParser.prototype.none = function() {

    var localctx = new NoneContext(this, this._ctx, this.state);
    this.enterRule(localctx, 246, JSettlersParser.RULE_none);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1071;
        _la = this._input.LA(1);
        if(!(_la===JSettlersParser.T__30 || _la===JSettlersParser.T__115)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DesertContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JSettlersParser.RULE_desert;
    return this;
}

DesertContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DesertContext.prototype.constructor = DesertContext;


DesertContext.prototype.enterRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.enterDesert(this);
	}
};

DesertContext.prototype.exitRule = function(listener) {
    if(listener instanceof JSettlersListener ) {
        listener.exitDesert(this);
	}
};




JSettlersParser.DesertContext = DesertContext;

JSettlersParser.prototype.desert = function() {

    var localctx = new DesertContext(this, this._ctx, this.state);
    this.enterRule(localctx, 248, JSettlersParser.RULE_desert);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1073;
        _la = this._input.LA(1);
        if(!(_la===JSettlersParser.T__116 || _la===JSettlersParser.T__117)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


exports.JSettlersParser = JSettlersParser;
